{
  "id": "cka-i-009",
  "title": "Cluster Security and Admission Controllers",
  "description": "Configure cluster security policies and admission controllers. Your tasks are:\n\n1. Enable the ||PodSecurityPolicy|| admission controller (if not already enabled)\n2. Create a PodSecurityPolicy named ||restricted-psp|| with:\n   - No privileged containers allowed\n   - No host network access\n   - No host PID or IPC access\n   - Required to run as non-root user\n   - No privilege escalation allowed\n3. Create a ClusterRole named ||restricted-psp-user|| that can use the ||restricted-psp|| policy\n4. Create a RoleBinding in namespace ||mars|| that grants the ||restricted-psp-user|| role to the ||default|| service account\n5. Test the policy by creating both a compliant and non-compliant pod in namespace ||mars||\n6. Verify that the non-compliant pod is rejected by the admission controller",
  "points": 10,
  "timeLimit": 20,
  "category": "Security",
  "tags": [
    "pod-security-policy",
    "admission-controllers",
    "cluster-security",
    "rbac",
    "security-policies",
    "intermediate"
  ],
  "infrastructure": {
    "namespaces": [
      "mars"
    ],
    "resources": [
      "podsecuritypolicies",
      "clusterroles",
      "rolebindings",
      "pods"
    ],
    "prerequisites": [
      "Admission controllers configurable",
      "PodSecurityPolicy API available"
    ]
  },
  "solution": {
    "steps": [
      "1. Check current admission controllers:",
      "   kubectl -n kube-system get pods kube-apiserver-* -o yaml | grep admission",
      "2. Create PodSecurityPolicy:",
      "   kubectl apply -f - <<EOF",
      "   apiVersion: policy/v1beta1",
      "   kind: PodSecurityPolicy",
      "   metadata:",
      "     name: restricted-psp",
      "   spec:",
      "     privileged: false",
      "     allowPrivilegeEscalation: false",
      "     requiredDropCapabilities:",
      "       - ALL",
      "     volumes:",
      "       - 'configMap'",
      "       - 'emptyDir'",
      "       - 'projected'",
      "       - 'secret'",
      "       - 'downwardAPI'",
      "       - 'persistentVolumeClaim'",
      "     hostNetwork: false",
      "     hostIPC: false",
      "     hostPID: false",
      "     runAsUser:",
      "       rule: 'MustRunAsNonRoot'",
      "     seLinux:",
      "       rule: 'RunAsAny'",
      "     fsGroup:",
      "       rule: 'RunAsAny'",
      "   EOF",
      "3. Create ClusterRole:",
      "   kubectl apply -f - <<EOF",
      "   apiVersion: rbac.authorization.k8s.io/v1",
      "   kind: ClusterRole",
      "   metadata:",
      "     name: restricted-psp-user",
      "   rules:",
      "   - apiGroups: ['policy']",
      "     resources: ['podsecuritypolicies']",
      "     verbs: ['use']",
      "     resourceNames:",
      "     - restricted-psp",
      "   EOF",
      "4. Create RoleBinding:",
      "   kubectl apply -f - <<EOF",
      "   apiVersion: rbac.authorization.k8s.io/v1",
      "   kind: RoleBinding",
      "   metadata:",
      "     name: restricted-psp-binding",
      "     namespace: mars",
      "   roleRef:",
      "     kind: ClusterRole",
      "     name: restricted-psp-user",
      "     apiGroup: rbac.authorization.k8s.io",
      "   subjects:",
      "   - kind: ServiceAccount",
      "     name: default",
      "     namespace: mars",
      "   EOF",
      "5. Test compliant pod:",
      "   kubectl apply -f - <<EOF",
      "   apiVersion: v1",
      "   kind: Pod",
      "   metadata:",
      "     name: compliant-pod",
      "     namespace: mars",
      "   spec:",
      "     securityContext:",
      "       runAsNonRoot: true",
      "       runAsUser: 1000",
      "     containers:",
      "     - name: app",
      "       image: nginx",
      "       securityContext:",
      "         allowPrivilegeEscalation: false",
      "         capabilities:",
      "           drop:",
      "           - ALL",
      "   EOF",
      "6. Test non-compliant pod (should fail):",
      "   kubectl apply -f - <<EOF",
      "   apiVersion: v1",
      "   kind: Pod",
      "   metadata:",
      "     name: privileged-pod",
      "     namespace: mars",
      "   spec:",
      "     containers:",
      "     - name: app",
      "       image: nginx",
      "       securityContext:",
      "         privileged: true",
      "   EOF"
    ]
  },
  "validations": [
    {
      "command": "kubectl get podsecuritypolicy restricted-psp",
      "expected": "restricted-psp.*false.*false.*false.*false.*MustRunAsNonRoot.*RunAsAny.*RunAsAny",
      "points": 2,
      "description": "PodSecurityPolicy should exist with correct restrictions"
    },
    {
      "command": "kubectl get clusterrole restricted-psp-user -o jsonpath='{.rules[0].resources[0]}'",
      "expected": "podsecuritypolicies",
      "points": 1,
      "description": "ClusterRole should grant access to PodSecurityPolicies"
    },
    {
      "command": "kubectl get rolebinding restricted-psp-binding -n mars -o jsonpath='{.subjects[0].name}'",
      "expected": "default",
      "points": 1,
      "description": "RoleBinding should bind to default service account"
    },
    {
      "command": "kubectl get pod compliant-pod -n mars -o jsonpath='{.status.phase}'",
      "expected": "Running|Pending",
      "points": 2,
      "description": "Compliant pod should be allowed to run"
    },
    {
      "command": "kubectl get pod privileged-pod -n mars 2>&1 || echo 'Pod creation failed as expected'",
      "expected": ".*failed.*|.*Error.*|.*forbidden.*|.*Pod creation failed as expected.*",
      "points": 3,
      "description": "Privileged pod should be rejected by admission controller"
    },
    {
      "command": "kubectl get pod compliant-pod -n mars -o jsonpath='{.spec.securityContext.runAsNonRoot}'",
      "expected": "true",
      "points": 1,
      "description": "Compliant pod should run as non-root user"
    }
  ]
}