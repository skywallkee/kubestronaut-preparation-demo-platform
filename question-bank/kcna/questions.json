{
  "examType": "kcna",
  "version": "1.0",
  "metadata": {
    "totalQuestions": 60,
    "questionsPerExam": 60,
    "passingScore": 75,
    "duration": 90,
    "difficulties": {
      "beginner": 20,
      "intermediate": 20,
      "advanced": 20
    }
  },
  "questions": {
    "beginner": [
      {
        "id": "kcna-b-001",
        "title": "Kubernetes Architecture Overview",
        "description": "Explain the main components of Kubernetes architecture and their roles in the cluster.",
        "points": 2,
        "timeLimit": 3,
        "category": "Kubernetes Fundamentals",
        "tags": ["architecture", "components", "cluster"],
        "infrastructure": {
          "namespaces": [],
          "resources": [],
          "prerequisites": ["theoretical knowledge"]
        },
        "solution": {
          "steps": [
            "1. Identify the control plane components:",
            "   - API Server: Central management entity",
            "   - etcd: Distributed key-value store",
            "   - Scheduler: Assigns pods to nodes",
            "   - Controller Manager: Runs controllers",
            "2. Identify worker node components:",
            "   - kubelet: Node agent",
            "   - kube-proxy: Network proxy",
            "   - Container runtime: Runs containers"
          ]
        },
        "validations": [
          {
            "command": "echo 'theoretical question - manual validation required'",
            "expected": "theoretical question - manual validation required",
            "points": 2,
            "description": "Understanding of Kubernetes architecture components"
          }
        ]
      },
      {
        "id": "kcna-b-002",
        "title": "Container Basics",
        "description": "Describe what containers are and how they differ from virtual machines.",
        "points": 2,
        "timeLimit": 3,
        "category": "Containers",
        "tags": ["containers", "virtualization", "concepts"],
        "infrastructure": {
          "namespaces": [],
          "resources": [],
          "prerequisites": ["theoretical knowledge"]
        },
        "solution": {
          "steps": [
            "1. Define containers:",
            "   - Lightweight, portable, and isolated application packages",
            "   - Include application and dependencies",
            "2. Contrast with VMs:",
            "   - Containers share the host OS kernel",
            "   - VMs include full operating system",
            "   - Containers are more resource-efficient"
          ]
        },
        "validations": [
          {
            "command": "echo 'theoretical question - manual validation required'",
            "expected": "theoretical question - manual validation required",
            "points": 2,
            "description": "Understanding of container fundamentals"
          }
        ]
      },
      {
        "id": "kcna-b-003",
        "title": "Cloud Native Definition",
        "description": "Define cloud native computing and list its key characteristics according to CNCF.",
        "points": 2,
        "timeLimit": 3,
        "category": "Cloud Native",
        "tags": ["cloud-native", "cncf", "definition"],
        "infrastructure": {
          "namespaces": [],
          "resources": [],
          "prerequisites": ["theoretical knowledge"]
        },
        "solution": {
          "steps": [
            "1. Define cloud native:",
            "   - Building and running applications in cloud environments",
            "   - Leveraging cloud computing advantages",
            "2. Key characteristics:",
            "   - Containerized applications",
            "   - Dynamically orchestrated",
            "   - Microservices oriented",
            "   - DevOps and continuous delivery"
          ]
        },
        "validations": [
          {
            "command": "echo 'theoretical question - manual validation required'",
            "expected": "theoretical question - manual validation required",
            "points": 2,
            "description": "Understanding of cloud native concepts"
          }
        ]
      },
      {
        "id": "kcna-b-004",
        "title": "Pod Concepts",
        "description": "Explain what a Kubernetes Pod is and why it's the smallest deployable unit.",
        "points": 2,
        "timeLimit": 3,
        "category": "Kubernetes Fundamentals",
        "tags": ["pods", "concepts", "deployment"],
        "infrastructure": {
          "namespaces": [],
          "resources": [],
          "prerequisites": ["theoretical knowledge"]
        },
        "solution": {
          "steps": [
            "1. Define Pod:",
            "   - Smallest deployable unit in Kubernetes",
            "   - Can contain one or more containers",
            "   - Shared network and storage",
            "2. Why it's the smallest unit:",
            "   - Containers in a pod share resources",
            "   - Scheduled together on the same node",
            "   - Share lifecycle"
          ]
        },
        "validations": [
          {
            "command": "echo 'theoretical question - manual validation required'",
            "expected": "theoretical question - manual validation required",
            "points": 2,
            "description": "Understanding of Pod concepts"
          }
        ]
      },
      {
        "id": "kcna-b-005",
        "title": "Service Types in Kubernetes",
        "description": "List and describe the different types of Kubernetes Services and their use cases.",
        "points": 3,
        "timeLimit": 4,
        "category": "Kubernetes Fundamentals",
        "tags": ["services", "networking", "types"],
        "infrastructure": {
          "namespaces": [],
          "resources": [],
          "prerequisites": ["theoretical knowledge"]
        },
        "solution": {
          "steps": [
            "1. ClusterIP:",
            "   - Default type, internal cluster access only",
            "2. NodePort:",
            "   - Exposes service on each node's IP at static port",
            "3. LoadBalancer:",
            "   - Exposes service externally using cloud load balancer",
            "4. ExternalName:",
            "   - Maps service to DNS name"
          ]
        },
        "validations": [
          {
            "command": "echo 'theoretical question - manual validation required'",
            "expected": "theoretical question - manual validation required",
            "points": 3,
            "description": "Understanding of Service types"
          }
        ]
      },
      {
        "id": "kcna-b-006",
        "title": "Container Images",
        "description": "Explain what container images are and the role of container registries.",
        "points": 2,
        "timeLimit": 3,
        "category": "Containers",
        "tags": ["images", "registry", "containers"],
        "infrastructure": {
          "namespaces": [],
          "resources": [],
          "prerequisites": ["theoretical knowledge"]
        },
        "solution": {
          "steps": [
            "1. Container Images:",
            "   - Read-only templates for creating containers",
            "   - Contains application code and dependencies",
            "   - Layered file system",
            "2. Container Registries:",
            "   - Storage and distribution system for images",
            "   - Examples: Docker Hub, Harbor, ECR",
            "   - Enable sharing and versioning"
          ]
        },
        "validations": [
          {
            "command": "echo 'theoretical question - manual validation required'",
            "expected": "theoretical question - manual validation required",
            "points": 2,
            "description": "Understanding of container images and registries"
          }
        ]
      },
      {
        "id": "kcna-b-007",
        "title": "Deployment vs ReplicaSet",
        "description": "Compare Kubernetes Deployments and ReplicaSets, explaining when to use each.",
        "points": 3,
        "timeLimit": 4,
        "category": "Kubernetes Fundamentals",
        "tags": ["deployment", "replicaset", "workloads"],
        "infrastructure": {
          "namespaces": [],
          "resources": [],
          "prerequisites": ["theoretical knowledge"]
        },
        "solution": {
          "steps": [
            "1. ReplicaSet:",
            "   - Ensures specified number of pod replicas",
            "   - Lower-level abstraction",
            "   - Directly manages pods",
            "2. Deployment:",
            "   - Higher-level abstraction over ReplicaSets",
            "   - Provides declarative updates",
            "   - Rolling updates and rollback capabilities",
            "   - Recommended for stateless applications"
          ]
        },
        "validations": [
          {
            "command": "echo 'theoretical question - manual validation required'",
            "expected": "theoretical question - manual validation required",
            "points": 3,
            "description": "Understanding of Deployment vs ReplicaSet"
          }
        ]
      },
      {
        "id": "kcna-b-008",
        "title": "ConfigMaps and Secrets",
        "description": "Explain the purpose of ConfigMaps and Secrets in Kubernetes and how they differ.",
        "points": 3,
        "timeLimit": 4,
        "category": "Configuration",
        "tags": ["configmap", "secrets", "configuration"],
        "infrastructure": {
          "namespaces": [],
          "resources": [],
          "prerequisites": ["theoretical knowledge"]
        },
        "solution": {
          "steps": [
            "1. ConfigMaps:",
            "   - Store non-confidential configuration data",
            "   - Key-value pairs accessible to pods",
            "   - Separate configuration from application code",
            "2. Secrets:",
            "   - Store sensitive information (passwords, tokens)",
            "   - Base64 encoded (not encrypted by default)",
            "   - More secure handling and access controls"
          ]
        },
        "validations": [
          {
            "command": "echo 'theoretical question - manual validation required'",
            "expected": "theoretical question - manual validation required",
            "points": 3,
            "description": "Understanding of ConfigMaps and Secrets"
          }
        ]
      },
      {
        "id": "kcna-b-009",
        "title": "Namespaces Purpose",
        "description": "Describe what Kubernetes namespaces are and their benefits for organizing resources.",
        "points": 2,
        "timeLimit": 3,
        "category": "Kubernetes Fundamentals",
        "tags": ["namespaces", "organization", "isolation"],
        "infrastructure": {
          "namespaces": [],
          "resources": [],
          "prerequisites": ["theoretical knowledge"]
        },
        "solution": {
          "steps": [
            "1. Namespaces definition:",
            "   - Virtual clusters within physical cluster",
            "   - Logical separation of resources",
            "2. Benefits:",
            "   - Resource organization and isolation",
            "   - Multi-tenancy support",
            "   - Resource quota and access control",
            "   - Environment separation (dev/staging/prod)"
          ]
        },
        "validations": [
          {
            "command": "echo 'theoretical question - manual validation required'",
            "expected": "theoretical question - manual validation required",
            "points": 2,
            "description": "Understanding of namespace concepts"
          }
        ]
      },
      {
        "id": "kcna-b-010",
        "title": "Ingress Controllers",
        "description": "Explain what Ingress and Ingress Controllers are in Kubernetes networking.",
        "points": 3,
        "timeLimit": 4,
        "category": "Networking",
        "tags": ["ingress", "networking", "controllers"],
        "infrastructure": {
          "namespaces": [],
          "resources": [],
          "prerequisites": ["theoretical knowledge"]
        },
        "solution": {
          "steps": [
            "1. Ingress:",
            "   - API object for managing external HTTP/HTTPS access",
            "   - Rules for routing traffic to services",
            "   - Path-based and host-based routing",
            "2. Ingress Controller:",
            "   - Implementation that handles Ingress resources",
            "   - Examples: NGINX, Traefik, HAProxy",
            "   - Manages load balancers and SSL termination"
          ]
        },
        "validations": [
          {
            "command": "echo 'theoretical question - manual validation required'",
            "expected": "theoretical question - manual validation required",
            "points": 3,
            "description": "Understanding of Ingress and controllers"
          }
        ]
      },
      {
        "id": "kcna-b-011",
        "title": "Persistent Volumes",
        "description": "Describe Persistent Volumes (PV) and Persistent Volume Claims (PVC) in Kubernetes storage.",
        "points": 3,
        "timeLimit": 4,
        "category": "Storage",
        "tags": ["storage", "volumes", "persistence"],
        "infrastructure": {
          "namespaces": [],
          "resources": [],
          "prerequisites": ["theoretical knowledge"]
        },
        "solution": {
          "steps": [
            "1. Persistent Volume (PV):",
            "   - Cluster-wide storage resource",
            "   - Independent of pod lifecycle",
            "   - Provisioned by admin or dynamically",
            "2. Persistent Volume Claim (PVC):",
            "   - Request for storage by user",
            "   - Specifies size and access modes",
            "   - Binds to suitable PV"
          ]
        },
        "validations": [
          {
            "command": "echo 'theoretical question - manual validation required'",
            "expected": "theoretical question - manual validation required",
            "points": 3,
            "description": "Understanding of persistent storage concepts"
          }
        ]
      },
      {
        "id": "kcna-b-012",
        "title": "Microservices Architecture",
        "description": "Explain microservices architecture and its benefits in cloud native applications.",
        "points": 3,
        "timeLimit": 4,
        "category": "Cloud Native",
        "tags": ["microservices", "architecture", "design"],
        "infrastructure": {
          "namespaces": [],
          "resources": [],
          "prerequisites": ["theoretical knowledge"]
        },
        "solution": {
          "steps": [
            "1. Microservices definition:",
            "   - Architectural approach with small, independent services",
            "   - Each service owns its data and business logic",
            "   - Communication via APIs",
            "2. Benefits:",
            "   - Independent scaling and deployment",
            "   - Technology diversity",
            "   - Fault isolation",
            "   - Team autonomy"
          ]
        },
        "validations": [
          {
            "command": "echo 'theoretical question - manual validation required'",
            "expected": "theoretical question - manual validation required",
            "points": 3,
            "description": "Understanding of microservices architecture"
          }
        ]
      },
      {
        "id": "kcna-b-013",
        "title": "Container Orchestration",
        "description": "Define container orchestration and explain why it's needed for containerized applications.",
        "points": 3,
        "timeLimit": 4,
        "category": "Orchestration",
        "tags": ["orchestration", "containers", "management"],
        "infrastructure": {
          "namespaces": [],
          "resources": [],
          "prerequisites": ["theoretical knowledge"]
        },
        "solution": {
          "steps": [
            "1. Container Orchestration:",
            "   - Automated management of containerized applications",
            "   - Handles deployment, scaling, networking, availability",
            "2. Why it's needed:",
            "   - Managing hundreds/thousands of containers",
            "   - Service discovery and load balancing",
            "   - Health monitoring and self-healing",
            "   - Resource optimization and scaling"
          ]
        },
        "validations": [
          {
            "command": "echo 'theoretical question - manual validation required'",
            "expected": "theoretical question - manual validation required",
            "points": 3,
            "description": "Understanding of container orchestration"
          }
        ]
      },
      {
        "id": "kcna-b-014",
        "title": "CNCF Landscape",
        "description": "Describe the Cloud Native Computing Foundation (CNCF) and its role in the ecosystem.",
        "points": 2,
        "timeLimit": 3,
        "category": "Cloud Native",
        "tags": ["cncf", "foundation", "ecosystem"],
        "infrastructure": {
          "namespaces": [],
          "resources": [],
          "prerequisites": ["theoretical knowledge"]
        },
        "solution": {
          "steps": [
            "1. CNCF Overview:",
            "   - Linux Foundation project for cloud native computing",
            "   - Hosts and governs critical projects",
            "   - Kubernetes is flagship project",
            "2. Role in ecosystem:",
            "   - Standards and certification programs",
            "   - Project incubation and graduation",
            "   - Education and training",
            "   - Community building and events"
          ]
        },
        "validations": [
          {
            "command": "echo 'theoretical question - manual validation required'",
            "expected": "theoretical question - manual validation required",
            "points": 2,
            "description": "Understanding of CNCF and its role"
          }
        ]
      },
      {
        "id": "kcna-b-015",
        "title": "DevOps and Cloud Native",
        "description": "Explain how DevOps practices align with cloud native development and deployment.",
        "points": 3,
        "timeLimit": 4,
        "category": "DevOps",
        "tags": ["devops", "practices", "alignment"],
        "infrastructure": {
          "namespaces": [],
          "resources": [],
          "prerequisites": ["theoretical knowledge"]
        },
        "solution": {
          "steps": [
            "1. DevOps alignment:",
            "   - Automation of build, test, deploy processes",
            "   - Infrastructure as Code (IaC)",
            "   - Continuous Integration/Continuous Deployment",
            "2. Cloud native enablers:",
            "   - Containerization supports consistent environments",
            "   - Microservices enable independent deployments",
            "   - Orchestration automates operations"
          ]
        },
        "validations": [
          {
            "command": "echo 'theoretical question - manual validation required'",
            "expected": "theoretical question - manual validation required",
            "points": 3,
            "description": "Understanding of DevOps and cloud native alignment"
          }
        ]
      },
      {
        "id": "kcna-b-016",
        "title": "API Gateway Concepts",
        "description": "Describe what an API Gateway is and its role in microservices architecture.",
        "points": 3,
        "timeLimit": 4,
        "category": "Networking",
        "tags": ["api-gateway", "microservices", "networking"],
        "infrastructure": {
          "namespaces": [],
          "resources": [],
          "prerequisites": ["theoretical knowledge"]
        },
        "solution": {
          "steps": [
            "1. API Gateway definition:",
            "   - Single entry point for all client requests",
            "   - Routes requests to appropriate microservices",
            "   - Handles cross-cutting concerns",
            "2. Key functions:",
            "   - Request routing and load balancing",
            "   - Authentication and authorization",
            "   - Rate limiting and throttling",
            "   - Request/response transformation"
          ]
        },
        "validations": [
          {
            "command": "echo 'theoretical question - manual validation required'",
            "expected": "theoretical question - manual validation required",
            "points": 3,
            "description": "Understanding of API Gateway concepts"
          }
        ]
      },
      {
        "id": "kcna-b-017",
        "title": "Container Runtime Interface",
        "description": "Explain what Container Runtime Interface (CRI) is and name common container runtimes.",
        "points": 2,
        "timeLimit": 3,
        "category": "Containers",
        "tags": ["cri", "runtime", "interface"],
        "infrastructure": {
          "namespaces": [],
          "resources": [],
          "prerequisites": ["theoretical knowledge"]
        },
        "solution": {
          "steps": [
            "1. CRI definition:",
            "   - Plugin interface for container runtimes",
            "   - Allows kubelet to work with different runtimes",
            "   - Standardizes container lifecycle management",
            "2. Common runtimes:",
            "   - containerd (most common)",
            "   - Docker Engine (deprecated in K8s)",
            "   - CRI-O (OCI-compliant)",
            "   - gVisor, Kata Containers (security-focused)"
          ]
        },
        "validations": [
          {
            "command": "echo 'theoretical question - manual validation required'",
            "expected": "theoretical question - manual validation required",
            "points": 2,
            "description": "Understanding of CRI and container runtimes"
          }
        ]
      },
      {
        "id": "kcna-b-018",
        "title": "Observability Pillars",
        "description": "List and describe the three pillars of observability in cloud native systems.",
        "points": 3,
        "timeLimit": 4,
        "category": "Observability",
        "tags": ["observability", "monitoring", "pillars"],
        "infrastructure": {
          "namespaces": [],
          "resources": [],
          "prerequisites": ["theoretical knowledge"]
        },
        "solution": {
          "steps": [
            "1. Metrics:",
            "   - Numerical measurements over time",
            "   - Performance indicators and counters",
            "   - Examples: CPU usage, request rate",
            "2. Logs:",
            "   - Structured or unstructured event records",
            "   - Application and system events",
            "   - Debugging and audit information",
            "3. Traces:",
            "   - Request flow through distributed system",
            "   - End-to-end transaction tracking",
            "   - Performance bottleneck identification"
          ]
        },
        "validations": [
          {
            "command": "echo 'theoretical question - manual validation required'",
            "expected": "theoretical question - manual validation required",
            "points": 3,
            "description": "Understanding of observability pillars"
          }
        ]
      },
      {
        "id": "kcna-b-019",
        "title": "Kubernetes Labels and Selectors",
        "description": "Explain the purpose of labels and selectors in Kubernetes resource management.",
        "points": 3,
        "timeLimit": 4,
        "category": "Kubernetes Fundamentals",
        "tags": ["labels", "selectors", "metadata"],
        "infrastructure": {
          "namespaces": [],
          "resources": [],
          "prerequisites": ["theoretical knowledge"]
        },
        "solution": {
          "steps": [
            "1. Labels:",
            "   - Key-value pairs attached to objects",
            "   - Identify and organize resources",
            "   - No semantic meaning to Kubernetes",
            "2. Selectors:",
            "   - Query mechanism for labels",
            "   - Used by controllers to find resources",
            "   - Two types: equality-based and set-based",
            "3. Common use cases:",
            "   - Service discovery",
            "   - Resource grouping",
            "   - Deployment targeting"
          ]
        },
        "validations": [
          {
            "command": "echo 'theoretical question - manual validation required'",
            "expected": "theoretical question - manual validation required",
            "points": 3,
            "description": "Understanding of labels and selectors"
          }
        ]
      },
      {
        "id": "kcna-b-020",
        "title": "GitOps Methodology",
        "description": "Define GitOps and explain its benefits for cloud native application deployment.",
        "points": 3,
        "timeLimit": 4,
        "category": "DevOps",
        "tags": ["gitops", "deployment", "automation"],
        "infrastructure": {
          "namespaces": [],
          "resources": [],
          "prerequisites": ["theoretical knowledge"]
        },
        "solution": {
          "steps": [
            "1. GitOps definition:",
            "   - Operational framework using Git as single source of truth",
            "   - Declarative infrastructure and applications",
            "   - Automated deployment based on Git changes",
            "2. Benefits:",
            "   - Version control for infrastructure",
            "   - Automated rollbacks and recovery",
            "   - Enhanced security and compliance",
            "   - Improved developer productivity"
          ]
        },
        "validations": [
          {
            "command": "echo 'theoretical question - manual validation required'",
            "expected": "theoretical question - manual validation required",
            "points": 3,
            "description": "Understanding of GitOps methodology"
          }
        ]
      }
    ],
    "intermediate": [
      {
        "id": "kcna-i-001",
        "title": "Service Mesh Architecture",
        "description": "Explain service mesh architecture, its components, and benefits for microservices communication.",
        "points": 4,
        "timeLimit": 5,
        "category": "Service Mesh",
        "tags": ["service-mesh", "architecture", "communication"],
        "infrastructure": {
          "namespaces": [],
          "resources": [],
          "prerequisites": ["theoretical knowledge"]
        },
        "solution": {
          "steps": [
            "1. Service Mesh components:",
            "   - Data plane: Sidecar proxies handle traffic",
            "   - Control plane: Manages proxy configuration",
            "   - Examples: Istio, Linkerd, Consul Connect",
            "2. Benefits:",
            "   - Traffic management and load balancing",
            "   - Security with mTLS encryption",
            "   - Observability and metrics collection",
            "   - Policy enforcement"
          ]
        },
        "validations": [
          {
            "command": "echo 'theoretical question - manual validation required'",
            "expected": "theoretical question - manual validation required",
            "points": 4,
            "description": "Understanding of service mesh architecture"
          }
        ]
      },
      {
        "id": "kcna-i-002",
        "title": "Container Security Best Practices",
        "description": "List and explain key security practices for containerized applications.",
        "points": 4,
        "timeLimit": 5,
        "category": "Security",
        "tags": ["security", "containers", "best-practices"],
        "infrastructure": {
          "namespaces": [],
          "resources": [],
          "prerequisites": ["theoretical knowledge"]
        },
        "solution": {
          "steps": [
            "1. Image security:",
            "   - Use minimal base images",
            "   - Scan for vulnerabilities",
            "   - Sign and verify images",
            "2. Runtime security:",
            "   - Run as non-root user",
            "   - Use read-only file systems",
            "   - Implement resource limits",
            "   - Network policies and segmentation"
          ]
        },
        "validations": [
          {
            "command": "echo 'theoretical question - manual validation required'",
            "expected": "theoretical question - manual validation required",
            "points": 4,
            "description": "Understanding of container security practices"
          }
        ]
      },
      {
        "id": "kcna-i-003",
        "title": "CI/CD Pipeline Components",
        "description": "Describe the key components and stages of a cloud native CI/CD pipeline.",
        "points": 4,
        "timeLimit": 5,
        "category": "DevOps",
        "tags": ["ci-cd", "pipeline", "automation"],
        "infrastructure": {
          "namespaces": [],
          "resources": [],
          "prerequisites": ["theoretical knowledge"]
        },
        "solution": {
          "steps": [
            "1. CI Pipeline stages:",
            "   - Source control integration",
            "   - Build and compile",
            "   - Unit and integration tests",
            "   - Security scanning",
            "2. CD Pipeline stages:",
            "   - Artifact storage",
            "   - Environment deployment",
            "   - Acceptance testing",
            "   - Production deployment",
            "   - Monitoring and rollback"
          ]
        },
        "validations": [
          {
            "command": "echo 'theoretical question - manual validation required'",
            "expected": "theoretical question - manual validation required",
            "points": 4,
            "description": "Understanding of CI/CD pipeline components"
          }
        ]
      },
      {
        "id": "kcna-i-004",
        "title": "Horizontal vs Vertical Scaling",
        "description": "Compare horizontal and vertical scaling strategies in cloud native applications.",
        "points": 3,
        "timeLimit": 4,
        "category": "Scaling",
        "tags": ["scaling", "horizontal", "vertical"],
        "infrastructure": {
          "namespaces": [],
          "resources": [],
          "prerequisites": ["theoretical knowledge"]
        },
        "solution": {
          "steps": [
            "1. Horizontal Scaling (Scale Out):",
            "   - Add more instances/pods",
            "   - Better fault tolerance",
            "   - Preferred for stateless applications",
            "   - HPA in Kubernetes",
            "2. Vertical Scaling (Scale Up):",
            "   - Increase CPU/memory per instance",
            "   - Simpler but limited by hardware",
            "   - VPA in Kubernetes",
            "   - Better for stateful applications"
          ]
        },
        "validations": [
          {
            "command": "echo 'theoretical question - manual validation required'",
            "expected": "theoretical question - manual validation required",
            "points": 3,
            "description": "Understanding of scaling strategies"
          }
        ]
      },
      {
        "id": "kcna-i-005",
        "title": "Container Image Layering",
        "description": "Explain how container image layers work and best practices for optimizing them.",
        "points": 4,
        "timeLimit": 5,
        "category": "Containers",
        "tags": ["images", "layers", "optimization"],
        "infrastructure": {
          "namespaces": [],
          "resources": [],
          "prerequisites": ["theoretical knowledge"]
        },
        "solution": {
          "steps": [
            "1. Layer concept:",
            "   - Each Dockerfile instruction creates a layer",
            "   - Layers are cached and reusable",
            "   - Union file system combines layers",
            "2. Optimization practices:",
            "   - Minimize number of layers",
            "   - Order instructions by change frequency",
            "   - Use multi-stage builds",
            "   - Clean up in same layer"
          ]
        },
        "validations": [
          {
            "command": "echo 'theoretical question - manual validation required'",
            "expected": "theoretical question - manual validation required",
            "points": 4,
            "description": "Understanding of container image layering"
          }
        ]
      },
      {
        "id": "kcna-i-006",
        "title": "Kubernetes Controllers",
        "description": "Explain the concept of controllers in Kubernetes and list common controller types.",
        "points": 4,
        "timeLimit": 5,
        "category": "Kubernetes Fundamentals",
        "tags": ["controllers", "reconciliation", "operators"],
        "infrastructure": {
          "namespaces": [],
          "resources": [],
          "prerequisites": ["theoretical knowledge"]
        },
        "solution": {
          "steps": [
            "1. Controller concept:",
            "   - Control loops that watch desired vs actual state",
            "   - Reconciliation process to maintain desired state",
            "   - Core pattern in Kubernetes",
            "2. Common controllers:",
            "   - Deployment Controller",
            "   - ReplicaSet Controller",
            "   - Service Controller",
            "   - Node Controller",
            "   - Job Controller"
          ]
        },
        "validations": [
          {
            "command": "echo 'theoretical question - manual validation required'",
            "expected": "theoretical question - manual validation required",
            "points": 4,
            "description": "Understanding of Kubernetes controllers"
          }
        ]
      },
      {
        "id": "kcna-i-007",
        "title": "Prometheus Monitoring Stack",
        "description": "Describe the Prometheus monitoring stack and its components for cloud native observability.",
        "points": 4,
        "timeLimit": 5,
        "category": "Observability",
        "tags": ["prometheus", "monitoring", "metrics"],
        "infrastructure": {
          "namespaces": [],
          "resources": [],
          "prerequisites": ["theoretical knowledge"]
        },
        "solution": {
          "steps": [
            "1. Core components:",
            "   - Prometheus Server: Metrics collection and storage",
            "   - Grafana: Visualization and dashboards",
            "   - Alertmanager: Alert handling and routing",
            "2. Data collection:",
            "   - Pull-based model with scraping",
            "   - Service discovery mechanisms",
            "   - Exporters for system metrics",
            "   - PromQL query language"
          ]
        },
        "validations": [
          {
            "command": "echo 'theoretical question - manual validation required'",
            "expected": "theoretical question - manual validation required",
            "points": 4,
            "description": "Understanding of Prometheus monitoring stack"
          }
        ]
      },
      {
        "id": "kcna-i-008",
        "title": "Container Networking Models",
        "description": "Compare different container networking models and their use cases.",
        "points": 4,
        "timeLimit": 5,
        "category": "Networking",
        "tags": ["networking", "models", "containers"],
        "infrastructure": {
          "namespaces": [],
          "resources": [],
          "prerequisites": ["theoretical knowledge"]
        },
        "solution": {
          "steps": [
            "1. Bridge networking:",
            "   - Default Docker network mode",
            "   - Isolated network with NAT",
            "2. Host networking:",
            "   - Share host network stack",
            "   - Better performance, less isolation",
            "3. Overlay networking:",
            "   - Multi-host container communication",
            "   - Examples: Flannel, Calico, Weave"
          ]
        },
        "validations": [
          {
            "command": "echo 'theoretical question - manual validation required'",
            "expected": "theoretical question - manual validation required",
            "points": 4,
            "description": "Understanding of container networking models"
          }
        ]
      },
      {
        "id": "kcna-i-009",
        "title": "StatefulSets vs Deployments",
        "description": "Compare StatefulSets and Deployments, explaining when to use each workload type.",
        "points": 4,
        "timeLimit": 5,
        "category": "Kubernetes Fundamentals",
        "tags": ["statefulset", "deployment", "workloads"],
        "infrastructure": {
          "namespaces": [],
          "resources": [],
          "prerequisites": ["theoretical knowledge"]
        },
        "solution": {
          "steps": [
            "1. Deployments:",
            "   - For stateless applications",
            "   - Pods are interchangeable",
            "   - No guaranteed ordering",
            "   - Ideal for web servers, APIs",
            "2. StatefulSets:",
            "   - For stateful applications",
            "   - Stable network identities",
            "   - Ordered deployment and scaling",
            "   - Persistent storage per pod",
            "   - Ideal for databases, message queues"
          ]
        },
        "validations": [
          {
            "command": "echo 'theoretical question - manual validation required'",
            "expected": "theoretical question - manual validation required",
            "points": 4,
            "description": "Understanding of StatefulSets vs Deployments"
          }
        ]
      },
      {
        "id": "kcna-i-010",
        "title": "Cloud Native Storage",
        "description": "Describe cloud native storage patterns and Container Storage Interface (CSI).",
        "points": 4,
        "timeLimit": 5,
        "category": "Storage",
        "tags": ["storage", "csi", "cloud-native"],
        "infrastructure": {
          "namespaces": [],
          "resources": [],
          "prerequisites": ["theoretical knowledge"]
        },
        "solution": {
          "steps": [
            "1. Cloud native storage patterns:",
            "   - Ephemeral storage for stateless apps",
            "   - Persistent storage for stateful apps",
            "   - Distributed storage systems",
            "2. Container Storage Interface (CSI):",
            "   - Standard for storage plugins",
            "   - Vendor-agnostic storage integration",
            "   - Dynamic provisioning capabilities",
            "   - Examples: AWS EBS, GCP PD, Ceph"
          ]
        },
        "validations": [
          {
            "command": "echo 'theoretical question - manual validation required'",
            "expected": "theoretical question - manual validation required",
            "points": 4,
            "description": "Understanding of cloud native storage"
          }
        ]
      },
      {
        "id": "kcna-i-011",
        "title": "Distributed Tracing",
        "description": "Explain distributed tracing concepts and tools in microservices environments.",
        "points": 4,
        "timeLimit": 5,
        "category": "Observability",
        "tags": ["tracing", "distributed", "microservices"],
        "infrastructure": {
          "namespaces": [],
          "resources": [],
          "prerequisites": ["theoretical knowledge"]
        },
        "solution": {
          "steps": [
            "1. Distributed tracing concepts:",
            "   - Tracks requests across microservices",
            "   - Spans represent individual operations",
            "   - Traces show complete request flow",
            "2. Key tools and standards:",
            "   - OpenTelemetry (instrumentation standard)",
            "   - Jaeger (distributed tracing platform)",
            "   - Zipkin (distributed tracing system)",
            "   - Service maps and dependency analysis"
          ]
        },
        "validations": [
          {
            "command": "echo 'theoretical question - manual validation required'",
            "expected": "theoretical question - manual validation required",
            "points": 4,
            "description": "Understanding of distributed tracing"
          }
        ]
      },
      {
        "id": "kcna-i-012",
        "title": "Infrastructure as Code",
        "description": "Describe Infrastructure as Code principles and popular tools in cloud native environments.",
        "points": 4,
        "timeLimit": 5,
        "category": "DevOps",
        "tags": ["iac", "terraform", "automation"],
        "infrastructure": {
          "namespaces": [],
          "resources": [],
          "prerequisites": ["theoretical knowledge"]
        },
        "solution": {
          "steps": [
            "1. IaC principles:",
            "   - Declarative infrastructure definitions",
            "   - Version control and code review",
            "   - Automated provisioning and updates",
            "   - Consistency and repeatability",
            "2. Popular tools:",
            "   - Terraform (multi-cloud)",
            "   - AWS CloudFormation",
            "   - Azure ARM Templates",
            "   - Kubernetes YAML manifests"
          ]
        },
        "validations": [
          {
            "command": "echo 'theoretical question - manual validation required'",
            "expected": "theoretical question - manual validation required",
            "points": 4,
            "description": "Understanding of Infrastructure as Code"
          }
        ]
      },
      {
        "id": "kcna-i-013",
        "title": "Load Balancing Strategies",
        "description": "Compare different load balancing algorithms and their use cases in cloud native applications.",
        "points": 3,
        "timeLimit": 4,
        "category": "Networking",
        "tags": ["load-balancing", "algorithms", "traffic"],
        "infrastructure": {
          "namespaces": [],
          "resources": [],
          "prerequisites": ["theoretical knowledge"]
        },
        "solution": {
          "steps": [
            "1. Common algorithms:",
            "   - Round Robin: Equal distribution",
            "   - Weighted Round Robin: Capacity-based",
            "   - Least Connections: Based on active connections",
            "   - IP Hash: Consistent routing",
            "2. Advanced strategies:",
            "   - Health check integration",
            "   - Circuit breaker patterns",
            "   - Blue-green and canary deployments"
          ]
        },
        "validations": [
          {
            "command": "echo 'theoretical question - manual validation required'",
            "expected": "theoretical question - manual validation required",
            "points": 3,
            "description": "Understanding of load balancing strategies"
          }
        ]
      },
      {
        "id": "kcna-i-014",
        "title": "Kubernetes Custom Resources",
        "description": "Explain Custom Resource Definitions (CRDs) and their role in extending Kubernetes.",
        "points": 4,
        "timeLimit": 5,
        "category": "Kubernetes Fundamentals",
        "tags": ["crd", "custom-resources", "extension"],
        "infrastructure": {
          "namespaces": [],
          "resources": [],
          "prerequisites": ["theoretical knowledge"]
        },
        "solution": {
          "steps": [
            "1. Custom Resource Definitions:",
            "   - Extend Kubernetes API with custom objects",
            "   - Define schema and validation rules",
            "   - Enable domain-specific resources",
            "2. Use cases and patterns:",
            "   - Application-specific configurations",
            "   - Database operators",
            "   - Custom controllers and operators",
            "   - Integration with external systems"
          ]
        },
        "validations": [
          {
            "command": "echo 'theoretical question - manual validation required'",
            "expected": "theoretical question - manual validation required",
            "points": 4,
            "description": "Understanding of Custom Resource Definitions"
          }
        ]
      },
      {
        "id": "kcna-i-015",
        "title": "Container Registry Security",
        "description": "Describe security considerations and best practices for container registries.",
        "points": 4,
        "timeLimit": 5,
        "category": "Security",
        "tags": ["registry", "security", "images"],
        "infrastructure": {
          "namespaces": [],
          "resources": [],
          "prerequisites": ["theoretical knowledge"]
        },
        "solution": {
          "steps": [
            "1. Security features:",
            "   - Image vulnerability scanning",
            "   - Image signing and verification",
            "   - Access control and authentication",
            "   - Audit logging",
            "2. Best practices:",
            "   - Use private registries for internal images",
            "   - Implement image promotion pipelines",
            "   - Regular security scanning",
            "   - Immutable image tags"
          ]
        },
        "validations": [
          {
            "command": "echo 'theoretical question - manual validation required'",
            "expected": "theoretical question - manual validation required",
            "points": 4,
            "description": "Understanding of container registry security"
          }
        ]
      },
      {
        "id": "kcna-i-016",
        "title": "Event-Driven Architecture",
        "description": "Explain event-driven architecture patterns and their implementation in cloud native systems.",
        "points": 4,
        "timeLimit": 5,
        "category": "Architecture",
        "tags": ["event-driven", "messaging", "patterns"],
        "infrastructure": {
          "namespaces": [],
          "resources": [],
          "prerequisites": ["theoretical knowledge"]
        },
        "solution": {
          "steps": [
            "1. Event-driven patterns:",
            "   - Publish-Subscribe messaging",
            "   - Event sourcing",
            "   - CQRS (Command Query Responsibility Segregation)",
            "   - Saga pattern for distributed transactions",
            "2. Implementation tools:",
            "   - Message brokers (Kafka, RabbitMQ)",
            "   - Event streaming platforms",
            "   - Serverless functions",
            "   - Event mesh architectures"
          ]
        },
        "validations": [
          {
            "command": "echo 'theoretical question - manual validation required'",
            "expected": "theoretical question - manual validation required",
            "points": 4,
            "description": "Understanding of event-driven architecture"
          }
        ]
      },
      {
        "id": "kcna-i-017",
        "title": "Chaos Engineering",
        "description": "Define chaos engineering and its benefits for building resilient cloud native systems.",
        "points": 4,
        "timeLimit": 5,
        "category": "Resilience",
        "tags": ["chaos-engineering", "resilience", "testing"],
        "infrastructure": {
          "namespaces": [],
          "resources": [],
          "prerequisites": ["theoretical knowledge"]
        },
        "solution": {
          "steps": [
            "1. Chaos engineering principles:",
            "   - Deliberately inject failures",
            "   - Test system resilience",
            "   - Build confidence in system behavior",
            "   - Practice incident response",
            "2. Implementation approaches:",
            "   - Infrastructure failures (network, compute)",
            "   - Application-level failures",
            "   - Gradual rollout and monitoring",
            "   - Tools: Chaos Monkey, Litmus, Gremlin"
          ]
        },
        "validations": [
          {
            "command": "echo 'theoretical question - manual validation required'",
            "expected": "theoretical question - manual validation required",
            "points": 4,
            "description": "Understanding of chaos engineering"
          }
        ]
      },
      {
        "id": "kcna-i-018",
        "title": "Multi-Cloud Strategy",
        "description": "Discuss multi-cloud strategies and considerations for cloud native applications.",
        "points": 4,
        "timeLimit": 5,
        "category": "Cloud Strategy",
        "tags": ["multi-cloud", "strategy", "portability"],
        "infrastructure": {
          "namespaces": [],
          "resources": [],
          "prerequisites": ["theoretical knowledge"]
        },
        "solution": {
          "steps": [
            "1. Multi-cloud benefits:",
            "   - Avoid vendor lock-in",
            "   - Leverage best-of-breed services",
            "   - Improved disaster recovery",
            "   - Regulatory compliance",
            "2. Implementation challenges:",
            "   - Complexity management",
            "   - Data consistency and transfer",
            "   - Security across providers",
            "   - Cost optimization",
            "   - Skill requirements"
          ]
        },
        "validations": [
          {
            "command": "echo 'theoretical question - manual validation required'",
            "expected": "theoretical question - manual validation required",
            "points": 4,
            "description": "Understanding of multi-cloud strategies"
          }
        ]
      },
      {
        "id": "kcna-i-019",
        "title": "Container Image Optimization",
        "description": "Describe techniques for optimizing container images for size, security, and performance.",
        "points": 4,
        "timeLimit": 5,
        "category": "Containers",
        "tags": ["optimization", "images", "performance"],
        "infrastructure": {
          "namespaces": [],
          "resources": [],
          "prerequisites": ["theoretical knowledge"]
        },
        "solution": {
          "steps": [
            "1. Size optimization:",
            "   - Use minimal base images (Alpine, distroless)",
            "   - Multi-stage builds",
            "   - Remove unnecessary packages",
            "   - Layer caching strategies",
            "2. Security optimization:",
            "   - Vulnerability scanning",
            "   - Non-root user execution",
            "   - Minimal attack surface",
            "   - Image signing and verification"
          ]
        },
        "validations": [
          {
            "command": "echo 'theoretical question - manual validation required'",
            "expected": "theoretical question - manual validation required",
            "points": 4,
            "description": "Understanding of container image optimization"
          }
        ]
      },
      {
        "id": "kcna-i-020",
        "title": "Kubernetes Operators",
        "description": "Explain the Operator pattern and its role in automating application lifecycle management.",
        "points": 4,
        "timeLimit": 5,
        "category": "Kubernetes Fundamentals",
        "tags": ["operators", "automation", "lifecycle"],
        "infrastructure": {
          "namespaces": [],
          "resources": [],
          "prerequisites": ["theoretical knowledge"]
        },
        "solution": {
          "steps": [
            "1. Operator pattern:",
            "   - Combines Custom Resources and Controllers",
            "   - Encodes operational knowledge",
            "   - Automates Day 2 operations",
            "   - Domain-specific automation",
            "2. Common use cases:",
            "   - Database management (backup, scaling)",
            "   - Application deployment and updates",
            "   - Certificate management",
            "   - Monitoring and alerting setup"
          ]
        },
        "validations": [
          {
            "command": "echo 'theoretical question - manual validation required'",
            "expected": "theoretical question - manual validation required",
            "points": 4,
            "description": "Understanding of Kubernetes Operators"
          }
        ]
      }
    ],
    "advanced": [
      {
        "id": "kcna-a-001",
        "title": "Advanced Service Mesh Patterns",
        "description": "Analyze advanced service mesh patterns including canary deployments, circuit breakers, and progressive delivery.",
        "points": 6,
        "timeLimit": 8,
        "category": "Service Mesh",
        "tags": ["advanced-patterns", "progressive-delivery", "resilience"],
        "infrastructure": {
          "namespaces": [],
          "resources": [],
          "prerequisites": ["theoretical knowledge"]
        },
        "solution": {
          "steps": [
            "1. Progressive delivery patterns:",
            "   - Canary deployments with traffic splitting",
            "   - Blue-green deployments",
            "   - Feature flags integration",
            "   - Automated rollback triggers",
            "2. Resilience patterns:",
            "   - Circuit breaker implementation",
            "   - Bulkhead isolation",
            "   - Retry and timeout strategies",
            "   - Rate limiting and throttling"
          ]
        },
        "validations": [
          {
            "command": "echo 'theoretical question - manual validation required'",
            "expected": "theoretical question - manual validation required",
            "points": 6,
            "description": "Understanding of advanced service mesh patterns"
          }
        ]
      },
      {
        "id": "kcna-a-002",
        "title": "Cloud Native Security Architecture",
        "description": "Design a comprehensive security architecture for a cloud native platform including zero-trust principles.",
        "points": 6,
        "timeLimit": 8,
        "category": "Security",
        "tags": ["security-architecture", "zero-trust", "comprehensive"],
        "infrastructure": {
          "namespaces": [],
          "resources": [],
          "prerequisites": ["theoretical knowledge"]
        },
        "solution": {
          "steps": [
            "1. Zero-trust principles:",
            "   - Never trust, always verify",
            "   - Micro-segmentation",
            "   - Identity-based access control",
            "   - Continuous monitoring",
            "2. Security layers:",
            "   - Supply chain security",
            "   - Runtime protection",
            "   - Network security",
            "   - Data protection",
            "   - Identity and access management"
          ]
        },
        "validations": [
          {
            "command": "echo 'theoretical question - manual validation required'",
            "expected": "theoretical question - manual validation required",
            "points": 6,
            "description": "Understanding of cloud native security architecture"
          }
        ]
      },
      {
        "id": "kcna-a-003",
        "title": "Event Streaming Architecture",
        "description": "Design a scalable event streaming architecture for real-time data processing in cloud native environments.",
        "points": 6,
        "timeLimit": 8,
        "category": "Data Architecture",
        "tags": ["event-streaming", "real-time", "scalability"],
        "infrastructure": {
          "namespaces": [],
          "resources": [],
          "prerequisites": ["theoretical knowledge"]
        },
        "solution": {
          "steps": [
            "1. Event streaming components:",
            "   - Event producers and consumers",
            "   - Message brokers (Kafka, Pulsar)",
            "   - Schema registry for data governance",
            "   - Stream processing engines",
            "2. Architecture patterns:",
            "   - Event sourcing implementation",
            "   - CQRS pattern integration",
            "   - Data lake integration",
            "   - Real-time analytics pipeline"
          ]
        },
        "validations": [
          {
            "command": "echo 'theoretical question - manual validation required'",
            "expected": "theoretical question - manual validation required",
            "points": 6,
            "description": "Understanding of event streaming architecture"
          }
        ]
      },
      {
        "id": "kcna-a-004",
        "title": "Advanced Kubernetes Scheduling",
        "description": "Analyze advanced Kubernetes scheduling concepts including custom schedulers and scheduling frameworks.",
        "points": 5,
        "timeLimit": 7,
        "category": "Kubernetes Advanced",
        "tags": ["scheduling", "custom-schedulers", "frameworks"],
        "infrastructure": {
          "namespaces": [],
          "resources": [],
          "prerequisites": ["theoretical knowledge"]
        },
        "solution": {
          "steps": [
            "1. Scheduling framework:",
            "   - Scheduling cycle phases",
            "   - Extension points and plugins",
            "   - Custom scheduling policies",
            "2. Advanced scheduling features:",
            "   - Pod topology spread constraints",
            "   - Node affinity and anti-affinity",
            "   - Inter-pod affinity rules",
            "   - Taints and tolerations",
            "   - Priority and preemption"
          ]
        },
        "validations": [
          {
            "command": "echo 'theoretical question - manual validation required'",
            "expected": "theoretical question - manual validation required",
            "points": 5,
            "description": "Understanding of advanced Kubernetes scheduling"
          }
        ]
      },
      {
        "id": "kcna-a-005",
        "title": "Serverless Computing Patterns",
        "description": "Evaluate serverless computing patterns and their integration with container-based workloads.",
        "points": 5,
        "timeLimit": 7,
        "category": "Serverless",
        "tags": ["serverless", "patterns", "integration"],
        "infrastructure": {
          "namespaces": [],
          "resources": [],
          "prerequisites": ["theoretical knowledge"]
        },
        "solution": {
          "steps": [
            "1. Serverless patterns:",
            "   - Function-as-a-Service (FaaS)",
            "   - Event-driven execution",
            "   - Auto-scaling and pay-per-use",
            "   - Cold start optimization",
            "2. Integration strategies:",
            "   - Knative for Kubernetes",
            "   - Hybrid serverless-container architectures",
            "   - API gateway integration",
            "   - Event sourcing with serverless"
          ]
        },
        "validations": [
          {
            "command": "echo 'theoretical question - manual validation required'",
            "expected": "theoretical question - manual validation required",
            "points": 5,
            "description": "Understanding of serverless computing patterns"
          }
        ]
      },
      {
        "id": "kcna-a-006",
        "title": "Multi-Tenancy Architecture",
        "description": "Design a multi-tenant cloud native platform with proper isolation, security, and resource management.",
        "points": 6,
        "timeLimit": 8,
        "category": "Architecture",
        "tags": ["multi-tenancy", "isolation", "resource-management"],
        "infrastructure": {
          "namespaces": [],
          "resources": [],
          "prerequisites": ["theoretical knowledge"]
        },
        "solution": {
          "steps": [
            "1. Tenancy models:",
            "   - Namespace-based isolation",
            "   - Cluster-based isolation",
            "   - Virtual cluster approaches",
            "2. Implementation considerations:",
            "   - Resource quotas and limits",
            "   - Network policies for isolation",
            "   - RBAC and security boundaries",
            "   - Monitoring and billing separation"
          ]
        },
        "validations": [
          {
            "command": "echo 'theoretical question - manual validation required'",
            "expected": "theoretical question - manual validation required",
            "points": 6,
            "description": "Understanding of multi-tenancy architecture"
          }
        ]
      },
      {
        "id": "kcna-a-007",
        "title": "Advanced Observability Strategies",
        "description": "Develop comprehensive observability strategies for complex distributed systems.",
        "points": 6,
        "timeLimit": 8,
        "category": "Observability",
        "tags": ["advanced-observability", "distributed-systems", "strategies"],
        "infrastructure": {
          "namespaces": [],
          "resources": [],
          "prerequisites": ["theoretical knowledge"]
        },
        "solution": {
          "steps": [
            "1. Advanced observability concepts:",
            "   - Service level objectives (SLOs)",
            "   - Error budgets and SLA management",
            "   - Synthetic monitoring",
            "   - Chaos engineering integration",
            "2. Implementation strategies:",
            "   - OpenTelemetry adoption",
            "   - Distributed tracing correlation",
            "   - Machine learning for anomaly detection",
            "   - Cost optimization monitoring"
          ]
        },
        "validations": [
          {
            "command": "echo 'theoretical question - manual validation required'",
            "expected": "theoretical question - manual validation required",
            "points": 6,
            "description": "Understanding of advanced observability strategies"
          }
        ]
      },
      {
        "id": "kcna-a-008",
        "title": "Cloud Cost Optimization",
        "description": "Analyze cloud cost optimization strategies for large-scale cloud native deployments.",
        "points": 5,
        "timeLimit": 7,
        "category": "Cost Management",
        "tags": ["cost-optimization", "finops", "resource-efficiency"],
        "infrastructure": {
          "namespaces": [],
          "resources": [],
          "prerequisites": ["theoretical knowledge"]
        },
        "solution": {
          "steps": [
            "1. Cost optimization strategies:",
            "   - Right-sizing resources",
            "   - Spot instance utilization",
            "   - Reserved capacity planning",
            "   - Auto-scaling optimization",
            "2. FinOps practices:",
            "   - Cost allocation and chargeback",
            "   - Budget alerts and governance",
            "   - Resource tagging strategies",
            "   - Cost anomaly detection"
          ]
        },
        "validations": [
          {
            "command": "echo 'theoretical question - manual validation required'",
            "expected": "theoretical question - manual validation required",
            "points": 5,
            "description": "Understanding of cloud cost optimization"
          }
        ]
      },
      {
        "id": "kcna-a-009",
        "title": "Edge Computing Integration",
        "description": "Design cloud native architectures that extend to edge computing environments.",
        "points": 6,
        "timeLimit": 8,
        "category": "Edge Computing",
        "tags": ["edge", "distributed", "architecture"],
        "infrastructure": {
          "namespaces": [],
          "resources": [],
          "prerequisites": ["theoretical knowledge"]
        },
        "solution": {
          "steps": [
            "1. Edge computing challenges:",
            "   - Limited resources and connectivity",
            "   - Latency requirements",
            "   - Offline operation capabilities",
            "   - Security in distributed environments",
            "2. Cloud native solutions:",
            "   - Lightweight container runtimes",
            "   - Edge orchestration platforms",
            "   - Data synchronization strategies",
            "   - Progressive web applications"
          ]
        },
        "validations": [
          {
            "command": "echo 'theoretical question - manual validation required'",
            "expected": "theoretical question - manual validation required",
            "points": 6,
            "description": "Understanding of edge computing integration"
          }
        ]
      },
      {
        "id": "kcna-a-010",
        "title": "Advanced CI/CD Patterns",
        "description": "Evaluate advanced CI/CD patterns including GitOps, progressive delivery, and compliance automation.",
        "points": 6,
        "timeLimit": 8,
        "category": "DevOps Advanced",
        "tags": ["advanced-cicd", "gitops", "compliance"],
        "infrastructure": {
          "namespaces": [],
          "resources": [],
          "prerequisites": ["theoretical knowledge"]
        },
        "solution": {
          "steps": [
            "1. Advanced CI/CD patterns:",
            "   - GitOps workflow implementation",
            "   - Policy as code integration",
            "   - Automated compliance checking",
            "   - Supply chain security integration",
            "2. Progressive delivery:",
            "   - Feature flag systems",
            "   - Automated canary analysis",
            "   - A/B testing integration",
            "   - Rollback automation"
          ]
        },
        "validations": [
          {
            "command": "echo 'theoretical question - manual validation required'",
            "expected": "theoretical question - manual validation required",
            "points": 6,
            "description": "Understanding of advanced CI/CD patterns"
          }
        ]
      },
      {
        "id": "kcna-a-011",
        "title": "Cloud Native Data Management",
        "description": "Design data management strategies for cloud native applications including polyglot persistence.",
        "points": 6,
        "timeLimit": 8,
        "category": "Data Management",
        "tags": ["data-management", "polyglot-persistence", "cloud-native"],
        "infrastructure": {
          "namespaces": [],
          "resources": [],
          "prerequisites": ["theoretical knowledge"]
        },
        "solution": {
          "steps": [
            "1. Cloud native data patterns:",
            "   - Database per microservice",
            "   - Event sourcing and CQRS",
            "   - Data lake and data mesh architectures",
            "   - Polyglot persistence strategies",
            "2. Data management challenges:",
            "   - Data consistency across services",
            "   - Backup and disaster recovery",
            "   - Data privacy and compliance",
            "   - Performance optimization"
          ]
        },
        "validations": [
          {
            "command": "echo 'theoretical question - manual validation required'",
            "expected": "theoretical question - manual validation required",
            "points": 6,
            "description": "Understanding of cloud native data management"
          }
        ]
      },
      {
        "id": "kcna-a-012",
        "title": "Platform Engineering Strategies",
        "description": "Analyze platform engineering approaches for building internal developer platforms.",
        "points": 6,
        "timeLimit": 8,
        "category": "Platform Engineering",
        "tags": ["platform-engineering", "developer-experience", "internal-platforms"],
        "infrastructure": {
          "namespaces": [],
          "resources": [],
          "prerequisites": ["theoretical knowledge"]
        },
        "solution": {
          "steps": [
            "1. Platform engineering principles:",
            "   - Self-service capabilities",
            "   - Golden path templates",
            "   - Developer experience optimization",
            "   - Platform as a product mindset",
            "2. Implementation strategies:",
            "   - Backstage developer portals",
            "   - Infrastructure abstraction layers",
            "   - Policy and governance automation",
            "   - Metrics and feedback loops"
          ]
        },
        "validations": [
          {
            "command": "echo 'theoretical question - manual validation required'",
            "expected": "theoretical question - manual validation required",
            "points": 6,
            "description": "Understanding of platform engineering strategies"
          }
        ]
      },
      {
        "id": "kcna-a-013",
        "title": "Advanced Networking Concepts",
        "description": "Evaluate advanced cloud native networking including service mesh integration and multi-cluster networking.",
        "points": 6,
        "timeLimit": 8,
        "category": "Networking Advanced",
        "tags": ["advanced-networking", "multi-cluster", "service-mesh"],
        "infrastructure": {
          "namespaces": [],
          "resources": [],
          "prerequisites": ["theoretical knowledge"]
        },
        "solution": {
          "steps": [
            "1. Advanced networking patterns:",
            "   - Multi-cluster service discovery",
            "   - Cross-cluster communication",
            "   - Network policy hierarchies",
            "   - Traffic mirroring and splitting",
            "2. Service mesh integration:",
            "   - Multi-cluster service mesh",
            "   - Federated identity and trust",
            "   - Advanced traffic management",
            "   - Observability across clusters"
          ]
        },
        "validations": [
          {
            "command": "echo 'theoretical question - manual validation required'",
            "expected": "theoretical question - manual validation required",
            "points": 6,
            "description": "Understanding of advanced networking concepts"
          }
        ]
      },
      {
        "id": "kcna-a-014",
        "title": "Supply Chain Security",
        "description": "Design comprehensive supply chain security for cloud native applications including SLSA framework.",
        "points": 6,
        "timeLimit": 8,
        "category": "Security Advanced",
        "tags": ["supply-chain", "slsa", "security"],
        "infrastructure": {
          "namespaces": [],
          "resources": [],
          "prerequisites": ["theoretical knowledge"]
        },
        "solution": {
          "steps": [
            "1. Supply chain security principles:",
            "   - SLSA (Supply chain Levels for Software Artifacts)",
            "   - Provenance and attestation",
            "   - Signed artifacts and verification",
            "   - Dependency management",
            "2. Implementation strategies:",
            "   - Build system security",
            "   - Artifact signing with Sigstore",
            "   - Vulnerability scanning integration",
            "   - Policy-based admission control"
          ]
        },
        "validations": [
          {
            "command": "echo 'theoretical question - manual validation required'",
            "expected": "theoretical question - manual validation required",
            "points": 6,
            "description": "Understanding of supply chain security"
          }
        ]
      },
      {
        "id": "kcna-a-015",
        "title": "Cloud Native AI/ML Platforms",
        "description": "Architect cloud native platforms for AI/ML workloads including MLOps practices.",
        "points": 6,
        "timeLimit": 8,
        "category": "AI/ML",
        "tags": ["ai-ml", "mlops", "platforms"],
        "infrastructure": {
          "namespaces": [],
          "resources": [],
          "prerequisites": ["theoretical knowledge"]
        },
        "solution": {
          "steps": [
            "1. ML platform components:",
            "   - Model training and experimentation",
            "   - Model serving and inference",
            "   - Data pipeline orchestration",
            "   - Feature store management",
            "2. MLOps practices:",
            "   - Continuous training pipelines",
            "   - Model versioning and registry",
            "   - A/B testing for models",
            "   - Model monitoring and drift detection"
          ]
        },
        "validations": [
          {
            "command": "echo 'theoretical question - manual validation required'",
            "expected": "theoretical question - manual validation required",
            "points": 6,
            "description": "Understanding of cloud native AI/ML platforms"
          }
        ]
      },
      {
        "id": "kcna-a-016",
        "title": "Disaster Recovery Planning",
        "description": "Design comprehensive disaster recovery strategies for cloud native applications across multiple regions.",
        "points": 6,
        "timeLimit": 8,
        "category": "Disaster Recovery",
        "tags": ["disaster-recovery", "multi-region", "resilience"],
        "infrastructure": {
          "namespaces": [],
          "resources": [],
          "prerequisites": ["theoretical knowledge"]
        },
        "solution": {
          "steps": [
            "1. DR strategy components:",
            "   - RTO (Recovery Time Objective) planning",
            "   - RPO (Recovery Point Objective) requirements",
            "   - Multi-region deployment strategies",
            "   - Data replication and backup",
            "2. Implementation patterns:",
            "   - Active-passive configurations",
            "   - Active-active with traffic splitting",
            "   - Database failover strategies",
            "   - Automated failover testing"
          ]
        },
        "validations": [
          {
            "command": "echo 'theoretical question - manual validation required'",
            "expected": "theoretical question - manual validation required",
            "points": 6,
            "description": "Understanding of disaster recovery planning"
          }
        ]
      },
      {
        "id": "kcna-a-017",
        "title": "Advanced Container Runtimes",
        "description": "Evaluate specialized container runtimes and their use cases in cloud native environments.",
        "points": 5,
        "timeLimit": 7,
        "category": "Container Technology",
        "tags": ["container-runtimes", "specialized", "security"],
        "infrastructure": {
          "namespaces": [],
          "resources": [],
          "prerequisites": ["theoretical knowledge"]
        },
        "solution": {
          "steps": [
            "1. Specialized runtimes:",
            "   - gVisor for enhanced isolation",
            "   - Kata Containers for VM-level security",
            "   - Firecracker for serverless workloads",
            "   - WebAssembly runtimes (wasmtime, wasmer)",
            "2. Use case analysis:",
            "   - Security requirements",
            "   - Performance characteristics",
            "   - Resource efficiency",
            "   - Ecosystem compatibility"
          ]
        },
        "validations": [
          {
            "command": "echo 'theoretical question - manual validation required'",
            "expected": "theoretical question - manual validation required",
            "points": 5,
            "description": "Understanding of advanced container runtimes"
          }
        ]
      },
      {
        "id": "kcna-a-018",
        "title": "Cloud Native Governance",
        "description": "Establish governance frameworks for large-scale cloud native transformations.",
        "points": 6,
        "timeLimit": 8,
        "category": "Governance",
        "tags": ["governance", "policy", "compliance"],
        "infrastructure": {
          "namespaces": [],
          "resources": [],
          "prerequisites": ["theoretical knowledge"]
        },
        "solution": {
          "steps": [
            "1. Governance frameworks:",
            "   - Policy as code implementation",
            "   - Compliance automation",
            "   - Security policy enforcement",
            "   - Cost governance and controls",
            "2. Implementation tools:",
            "   - Open Policy Agent (OPA)",
            "   - Admission controllers",
            "   - Resource quotas and limits",
            "   - Audit and monitoring systems"
          ]
        },
        "validations": [
          {
            "command": "echo 'theoretical question - manual validation required'",
            "expected": "theoretical question - manual validation required",
            "points": 6,
            "description": "Understanding of cloud native governance"
          }
        ]
      },
      {
        "id": "kcna-a-019",
        "title": "Advanced Storage Architecture",
        "description": "Design advanced storage architectures for cloud native applications including distributed storage systems.",
        "points": 6,
        "timeLimit": 8,
        "category": "Storage Advanced",
        "tags": ["storage-architecture", "distributed", "performance"],
        "infrastructure": {
          "namespaces": [],
          "resources": [],
          "prerequisites": ["theoretical knowledge"]
        },
        "solution": {
          "steps": [
            "1. Advanced storage patterns:",
            "   - Distributed storage systems (Ceph, GlusterFS)",
            "   - Software-defined storage",
            "   - Storage virtualization",
            "   - Hyper-converged infrastructure",
            "2. Performance optimization:",
            "   - Storage tiering strategies",
            "   - Caching mechanisms",
            "   - Data locality optimization",
            "   - Backup and archival policies"
          ]
        },
        "validations": [
          {
            "command": "echo 'theoretical question - manual validation required'",
            "expected": "theoretical question - manual validation required",
            "points": 6,
            "description": "Understanding of advanced storage architecture"
          }
        ]
      },
      {
        "id": "kcna-a-020",
        "title": "Future of Cloud Native Computing",
        "description": "Analyze emerging trends and future directions in cloud native computing technology.",
        "points": 5,
        "timeLimit": 7,
        "category": "Future Trends",
        "tags": ["trends", "future", "innovation"],
        "infrastructure": {
          "namespaces": [],
          "resources": [],
          "prerequisites": ["theoretical knowledge"]
        },
        "solution": {
          "steps": [
            "1. Emerging technologies:",
            "   - WebAssembly and WASI",
            "   - Confidential computing",
            "   - Quantum computing integration",
            "   - Advanced AI/ML integration",
            "2. Evolving patterns:",
            "   - Serverless-first architectures",
            "   - Event-driven everything",
            "   - Sustainability and green computing",
            "   - Developer experience focus"
          ]
        },
        "validations": [
          {
            "command": "echo 'theoretical question - manual validation required'",
            "expected": "theoretical question - manual validation required",
            "points": 5,
            "description": "Understanding of cloud native computing future"
          }
        ]
      }
    ]
  }
}