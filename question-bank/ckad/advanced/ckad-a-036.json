{
  "id": "ckad-a-036",
  "title": "Resource Quota Management and Pod Scheduling",
  "description": "Your team needs to implement strict resource governance in the ||production|| namespace. Create a comprehensive resource management system that includes ||resource quotas||, ||limit ranges||, and demonstrates how these constraints affect pod scheduling. The system should prevent resource over-allocation while ensuring critical workloads can still be scheduled. You'll also need to create pods that test both successful and failed scheduling scenarios due to resource constraints.",
  "points": 12,
  "timeLimit": 25,
  "category": "Core Concepts",
  "tags": ["resource-management", "quotas", "limits", "scheduling", "advanced"],
  "infrastructure": {
    "namespaces": ["production"],
    "resources": ["ResourceQuota", "LimitRange", "Pod"],
    "prerequisites": ["Clean namespace environment"]
  },
  "solution": {
    "steps": [
      "1. Create production namespace:",
      "   kubectl create namespace production",
      "2. Create ResourceQuota with comprehensive limits:",
      "   kubectl apply -f - <<EOF",
      "   apiVersion: v1",
      "   kind: ResourceQuota",
      "   metadata:",
      "     name: production-quota",
      "     namespace: production",
      "   spec:",
      "     hard:",
      "       requests.cpu: \"4\"",
      "       requests.memory: \"8Gi\"",
      "       limits.cpu: \"8\"",
      "       limits.memory: \"16Gi\"",
      "       pods: \"10\"",
      "       persistentvolumeclaims: \"5\"",
      "       services: \"5\"",
      "   EOF",
      "3. Create LimitRange for default and maximum constraints:",
      "   kubectl apply -f - <<EOF",
      "   apiVersion: v1",
      "   kind: LimitRange",
      "   metadata:",
      "     name: production-limits",
      "     namespace: production",
      "   spec:",
      "     limits:",
      "     - type: Container",
      "       default:",
      "         cpu: \"500m\"",
      "         memory: \"512Mi\"",
      "       defaultRequest:",
      "         cpu: \"100m\"",
      "         memory: \"128Mi\"",
      "       max:",
      "         cpu: \"2\"",
      "         memory: \"4Gi\"",
      "       min:",
      "         cpu: \"50m\"",
      "         memory: \"64Mi\"",
      "     - type: Pod",
      "       max:",
      "         cpu: \"4\"",
      "         memory: \"8Gi\"",
      "   EOF",
      "4. Create pod that fits within constraints:",
      "   kubectl apply -f - <<EOF",
      "   apiVersion: v1",
      "   kind: Pod",
      "   metadata:",
      "     name: compliant-pod",
      "     namespace: production",
      "   spec:",
      "     containers:",
      "     - name: app",
      "       image: nginx:alpine",
      "       resources:",
      "         requests:",
      "           cpu: \"200m\"",
      "           memory: \"256Mi\"",
      "         limits:",
      "           cpu: \"500m\"",
      "           memory: \"512Mi\"",
      "   EOF",
      "5. Attempt to create pod that exceeds LimitRange:",
      "   kubectl apply -f - <<EOF",
      "   apiVersion: v1",
      "   kind: Pod",
      "   metadata:",
      "     name: oversized-pod",
      "     namespace: production",
      "   spec:",
      "     containers:",
      "     - name: app",
      "       image: nginx:alpine",
      "       resources:",
      "         requests:",
      "           cpu: \"3\"",
      "           memory: \"6Gi\"",
      "         limits:",
      "           cpu: \"5\"",
      "           memory: \"10Gi\"",
      "   EOF",
      "6. Verify resource quota and limits enforcement:",
      "   kubectl get resourcequota production-quota -n production",
      "   kubectl describe resourcequota production-quota -n production",
      "   kubectl get limitrange production-limits -n production",
      "   kubectl describe limitrange production-limits -n production",
      "   kubectl get pods -n production"
    ]
  },
  "validations": [
    {
      "command": "kubectl get resourcequota -n production -o jsonpath='{.items[0].metadata.name}'",
      "expected": "production-quota",
      "points": 2,
      "description": "ResourceQuota exists with correct name"
    },
    {
      "command": "kubectl get limitrange -n production -o jsonpath='{.items[0].metadata.name}'",
      "expected": "production-limits",
      "points": 2,
      "description": "LimitRange exists with correct name"
    },
    {
      "command": "kubectl get pod -n production --field-selector=status.phase=Running | wc -l",
      "expected": "2",
      "points": 3,
      "description": "At least one pod is running successfully"
    },
    {
      "command": "kubectl get pod -n production --field-selector=status.phase=Failed | wc -l",
      "expected": "1",
      "points": 2,
      "description": "At least one pod failed due to resource constraints"
    },
    {
      "command": "kubectl describe resourcequota production-quota -n production | grep -E 'requests.cpu|requests.memory'",
      "expected": "non-zero-usage",
      "points": 3,
      "description": "ResourceQuota shows resource consumption"
    }
  ]
}