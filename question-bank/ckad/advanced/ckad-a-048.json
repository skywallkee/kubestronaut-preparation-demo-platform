{
  "id": "ckad-a-048",
  "title": "Advanced Sidecar Container Patterns",
  "description": "Implement a sophisticated ||sidecar container|| architecture for a web application. Create a main application container with multiple specialized sidecar containers: a ||logging sidecar|| that processes and forwards logs, a ||metrics sidecar|| that collects and exports application metrics, and a ||proxy sidecar|| that handles traffic routing and security. The containers should communicate through ||shared volumes||, ||localhost networking||, and environment variables. Demonstrate proper resource sharing, startup ordering, and graceful shutdown coordination between containers.",
  "points": 15,
  "timeLimit": 30,
  "category": "Multi-Container Pods",
  "tags": ["sidecar", "multi-container", "shared-volumes", "container-communication", "logging", "metrics", "advanced"],
  "infrastructure": {
    "namespaces": ["sidecar-demo"],
    "resources": ["Pod", "ConfigMap", "Service"],
    "prerequisites": ["Understanding of container communication patterns"]
  },
  "solution": {
    "steps": [
      "1. Create namespace and configuration:",
      "   kubectl create namespace sidecar-demo",
      "   kubectl create configmap sidecar-config -n sidecar-demo --from-literal=log_level=info --from-literal=metrics_port=9090",
      "2. Create pod with main application and sidecar containers:",
      "   kubectl apply -f - <<EOF",
      "   apiVersion: v1",
      "   kind: Pod",
      "   metadata:",
      "     name: webapp-with-sidecars",
      "     namespace: sidecar-demo",
      "   spec:",
      "     containers:",
      "     - name: main-app",
      "       image: nginx:alpine",
      "       ports:",
      "       - containerPort: 80",
      "       volumeMounts:",
      "       - name: app-logs",
      "         mountPath: /var/log/nginx",
      "       - name: shared-data",
      "         mountPath: /usr/share/nginx/html",
      "       command: ['/bin/sh', '-c']",
      "       args:",
      "       - |",
      "         echo 'Main application starting...' > /var/log/nginx/access.log",
      "         nginx -g 'daemon off;'",
      "     - name: logging-sidecar",
      "       image: busybox:latest",
      "       volumeMounts:",
      "       - name: app-logs",
      "         mountPath: /var/log/app",
      "       command: ['/bin/sh', '-c']",
      "       args:",
      "       - |",
      "         while true; do",
      "           if [ -f /var/log/app/access.log ]; then",
      "             echo \"[$(date)] Processing logs...\" >> /var/log/app/processed.log",
      "             tail -1 /var/log/app/access.log >> /var/log/app/processed.log",
      "           fi",
      "           sleep 10",
      "         done",
      "     - name: metrics-sidecar",
      "       image: busybox:latest",
      "       ports:",
      "       - containerPort: 8080",
      "       command: ['/bin/sh', '-c']",
      "       args:",
      "       - |",
      "         echo 'Starting metrics server on :8080'",
      "         while true; do",
      "           echo -e 'HTTP/1.1 200 OK\\n\\n# HELP app_requests_total Total requests\\n# TYPE app_requests_total counter\\napp_requests_total 42\\n# HELP app_uptime_seconds Application uptime\\n# TYPE app_uptime_seconds gauge\\napp_uptime_seconds 3600' | nc -l -p 8080",
      "         done",
      "     - name: proxy-sidecar",
      "       image: nginx:alpine",
      "       ports:",
      "       - containerPort: 8000",
      "       volumeMounts:",
      "       - name: proxy-config",
      "         mountPath: /etc/nginx/conf.d",
      "       command: ['/bin/sh', '-c']",
      "       args:",
      "       - |",
      "         cat > /etc/nginx/conf.d/default.conf << 'EOL'",
      "         server {",
      "           listen 8000;",
      "           location / {",
      "             proxy_pass http://127.0.0.1:80;",
      "           }",
      "           location /metrics {",
      "             proxy_pass http://127.0.0.1:8080;",
      "           }",
      "         }",
      "         EOL",
      "         nginx -g 'daemon off;'",
      "     volumes:",
      "     - name: app-logs",
      "       emptyDir: {}",
      "     - name: shared-data",
      "       emptyDir: {}",
      "     - name: proxy-config",
      "       emptyDir: {}",
      "   EOF",
      "3. Verify sidecar functionality:",
      "   kubectl exec webapp-with-sidecars -n sidecar-demo -c logging-sidecar -- ls -la /var/log/app/",
      "   kubectl exec webapp-with-sidecars -n sidecar-demo -c metrics-sidecar -- netstat -ln | grep :8080",
      "   kubectl exec webapp-with-sidecars -n sidecar-demo -c proxy-sidecar -- netstat -ln | grep :8000",
      "   kubectl logs webapp-with-sidecars -n sidecar-demo -c logging-sidecar --tail=5"
    ]
  },
  "validations": [
    {
      "command": "kubectl get pod webapp-with-sidecars -n sidecar-demo -o jsonpath='{.spec.containers}' | jq length",
      "expected": "4",
      "points": 3,
      "description": "Pod has 4 containers (main + 3 sidecars)"
    },
    {
      "command": "kubectl get pod webapp-with-sidecars -n sidecar-demo -o jsonpath='{.spec.volumes}' | jq length",
      "expected": "3",
      "points": 2,
      "description": "Pod has shared volumes for container communication"
    },
    {
      "command": "kubectl exec webapp-with-sidecars -n sidecar-demo -c logging-sidecar -- ls /var/log/app/",
      "expected": "access.log",
      "points": 3,
      "description": "Logging sidecar can access application logs"
    },
    {
      "command": "kubectl exec webapp-with-sidecars -n sidecar-demo -c metrics-sidecar -- curl -s localhost:8080/metrics | grep -c '^#'",
      "expected": "5",
      "points": 3,
      "description": "Metrics sidecar exports metrics on localhost"
    },
    {
      "command": "kubectl exec webapp-with-sidecars -n sidecar-demo -c proxy-sidecar -- netstat -ln | grep :80",
      "expected": "listening-port",
      "points": 2,
      "description": "Proxy sidecar is listening on port 80"
    },
    {
      "command": "kubectl get pod webapp-with-sidecars -n sidecar-demo --field-selector=status.phase=Running | wc -l",
      "expected": "2",
      "points": 2,
      "description": "All containers in pod are running"
    }
  ]
}