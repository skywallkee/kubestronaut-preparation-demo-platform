{
  "id": "ckad-a-053",
  "title": "Container Lifecycle Coordination",
  "description": "Implement sophisticated ||container lifecycle coordination|| in a multi-container pod. Create containers with interdependent startup and shutdown sequences using ||startup probes||, ||lifecycle hooks||, and ||graceful termination||. Design a system where containers must start in a specific order, coordinate their operations, and shut down gracefully in reverse order. Include scenarios with ||preStop hooks||, ||SIGTERM handling||, and ||termination grace periods||. Demonstrate how containers can signal each other for coordinated lifecycle management without using init containers.",
  "points": 14,
  "timeLimit": 28,
  "category": "Multi-Container Pods",
  "tags": ["container-lifecycle", "startup-coordination", "graceful-shutdown", "lifecycle-hooks", "termination", "advanced"],
  "infrastructure": {
    "namespaces": ["lifecycle-demo"],
    "resources": ["Pod", "ConfigMap"],
    "prerequisites": ["Understanding of container lifecycle events"]
  },
  "solution": {
    "steps": [
      "1. Create namespace and coordination scripts:",
      "   kubectl create namespace lifecycle-demo",
      "   kubectl create configmap coordination-scripts -n lifecycle-demo --from-literal=startup_check='#!/bin/sh\\necho ready > /tmp/started.flag'",
      "2. Create pod with lifecycle coordination:",
      "   kubectl apply -f - <<EOF",
      "   apiVersion: v1",
      "   kind: Pod",
      "   metadata:",
      "     name: lifecycle-app",
      "     namespace: lifecycle-demo",
      "   spec:",
      "     terminationGracePeriodSeconds: 60",
      "     containers:",
      "     - name: database",
      "       image: busybox:latest",
      "       command: ['/bin/sh', '-c']",
      "       args:",
      "       - |",
      "         echo \"Database container starting...\"",
      "         # Simulate database startup",
      "         sleep 10",
      "         echo \"ready\" > /tmp/started.flag",
      "         # Start simple HTTP server for health check",
      "         while true; do",
      "           echo -e 'HTTP/1.1 200 OK\\n\\nDatabase Ready' | nc -l -p 5432",
      "         done",
      "       startupProbe:",
      "         httpGet:",
      "           path: /health",
      "           port: 5432",
      "         initialDelaySeconds: 5",
      "         periodSeconds: 2",
      "         failureThreshold: 30",
      "       lifecycle:",
      "         preStop:",
      "           exec:",
      "             command: ['/bin/sh', '-c', 'echo \"Database shutting down gracefully\" >> /tmp/shutdown.log; sleep 10']",
      "       volumeMounts:",
      "       - name: coordination",
      "         mountPath: /tmp",
      "     - name: app",
      "       image: busybox:latest",
      "       command: ['/bin/sh', '-c']",
      "       args:",
      "       - |",
      "         echo \"Application waiting for database...\"",
      "         while [ ! -f /tmp/started.flag ]; do",
      "           echo \"Waiting for database readiness...\"",
      "           sleep 2",
      "         done",
      "         echo \"database_ready\" >> /tmp/coordination.log",
      "         echo \"Application started successfully\"",
      "         while true; do",
      "           echo \"App running: $(date)\" >> /tmp/app.log",
      "           sleep 30",
      "         done",
      "       lifecycle:",
      "         preStop:",
      "           exec:",
      "             command: ['/bin/sh', '-c', 'echo \"App shutting down\" >> /tmp/coordination.log; sleep 5']",
      "       volumeMounts:",
      "       - name: coordination",
      "         mountPath: /tmp",
      "     - name: monitor",
      "       image: busybox:latest",
      "       command: ['/bin/sh', '-c']",
      "       args:",
      "       - |",
      "         echo \"Monitor waiting for app startup...\"",
      "         while [ ! -f /tmp/coordination.log ] || ! grep -q \"database_ready\" /tmp/coordination.log; do",
      "           echo \"Waiting for application coordination...\"",
      "           sleep 3",
      "         done",
      "         echo \"Monitor started, all dependencies ready\"",
      "         while true; do",
      "           echo \"Monitoring: $(date)\" >> /tmp/monitor.log",
      "           sleep 60",
      "         done",
      "       lifecycle:",
      "         preStop:",
      "           exec:",
      "             command: ['/bin/sh', '-c', 'echo \"Monitor stopping\" >> /tmp/coordination.log']",
      "       volumeMounts:",
      "       - name: coordination",
      "         mountPath: /tmp",
      "     volumes:",
      "     - name: coordination",
      "       emptyDir: {}",
      "   EOF",
      "3. Verify lifecycle coordination:",
      "   kubectl get pod lifecycle-app -n lifecycle-demo -o jsonpath='{.spec.containers[*].name}'",
      "   kubectl exec lifecycle-app -n lifecycle-demo -c database -- cat /tmp/started.flag",
      "   kubectl exec lifecycle-app -n lifecycle-demo -c app -- grep database_ready /tmp/coordination.log",
      "   kubectl describe pod lifecycle-app -n lifecycle-demo | grep -A5 \"Startup\""
    ]
  },
  "validations": [
    {
      "command": "kubectl get pod lifecycle-app -n lifecycle-demo -o jsonpath='{.spec.containers[0].startupProbe.httpGet.path}'",
      "expected": "/health",
      "points": 2,
      "description": "Database container has startup probe configured"
    },
    {
      "command": "kubectl get pod lifecycle-app -n lifecycle-demo -o jsonpath='{.spec.containers[1].lifecycle.preStop.exec.command[0]}'",
      "expected": "/bin/sh",
      "points": 3,
      "description": "Application container has preStop hook"
    },
    {
      "command": "kubectl get pod lifecycle-app -n lifecycle-demo -o jsonpath='{.spec.terminationGracePeriodSeconds}'",
      "expected": "60",
      "points": 2,
      "description": "Pod has extended termination grace period"
    },
    {
      "command": "kubectl exec lifecycle-app -n lifecycle-demo -c database -- cat /tmp/started.flag",
      "expected": "ready",
      "points": 3,
      "description": "Database container signaled it's ready"
    },
    {
      "command": "kubectl exec lifecycle-app -n lifecycle-demo -c app -- cat /tmp/coordination.log | grep 'database_ready'",
      "expected": "database_ready",
      "points": 2,
      "description": "Application waited for database readiness"
    },
    {
      "command": "kubectl get pod lifecycle-app -n lifecycle-demo --field-selector=status.phase=Running | wc -l",
      "expected": "2",
      "points": 2,
      "description": "All containers started in coordinated manner"
    }
  ]
}