{
  "id": "ckad-a-035",
  "title": "Advanced ConfigMap and Secret Management with Dynamic Updates",
  "description": "Implement sophisticated configuration management in namespace ||config-mgmt|| with dynamic updates, validation, and secure handling:\n\n1. **Multi-Source Configuration**:\n   Create comprehensive configuration from multiple sources:\n   - **Application Config**: Database URLs, API endpoints, feature flags\n   - **Environment Config**: Development, staging, production overrides\n   - **Security Config**: API keys, certificates, encryption keys\n   - **Runtime Config**: Dynamic settings that change during execution\n\n2. **ConfigMap with Complex Data**:\n   Deploy ||app-config|| ConfigMap containing:\n   - **JSON Configuration**: Structured application settings\n   - **Properties Files**: Java-style configuration properties\n   - **YAML Config**: Kubernetes-native configuration format\n   - **Binary Data**: Encoded binary configuration files\n   - **Script Files**: Initialization and configuration scripts\n\n3. **Layered Secret Management**:\n   Implement multi-layered secret architecture:\n   - **Database Secrets**: Connection strings and credentials\n   - **API Secrets**: Third-party service authentication\n   - **TLS Secrets**: Certificates for secure communication\n   - **OAuth Secrets**: Client IDs and secrets for authentication\n   - **Encryption Secrets**: Keys for data encryption at rest\n\n4. **Dynamic Configuration Updates**:\n   Configure applications for live configuration reloading:\n   - **Sidecar Reloader**: Container that watches for config changes\n   - **Signal-Based Reload**: Send SIGHUP to trigger config reload\n   - **API-Based Updates**: RESTful endpoint for configuration updates\n   - **File Watching**: Monitor mounted config files for changes\n   - **Graceful Rollback**: Revert to previous config on validation failure\n\n5. **Configuration Validation**:\n   Implement config validation and testing:\n   - **Schema Validation**: JSON schema validation for configurations\n   - **Constraint Checking**: Business rule validation\n   - **Dependency Verification**: Check external service availability\n   - **Integration Tests**: Validate configuration in test environment\n   - **Rollback Triggers**: Automatic rollback on validation failure\n\n6. **Secret Rotation and Lifecycle**:\n   Implement automatic secret rotation:\n   - **Certificate Rotation**: Automatic TLS certificate renewal\n   - **Password Rotation**: Scheduled database password updates\n   - **API Key Rotation**: Third-party service key rotation\n   - **Encryption Key Rotation**: Regular encryption key updates\n   - **Audit Trails**: Track all secret access and modifications\n\n7. **Deployment Integration**:\n   Deploy applications using dynamic configuration:\n   - **Web Application**: React app with environment-specific config\n   - **API Service**: REST API with database and external service config\n   - **Worker Processes**: Background workers with queue configuration\n   - **Monitoring**: Prometheus configuration with dynamic targets\n\n8. **Security and Compliance**:\n   Ensure secure configuration management:\n   - **Encryption at Rest**: Encrypted secret storage\n   - **Access Control**: RBAC for configuration resources\n   - **Audit Logging**: Track configuration access and changes\n   - **Compliance Checks**: Validate against security policies\n   - **Secret Scanning**: Detect accidentally exposed secrets\n\nEnsure robust, secure, and dynamic configuration management with proper validation and rotation.",
  "points": 10,
  "timeLimit": 22,
  "category": "Configuration",
  "tags": [
    "configmaps",
    "secrets",
    "dynamic-config",
    "secret-rotation",
    "validation",
    "advanced"
  ],
  "infrastructure": {
    "namespaces": [
      "config-mgmt"
    ],
    "resources": [
      "configmaps",
      "secrets",
      "deployments",
      "cronjobs",
      "services"
    ]
  },
  "solution": {
    "steps": [
      "1. Create namespace and application ConfigMap with JSON data:",
      "   kubectl create namespace config-mgmt",
      "   kubectl apply -f - <<EOF",
      "   apiVersion: v1",
      "   kind: ConfigMap",
      "   metadata:",
      "     name: app-config",
      "     namespace: config-mgmt",
      "   data:",
      "     application.json: |",
      "       {",
      "         \"database\": {",
      "           \"host\": \"postgres.example.com\",",
      "           \"port\": 5432,",
      "           \"name\": \"myapp\"",
      "         },",
      "         \"api\": {",
      "           \"endpoint\": \"https://api.example.com\",",
      "           \"timeout\": 30",
      "         },",
      "         \"features\": {",
      "           \"enableCache\": true,",
      "           \"maxConnections\": 100",
      "         }",
      "       }",
      "     application.properties: |",
      "       server.port=8080",
      "       spring.profiles.active=production",
      "       logging.level.root=INFO",
      "     config.yaml: |",
      "       apiVersion: v1",
      "       kind: Config",
      "       metadata:",
      "         name: app-settings",
      "       spec:",
      "         replicas: 3",
      "         image: nginx:latest",
      "   EOF",
      "2. Create database credentials secret:",
      "   kubectl apply -f - <<EOF",
      "   apiVersion: v1",
      "   kind: Secret",
      "   metadata:",
      "     name: database-credentials",
      "     namespace: config-mgmt",
      "   type: Opaque",
      "   data:",
      "     username: $(echo -n 'dbuser' | base64 -w 0)",
      "     password: $(echo -n 'superSecurePassword123456789012' | base64 -w 0)",
      "     connection-string: $(echo -n 'postgresql://dbuser:superSecurePassword123456789012@postgres.example.com:5432/myapp' | base64 -w 0)",
      "   EOF",
      "3. Create API secrets for external services:",
      "   kubectl apply -f - <<EOF",
      "   apiVersion: v1",
      "   kind: Secret",
      "   metadata:",
      "     name: api-secrets",
      "     namespace: config-mgmt",
      "   type: Opaque",
      "   data:",
      "     api-key: $(echo -n 'sk-1234567890abcdef' | base64 -w 0)",
      "     client-id: $(echo -n 'client-abc123' | base64 -w 0)",
      "     client-secret: $(echo -n 'secret-xyz789' | base64 -w 0)",
      "   EOF",
      "4. Deploy application using ConfigMap and Secrets:",
      "   kubectl apply -f - <<EOF",
      "   apiVersion: apps/v1",
      "   kind: Deployment",
      "   metadata:",
      "     name: config-demo-app",
      "     namespace: config-mgmt",
      "   spec:",
      "     replicas: 2",
      "     selector:",
      "       matchLabels:",
      "         app: config-demo",
      "     template:",
      "       metadata:",
      "         labels:",
      "           app: config-demo",
      "       spec:",
      "         containers:",
      "         - name: app",
      "           image: nginx:alpine",
      "           ports:",
      "           - containerPort: 80",
      "           env:",
      "           - name: DB_USERNAME",
      "             valueFrom:",
      "               secretKeyRef:",
      "                 name: database-credentials",
      "                 key: username",
      "           - name: DB_PASSWORD",
      "             valueFrom:",
      "               secretKeyRef:",
      "                 name: database-credentials",
      "                 key: password",
      "           - name: API_KEY",
      "             valueFrom:",
      "               secretKeyRef:",
      "                 name: api-secrets",
      "                 key: api-key",
      "           volumeMounts:",
      "           - name: app-config-vol",
      "             mountPath: /etc/config",
      "           - name: app-properties-vol",
      "             mountPath: /etc/properties",
      "         volumes:",
      "         - name: app-config-vol",
      "           configMap:",
      "             name: app-config",
      "         - name: app-properties-vol",
      "           configMap:",
      "             name: app-config",
      "             items:",
      "             - key: application.properties",
      "               path: app.properties",
      "   EOF",
      "5. Create config reloader sidecar:",
      "   kubectl apply -f - <<EOF",
      "   apiVersion: apps/v1",
      "   kind: Deployment",
      "   metadata:",
      "     name: config-reloader-demo",
      "     namespace: config-mgmt",
      "   spec:",
      "     replicas: 1",
      "     selector:",
      "       matchLabels:",
      "         app: config-reloader",
      "     template:",
      "       metadata:",
      "         labels:",
      "           app: config-reloader",
      "       spec:",
      "         containers:",
      "         - name: main-app",
      "           image: nginx:alpine",
      "           ports:",
      "           - containerPort: 80",
      "           volumeMounts:",
      "           - name: config-volume",
      "             mountPath: /etc/config",
      "         - name: config-reloader",
      "           image: jimmidyson/configmap-reload:latest",
      "           args:",
      "           - '--volume-dir=/etc/config'",
      "           - '--webhook-url=http://localhost:80/reload'",
      "           volumeMounts:",
      "           - name: config-volume",
      "             mountPath: /etc/config",
      "         volumes:",
      "         - name: config-volume",
      "           configMap:",
      "             name: app-config",
      "   EOF",
      "6. Verify configuration deployment:",
      "   kubectl get configmaps -n config-mgmt",
      "   kubectl get secrets -n config-mgmt",
      "   kubectl get deployments -n config-mgmt",
      "   kubectl describe configmap app-config -n config-mgmt"
    ]
  },
  "validations": [
    {
      "command": "kubectl get configmap app-config -n config-mgmt -o jsonpath='{.data.application\.json}' | jq .database.host",
      "expected": "postgres.example.com",
      "points": 1,
      "description": "App config should contain structured JSON configuration"
    },
    {
      "command": "kubectl get secret database-credentials -n config-mgmt -o jsonpath='{.data.password}' | base64 -d | wc -c",
      "expected": "32",
      "points": 1,
      "description": "Database password should be 32 characters"
    }
  ]
}