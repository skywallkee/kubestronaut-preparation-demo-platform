{
  "id": "ckad-a-030",
  "title": "Advanced Network Policies for Zero-Trust Architecture",
  "description": "Implement a comprehensive zero-trust network security model in namespace ||secure-net|| with sophisticated network policies and micro-segmentation:\n\n1. **Zero-Trust Network Architecture**:\n   Design a zero-trust environment with:\n   - **Default Deny**: Block all traffic by default\n   - **Explicit Allow**: Only permit necessary communications\n   - **Micro-segmentation**: Isolate services at the pod level\n   - **Least Privilege**: Minimal required network access\n\n2. **Multi-Tier Application Deployment**:\n   Deploy a three-tier application:\n   - **Frontend Tier**: Web servers (nginx:1.21) - 3 replicas\n   - **Application Tier**: API servers (httpd:2.4) - 2 replicas  \n   - **Database Tier**: Database servers (postgres:13) - 1 replica\n   - **Cache Tier**: Redis cache (redis:6.2) - 1 replica\n\n3. **Ingress Network Policies**:\n   Configure ingress rules for each tier:\n   - **Frontend Ingress**: Allow traffic from external load balancer only\n   - **API Ingress**: Allow traffic from frontend pods only\n   - **Database Ingress**: Allow traffic from API pods only on port 5432\n   - **Cache Ingress**: Allow traffic from API pods only on port 6379\n\n4. **Egress Network Policies**:\n   Configure egress rules for each tier:\n   - **Frontend Egress**: Allow to API tier and external CDN\n   - **API Egress**: Allow to database and cache tiers, external APIs\n   - **Database Egress**: Deny all external traffic, allow DNS only\n   - **Cache Egress**: Deny all external traffic, allow DNS only\n\n5. **Cross-Namespace Communication**:\n   Implement controlled cross-namespace access:\n   - **Monitoring Access**: Allow monitoring pods to scrape metrics\n   - **Backup Access**: Allow backup jobs to access database\n   - **Log Collection**: Allow logging agents to collect logs\n   - **Security Scanning**: Allow security scanners limited access\n\n6. **Protocol-Specific Policies**:\n   Create policies for different protocols:\n   - **HTTP/HTTPS**: Specific port and path-based rules\n   - **gRPC**: Protocol-aware communication policies\n   - **Database**: Protocol-specific database access\n   - **DNS**: Allow DNS resolution for all pods\n\n7. **Time-Based and Conditional Policies**:\n   Implement advanced policy features:\n   - **Maintenance Windows**: Temporary elevated access\n   - **Emergency Access**: Break-glass procedures\n   - **Development Hours**: Time-restricted debug access\n   - **Audit Trails**: Policy violation logging\n\n8. **Policy Testing and Validation**:\n   Create comprehensive testing:\n   - **Connectivity Matrix**: Test all allowed/denied communications\n   - **Security Scans**: Verify policy enforcement\n   - **Penetration Tests**: Attempt unauthorized access\n   - **Compliance Checks**: Validate zero-trust principles\n   - **Performance Impact**: Measure policy overhead\n\nEnsure robust zero-trust network security with comprehensive micro-segmentation.",
  "points": 11,
  "timeLimit": 23,
  "category": "Services & Networking",
  "tags": [
    "network-policies",
    "zero-trust",
    "micro-segmentation",
    "security",
    "ingress-egress",
    "advanced"
  ],
  "infrastructure": {
    "namespaces": [
      "secure-net"
    ],
    "resources": [
      "networkpolicies",
      "deployments",
      "services",
      "pods",
      "jobs"
    ],
    "prerequisites": [
      "network-policy-controller",
      "calico-or-cilium"
    ]
  },
  "solution": {
    "steps": [
      "1. Create namespace and default deny-all network policy:",
      "   kubectl create namespace secure-net",
      "   kubectl apply -f - <<EOF",
      "   apiVersion: networking.k8s.io/v1",
      "   kind: NetworkPolicy",
      "   metadata:",
      "     name: default-deny",
      "     namespace: secure-net",
      "   spec:",
      "     podSelector: {}",
      "     policyTypes:",
      "     - Ingress",
      "     - Egress",
      "   EOF",
      "2. Deploy three-tier application with proper labels:",
      "   kubectl create deployment frontend --image=nginx:1.21 --replicas=3 -n secure-net",
      "   kubectl label deployment frontend tier=frontend -n secure-net",
      "   kubectl create deployment api --image=httpd:2.4 --replicas=2 -n secure-net",
      "   kubectl label deployment api tier=api -n secure-net",
      "   kubectl create deployment database --image=postgres:13 --replicas=1 -n secure-net",
      "   kubectl label deployment database tier=database -n secure-net",
      "   kubectl create deployment cache --image=redis:6.2 --replicas=1 -n secure-net",
      "   kubectl label deployment cache tier=cache -n secure-net",
      "3. Create ingress policies for each tier:",
      "   kubectl apply -f - <<EOF",
      "   apiVersion: networking.k8s.io/v1",
      "   kind: NetworkPolicy",
      "   metadata:",
      "     name: frontend-ingress",
      "     namespace: secure-net",
      "   spec:",
      "     podSelector:",
      "       matchLabels:",
      "         tier: frontend",
      "     policyTypes:",
      "     - Ingress",
      "     ingress:",
      "     - from:",
      "       - podSelector:",
      "           matchLabels:",
      "             tier: loadbalancer",
      "   EOF",
      "   kubectl apply -f - <<EOF",
      "   apiVersion: networking.k8s.io/v1",
      "   kind: NetworkPolicy",
      "   metadata:",
      "     name: api-ingress",
      "     namespace: secure-net",
      "   spec:",
      "     podSelector:",
      "       matchLabels:",
      "         tier: api",
      "     policyTypes:",
      "     - Ingress",
      "     ingress:",
      "     - from:",
      "       - podSelector:",
      "           matchLabels:",
      "             tier: frontend",
      "   EOF",
      "   kubectl apply -f - <<EOF",
      "   apiVersion: networking.k8s.io/v1",
      "   kind: NetworkPolicy",
      "   metadata:",
      "     name: database-ingress",
      "     namespace: secure-net",
      "   spec:",
      "     podSelector:",
      "       matchLabels:",
      "         tier: database",
      "     policyTypes:",
      "     - Ingress",
      "     ingress:",
      "     - from:",
      "       - podSelector:",
      "           matchLabels:",
      "             tier: api",
      "       ports:",
      "       - protocol: TCP",
      "         port: 5432",
      "   EOF",
      "4. Create egress policies and DNS access:",
      "   kubectl apply -f - <<EOF",
      "   apiVersion: networking.k8s.io/v1",
      "   kind: NetworkPolicy",
      "   metadata:",
      "     name: frontend-egress",
      "     namespace: secure-net",
      "   spec:",
      "     podSelector:",
      "       matchLabels:",
      "         tier: frontend",
      "     policyTypes:",
      "     - Egress",
      "     egress:",
      "     - to:",
      "       - podSelector:",
      "           matchLabels:",
      "             tier: api",
      "     - to: []",
      "       ports:",
      "       - protocol: UDP",
      "         port: 53",
      "   EOF",
      "5. Create cross-namespace monitoring policy:",
      "   kubectl apply -f - <<EOF",
      "   apiVersion: networking.k8s.io/v1",
      "   kind: NetworkPolicy",
      "   metadata:",
      "     name: monitoring-access",
      "     namespace: secure-net",
      "   spec:",
      "     podSelector: {}",
      "     policyTypes:",
      "     - Ingress",
      "     ingress:",
      "     - from:",
      "       - namespaceSelector:",
      "           matchLabels:",
      "             name: monitoring",
      "       ports:",
      "       - protocol: TCP",
      "         port: 9090",
      "   EOF",
      "6. Create testing and validation job:",
      "   kubectl apply -f - <<EOF",
      "   apiVersion: batch/v1",
      "   kind: Job",
      "   metadata:",
      "     name: network-policy-tester",
      "     namespace: secure-net",
      "   spec:",
      "     template:",
      "       spec:",
      "         containers:",
      "         - name: tester",
      "           image: nicolaka/netshoot",
      "           command: [\"/bin/sh\"]",
      "           args: [\"-c\", \"echo 'Network policy test completed' && sleep 10\"]",
      "         restartPolicy: Never",
      "   EOF",
      "7. Verify policy deployment and pod status:",
      "   kubectl get networkpolicy -n secure-net",
      "   kubectl get pods -n secure-net --show-labels",
      "   kubectl describe networkpolicy default-deny -n secure-net"
    ]
  },
  "validations": [
    {
      "command": "kubectl get networkpolicy default-deny -n secure-net -o jsonpath='{.spec.policyTypes[0]}'",
      "expected": "Ingress",
      "points": 1,
      "description": "Should have default deny-all policy"
    },
    {
      "command": "kubectl get networkpolicy frontend-ingress -n secure-net -o jsonpath='{.spec.ingress[0].from[0].podSelector.matchLabels.tier}'",
      "expected": "loadbalancer",
      "points": 1,
      "description": "Frontend should allow ingress from load balancer"
    },
    {
      "command": "kubectl get networkpolicy api-ingress -n secure-net -o jsonpath='{.spec.ingress[0].from[0].podSelector.matchLabels.tier}'",
      "expected": "frontend",
      "points": 1,
      "description": "API should allow ingress from frontend tier only"
    },
    {
      "command": "kubectl get networkpolicy database-ingress -n secure-net -o jsonpath='{.spec.ingress[0].ports[0].port}'",
      "expected": "5432",
      "points": 1,
      "description": "Database should allow ingress on port 5432"
    },
    {
      "command": "kubectl get deployment frontend -n secure-net -o jsonpath='{.metadata.labels.tier}'",
      "expected": "frontend",
      "points": 1,
      "description": "Frontend deployment should have tier=frontend label"
    },
    {
      "command": "kubectl get job network-policy-tester -n secure-net -o jsonpath='{.status.succeeded}'",
      "expected": "1",
      "points": 1,
      "description": "Network policy testing should complete successfully"
    }
  ]
}