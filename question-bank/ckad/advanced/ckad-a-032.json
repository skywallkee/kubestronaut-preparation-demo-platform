{
  "id": "ckad-a-032",
  "title": "Advanced Persistent Volume Management with Dynamic Provisioning",
  "description": "Implement a comprehensive persistent storage architecture in namespace ||storage-advanced|| with multiple storage classes, dynamic provisioning, and complex volume management:\n\n1. **Multiple Storage Classes Configuration**:\n   Create diverse storage classes for different workload requirements:\n   - **SSD Storage**: High-performance SSD storage class\n   - **HDD Storage**: Cost-effective HDD storage class\n   - **NFS Storage**: Network-attached storage class\n   - **Local Storage**: Node-local storage class\n   - **Backup Storage**: Replicated backup storage class\n\n2. **Database Cluster with StatefulSet**:\n   Deploy PostgreSQL cluster with persistent storage:\n   - **Primary Database**: PostgreSQL primary with 100Gi SSD storage\n   - **Read Replicas**: 2 read replicas with 50Gi HDD storage each\n   - **WAL Storage**: Separate 20Gi SSD volume for transaction logs\n   - **Backup Storage**: 200Gi NFS volume for database backups\n\n3. **File Storage for Applications**:\n   Configure shared file storage:\n   - **Media Storage**: 500Gi NFS volume for user uploads\n   - **Cache Storage**: 50Gi local SSD for application cache\n   - **Log Storage**: 100Gi HDD for centralized logging\n   - **Config Storage**: 10Gi for shared configuration files\n\n4. **Volume Snapshot and Backup**:\n   Implement volume snapshot capabilities:\n   - **Snapshot Classes**: Configure snapshot classes for each storage type\n   - **Scheduled Snapshots**: CronJob for automatic daily snapshots\n   - **Point-in-Time Recovery**: Restore from specific snapshots\n   - **Cross-Cluster Backup**: Replicate snapshots to backup cluster\n\n5. **Storage Monitoring and Alerting**:\n   Configure comprehensive storage monitoring:\n   - **Capacity Monitoring**: Track storage usage across all volumes\n   - **Performance Metrics**: IOPS, latency, and throughput monitoring\n   - **Health Checks**: Storage system health validation\n   - **Alerting Rules**: Notifications for storage issues\n\n6. **Volume Expansion and Migration**:\n   Implement volume lifecycle management:\n   - **Dynamic Expansion**: Expand volumes without downtime\n   - **Storage Migration**: Move data between storage classes\n   - **Cleanup Automation**: Remove unused volumes\n   - **Reclaim Policies**: Configure retention and deletion policies\n\n7. **Advanced Volume Features**:\n   Configure sophisticated volume capabilities:\n   - **ReadWriteMany**: Shared volumes across multiple pods\n   - **Block Volumes**: Raw block device access\n   - **Ephemeral Volumes**: CSI ephemeral volumes\n   - **Volume Cloning**: Create volume copies\n   - **Topology Awareness**: Zone-aware volume placement\n\n8. **Security and Access Control**:\n   Implement storage security:\n   - **Encryption at Rest**: Encrypted storage volumes\n   - **Access Modes**: Proper access mode configuration\n   - **RBAC for Storage**: Storage resource access control\n   - **Pod Security**: Secure volume mounting\n\nEnsure robust, scalable, and secure persistent storage with comprehensive management.",
  "points": 13,
  "timeLimit": 28,
  "category": "State Persistence",
  "tags": [
    "persistent-volumes",
    "storage-classes",
    "dynamic-provisioning",
    "statefulsets",
    "volume-snapshots",
    "advanced"
  ],
  "infrastructure": {
    "namespaces": [
      "storage-advanced"
    ],
    "resources": [
      "persistentvolumes",
      "persistentvolumeclaims",
      "storageclasses",
      "statefulsets",
      "volumesnapshots",
      "cronjobs",
      "jobs"
    ],
    "prerequisites": [
      "csi-driver",
      "snapshot-controller"
    ]
  },
  "solution": {
    "steps": [
      "1. Create namespace and multiple storage classes:",
      "   kubectl create namespace storage-advanced",
      "   kubectl apply -f - <<EOF",
      "   apiVersion: storage.k8s.io/v1",
      "   kind: StorageClass",
      "   metadata:",
      "     name: ssd-storage",
      "   provisioner: kubernetes.io/aws-ebs",
      "   parameters:",
      "     type: gp3",
      "     iops: \"3000\"",
      "   allowVolumeExpansion: true",
      "   reclaimPolicy: Delete",
      "   EOF",
      "   kubectl apply -f - <<EOF",
      "   apiVersion: storage.k8s.io/v1",
      "   kind: StorageClass",
      "   metadata:",
      "     name: hdd-storage",
      "   provisioner: kubernetes.io/aws-ebs",
      "   parameters:",
      "     type: sc1",
      "   allowVolumeExpansion: true",
      "   reclaimPolicy: Retain",
      "   EOF",
      "2. Deploy PostgreSQL StatefulSet with persistent storage:",
      "   kubectl apply -f - <<EOF",
      "   apiVersion: apps/v1",
      "   kind: StatefulSet",
      "   metadata:",
      "     name: postgres-primary",
      "     namespace: storage-advanced",
      "   spec:",
      "     serviceName: postgres-primary",
      "     replicas: 1",
      "     selector:",
      "       matchLabels:",
      "         app: postgres-primary",
      "     template:",
      "       metadata:",
      "         labels:",
      "           app: postgres-primary",
      "       spec:",
      "         containers:",
      "         - name: postgres",
      "           image: postgres:13",
      "           env:",
      "           - name: POSTGRES_PASSWORD",
      "             value: \"password\"",
      "           volumeMounts:",
      "           - name: postgres-data",
      "             mountPath: /var/lib/postgresql/data",
      "           - name: postgres-wal",
      "             mountPath: /var/lib/postgresql/wal",
      "     volumeClaimTemplates:",
      "     - metadata:",
      "         name: postgres-data",
      "       spec:",
      "         accessModes: [\"ReadWriteOnce\"]",
      "         storageClassName: ssd-storage",
      "         resources:",
      "           requests:",
      "             storage: 100Gi",
      "     - metadata:",
      "         name: postgres-wal",
      "       spec:",
      "         accessModes: [\"ReadWriteOnce\"]",
      "         storageClassName: ssd-storage",
      "         resources:",
      "           requests:",
      "             storage: 20Gi",
      "   EOF",
      "   kubectl expose statefulset postgres-primary --port=5432 -n storage-advanced",
      "3. Create shared file storage PVCs:",
      "   kubectl apply -f - <<EOF",
      "   apiVersion: v1",
      "   kind: PersistentVolumeClaim",
      "   metadata:",
      "     name: media-storage",
      "     namespace: storage-advanced",
      "   spec:",
      "     accessModes:",
      "     - ReadWriteMany",
      "     resources:",
      "       requests:",
      "         storage: 500Gi",
      "     storageClassName: hdd-storage",
      "   EOF",
      "   kubectl apply -f - <<EOF",
      "   apiVersion: v1",
      "   kind: PersistentVolumeClaim",
      "   metadata:",
      "     name: cache-storage",
      "     namespace: storage-advanced",
      "   spec:",
      "     accessModes:",
      "     - ReadWriteOnce",
      "     resources:",
      "       requests:",
      "         storage: 50Gi",
      "     storageClassName: ssd-storage",
      "   EOF",
      "4. Set up volume snapshot class and scheduled snapshots:",
      "   kubectl apply -f - <<EOF",
      "   apiVersion: snapshot.storage.k8s.io/v1",
      "   kind: VolumeSnapshotClass",
      "   metadata:",
      "     name: daily-snapshots",
      "   driver: ebs.csi.aws.com",
      "   deletionPolicy: Delete",
      "   EOF",
      "   kubectl apply -f - <<EOF",
      "   apiVersion: batch/v1",
      "   kind: CronJob",
      "   metadata:",
      "     name: volume-snapshot-job",
      "     namespace: storage-advanced",
      "   spec:",
      "     schedule: \"0 2 * * *\"",
      "     jobTemplate:",
      "       spec:",
      "         template:",
      "           spec:",
      "             containers:",
      "             - name: snapshot-creator",
      "               image: bitnami/kubectl",
      "               command:",
      "               - /bin/sh",
      "               args:",
      "               - -c",
      "               - |",
      "                 kubectl apply -f - <<SNAPSHOT",
      "                 apiVersion: snapshot.storage.k8s.io/v1",
      "                 kind: VolumeSnapshot",
      "                 metadata:",
      "                   name: postgres-backup-$(date +%Y%m%d)",
      "                   namespace: storage-advanced",
      "                 spec:",
      "                   volumeSnapshotClassName: daily-snapshots",
      "                   source:",
      "                     persistentVolumeClaimName: postgres-data-postgres-primary-0",
      "                 SNAPSHOT",
      "             restartPolicy: OnFailure",
      "   EOF",
      "5. Create storage monitoring job:",
      "   kubectl apply -f - <<EOF",
      "   apiVersion: batch/v1",
      "   kind: Job",
      "   metadata:",
      "     name: storage-tester",
      "     namespace: storage-advanced",
      "   spec:",
      "     template:",
      "       spec:",
      "         containers:",
      "         - name: tester",
      "           image: busybox",
      "           command: [\"/bin/sh\"]",
      "           args: [\"-c\", \"df -h && echo 'Storage validation completed'\"]",
      "           volumeMounts:",
      "           - name: test-volume",
      "             mountPath: /test",
      "         volumes:",
      "         - name: test-volume",
      "           persistentVolumeClaim:",
      "             claimName: cache-storage",
      "         restartPolicy: Never",
      "   EOF",
      "6. Verify storage configuration:",
      "   kubectl get storageclass",
      "   kubectl get pvc -n storage-advanced",
      "   kubectl get volumesnapshotclass",
      "   kubectl describe statefulset postgres-primary -n storage-advanced"
    ]
  },
  "validations": [
    {
      "command": "kubectl get storageclass ssd-storage -o jsonpath='{.provisioner}'",
      "expected": "kubernetes.io/aws-ebs",
      "points": 1,
      "description": "SSD storage class should be configured"
    },
    {
      "command": "kubectl get statefulset postgres-primary -n storage-advanced -o jsonpath='{.spec.volumeClaimTemplates[0].spec.resources.requests.storage}'",
      "expected": "100Gi",
      "points": 1,
      "description": "Primary database should request 100Gi storage"
    },
    {
      "command": "kubectl get pvc media-storage -n storage-advanced -o jsonpath='{.spec.resources.requests.storage}'",
      "expected": "500Gi",
      "points": 1,
      "description": "Media storage should be 500Gi"
    },
    {
      "command": "kubectl get volumesnapshotclass daily-snapshots -o jsonpath='{.driver}'",
      "expected": "ebs.csi.aws.com",
      "points": 1,
      "description": "Should have volume snapshot class configured"
    },
    {
      "command": "kubectl get cronjob volume-snapshot-job -n storage-advanced -o jsonpath='{.spec.schedule}'",
      "expected": "0 2 * * *",
      "points": 1,
      "description": "Should have scheduled snapshot job"
    },
    {
      "command": "kubectl get job storage-tester -n storage-advanced -o jsonpath='{.status.succeeded}'",
      "expected": "1",
      "points": 1,
      "description": "Storage validation should complete successfully"
    }
  ]
}