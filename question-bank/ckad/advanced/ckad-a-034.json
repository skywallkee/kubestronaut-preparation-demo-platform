{
  "id": "ckad-a-034",
  "title": "Advanced Multi-Container Patterns with Service Mesh Integration",
  "description": "Implement sophisticated multi-container pod patterns in namespace ||microservices|| with service mesh integration and advanced inter-container communication:\n\n1. **Complex Sidecar Pattern Implementation**:\n   Deploy ||webapp-with-sidecars|| pod containing:\n   - **Main Application**: Node.js web app (node:16-alpine)\n   - **Logging Sidecar**: Fluent Bit for log aggregation\n   - **Metrics Sidecar**: Prometheus Node Exporter for metrics\n   - **Security Sidecar**: Envoy proxy for mTLS and security\n   - **Storage Sidecar**: MinIO client for object storage operations\n\n2. **Ambassador Pattern with API Gateway**:\n   Create ||api-gateway-pod|| implementing ambassador pattern:\n   - **Main Service**: Backend API (python:3.9-slim)\n   - **Ambassador Container**: Envoy proxy for external communication\n   - **Rate Limiter**: Redis-based rate limiting sidecar\n   - **Auth Proxy**: OAuth2 authentication proxy\n   - **Circuit Breaker**: Hystrix-style circuit breaker implementation\n\n3. **Adapter Pattern for Legacy Integration**:\n   Deploy ||legacy-adapter-pod|| with adapter containers:\n   - **Legacy Application**: Legacy system (centos:7)\n   - **Protocol Adapter**: Convert legacy protocols to modern APIs\n   - **Data Transformer**: Transform data formats between systems\n   - **Monitoring Adapter**: Expose legacy metrics in Prometheus format\n   - **Health Check Adapter**: Convert legacy health checks to K8s probes\n\n4. **Advanced Init Container Sequence**:\n   Configure complex initialization with ||complex-init-pod||:\n   - **Database Migration**: Run schema migrations (golang:1.19)\n   - **Certificate Fetcher**: Retrieve TLS certificates from vault\n   - **Configuration Builder**: Generate config from templates\n   - **Dependency Checker**: Wait for external services\n   - **Cache Warmer**: Preload application cache\n\n5. **Shared Volume Communication**:\n   Implement inter-container communication via shared volumes:\n   - **Unix Domain Sockets**: Fast inter-process communication\n   - **Shared File System**: File-based data exchange\n   - **Named Pipes**: Streaming data between containers\n   - **Memory-Mapped Files**: High-performance data sharing\n   - **Configuration Sharing**: Dynamic configuration updates\n\n6. **Network Communication Patterns**:\n   Configure container-to-container networking:\n   - **Localhost Communication**: Containers sharing network namespace\n   - **gRPC Streaming**: High-performance streaming between containers\n   - **Message Queues**: Redis/RabbitMQ for async communication\n   - **WebSocket Connections**: Real-time communication channels\n   - **Health Check Endpoints**: Cross-container health monitoring\n\n7. **Resource Management and Isolation**:\n   Configure proper resource allocation:\n   - **CPU Limits**: Different CPU allocations per container\n   - **Memory Limits**: Container-specific memory constraints\n   - **Storage Quotas**: Per-container storage limits\n   - **Network Bandwidth**: QoS and bandwidth limiting\n   - **Security Contexts**: Container-specific security policies\n\n8. **Monitoring and Observability**:\n   Implement comprehensive multi-container monitoring:\n   - **Container Metrics**: Per-container resource usage\n   - **Inter-Container Tracing**: Distributed tracing across containers\n   - **Log Aggregation**: Centralized logging from all containers\n   - **Health Dashboards**: Multi-container health visualization\n   - **Alert Correlation**: Cross-container alert correlation\n\nEnsure sophisticated multi-container architectures with proper communication and resource management.",
  "points": 12,
  "timeLimit": 25,
  "category": "Multi-Container Pods",
  "tags": [
    "sidecar-pattern",
    "ambassador-pattern",
    "adapter-pattern",
    "init-containers",
    "inter-container-communication",
    "advanced"
  ],
  "infrastructure": {
    "namespaces": [
      "microservices"
    ],
    "resources": [
      "pods",
      "deployments",
      "services",
      "configmaps",
      "secrets",
      "persistentvolumeclaims"
    ],
    "prerequisites": [
      "service-mesh",
      "monitoring-stack"
    ]
  },
  "solution": {
    "steps": [
      "1. Create namespace and sidecar pattern pod:",
      "   kubectl create namespace microservices",
      "   kubectl apply -f - <<EOF",
      "   apiVersion: v1",
      "   kind: Pod",
      "   metadata:",
      "     name: webapp-with-sidecars",
      "     namespace: microservices",
      "   spec:",
      "     containers:",
      "     - name: webapp",
      "       image: node:16-alpine",
      "       ports:",
      "       - containerPort: 3000",
      "       volumeMounts:",
      "       - name: shared-logs",
      "         mountPath: /var/log",
      "     - name: logging-sidecar",
      "       image: fluent/fluent-bit:2.0",
      "       volumeMounts:",
      "       - name: shared-logs",
      "         mountPath: /var/log",
      "     - name: metrics-sidecar",
      "       image: prom/node-exporter:v1.3.1",
      "       ports:",
      "       - containerPort: 9100",
      "     - name: security-sidecar",
      "       image: envoyproxy/envoy:v1.22.0",
      "       ports:",
      "       - containerPort: 8443",
      "     - name: storage-sidecar",
      "       image: minio/mc:latest",
      "       command: [\"/bin/sh\"]",
      "       args: [\"-c\", \"sleep 3600\"]",
      "     volumes:",
      "     - name: shared-logs",
      "       emptyDir: {}",
      "   EOF",
      "2. Deploy ambassador pattern pod:",
      "   kubectl apply -f - <<EOF",
      "   apiVersion: v1",
      "   kind: Pod",
      "   metadata:",
      "     name: api-gateway-pod",
      "     namespace: microservices",
      "   spec:",
      "     containers:",
      "     - name: backend-api",
      "       image: python:3.9-slim",
      "       ports:",
      "       - containerPort: 8000",
      "       command: [\"/bin/sh\"]",
      "       args: [\"-c\", \"python -m http.server 8000\"]",
      "     - name: ambassador",
      "       image: envoyproxy/envoy:v1.22.0",
      "       ports:",
      "       - containerPort: 80",
      "       - containerPort: 443",
      "     - name: rate-limiter",
      "       image: redis:7-alpine",
      "       ports:",
      "       - containerPort: 6379",
      "     - name: auth-proxy",
      "       image: oauth2-proxy/oauth2-proxy:latest",
      "       ports:",
      "       - containerPort: 4180",
      "     - name: circuit-breaker",
      "       image: nginx:alpine",
      "       ports:",
      "       - containerPort: 8080",
      "   EOF",
      "3. Configure adapter pattern for legacy integration:",
      "   kubectl apply -f - <<EOF",
      "   apiVersion: v1",
      "   kind: Pod",
      "   metadata:",
      "     name: legacy-adapter-pod",
      "     namespace: microservices",
      "   spec:",
      "     containers:",
      "     - name: legacy-app",
      "       image: centos:7",
      "       command: [\"/bin/bash\"]",
      "       args: [\"-c\", \"while true; do sleep 30; done\"]",
      "     - name: protocol-adapter",
      "       image: nginx:alpine",
      "       ports:",
      "       - containerPort: 8081",
      "     - name: data-transformer",
      "       image: python:3.9-slim",
      "       command: [\"/bin/sh\"]",
      "       args: [\"-c\", \"sleep 3600\"]",
      "     - name: monitoring-adapter",
      "       image: prom/node-exporter:v1.3.1",
      "       ports:",
      "       - containerPort: 9101",
      "     - name: health-adapter",
      "       image: busybox",
      "       command: [\"/bin/sh\"]",
      "       args: [\"-c\", \"while true; do sleep 10; done\"]",
      "   EOF",
      "4. Set up complex init container sequence:",
      "   kubectl apply -f - <<EOF",
      "   apiVersion: v1",
      "   kind: Pod",
      "   metadata:",
      "     name: complex-init-pod",
      "     namespace: microservices",
      "   spec:",
      "     initContainers:",
      "     - name: db-migration",
      "       image: golang:1.19",
      "       command: [\"/bin/sh\"]",
      "       args: [\"-c\", \"echo 'Running DB migration' && sleep 5\"]",
      "     - name: cert-fetcher",
      "       image: vault:latest",
      "       command: [\"/bin/sh\"]",
      "       args: [\"-c\", \"echo 'Fetching certificates' && sleep 3\"]",
      "     - name: config-builder",
      "       image: alpine:latest",
      "       command: [\"/bin/sh\"]",
      "       args: [\"-c\", \"echo 'Building configuration' && sleep 2\"]",
      "     - name: dependency-checker",
      "       image: busybox",
      "       command: [\"/bin/sh\"]",
      "       args: [\"-c\", \"echo 'Checking dependencies' && sleep 3\"]",
      "     - name: cache-warmer",
      "       image: redis:7-alpine",
      "       command: [\"/bin/sh\"]",
      "       args: [\"-c\", \"echo 'Warming cache' && sleep 4\"]",
      "     containers:",
      "     - name: main-app",
      "       image: nginx:alpine",
      "       ports:",
      "       - containerPort: 80",
      "   EOF",
      "5. Create shared volume communication setup:",
      "   kubectl apply -f - <<EOF",
      "   apiVersion: v1",
      "   kind: ConfigMap",
      "   metadata:",
      "     name: shared-config",
      "     namespace: microservices",
      "   data:",
      "     app.conf: |",
      "       server {",
      "         listen 80;",
      "         location / {",
      "           proxy_pass http://localhost:8000;",
      "         }",
      "       }",
      "   EOF",
      "6. Verify multi-container pod deployments:",
      "   kubectl get pods -n microservices",
      "   kubectl describe pod webapp-with-sidecars -n microservices",
      "   kubectl describe pod api-gateway-pod -n microservices",
      "   kubectl describe pod legacy-adapter-pod -n microservices",
      "   kubectl describe pod complex-init-pod -n microservices"
    ]
  },
  "validations": [
    {
      "command": "kubectl get pod webapp-with-sidecars -n microservices -o jsonpath='{.spec.containers[*].name}' | wc -w",
      "expected": "5",
      "points": 1,
      "description": "Webapp pod should have 5 containers"
    },
    {
      "command": "kubectl get pod api-gateway-pod -n microservices -o jsonpath='{.spec.containers[?(@.name==\"ambassador\")].image}'",
      "expected": "envoyproxy/envoy:v1.22.0",
      "points": 1,
      "description": "API gateway should have Envoy ambassador container"
    },
    {
      "command": "kubectl get pod legacy-adapter-pod -n microservices -o jsonpath='{.spec.containers[?(@.name==\"protocol-adapter\")].name}'",
      "expected": "protocol-adapter",
      "points": 1,
      "description": "Legacy pod should have protocol adapter container"
    },
    {
      "command": "kubectl get pod complex-init-pod -n microservices -o jsonpath='{.spec.initContainers[*].name}' | wc -w",
      "expected": "5",
      "points": 1,
      "description": "Complex init pod should have 5 init containers"
    },
    {
      "command": "kubectl get pods -n microservices --field-selector=status.phase=Running --no-headers | wc -l",
      "expected": "4",
      "points": 1,
      "description": "All multi-container pods should be running"
    }
  ]
}