{
  "id": "ckad-a-055",
  "title": "Advanced Health Check Strategies",
  "description": "Implement a comprehensive health monitoring system using sophisticated ||health check|| strategies. Create an application with multiple ||health endpoints|| including startup, liveness, and readiness probes with different check types: ||HTTP||, ||TCP||, ||exec commands||, and ||gRPC||. Design health checks that detect different failure modes: application deadlocks, database connectivity issues, external service dependencies, and resource exhaustion. Include custom health check logic, probe tuning for different failure scenarios, and demonstrate how Kubernetes responds to various health check failures.",
  "points": 14,
  "timeLimit": 28,
  "category": "Observability",
  "tags": ["health-checks", "probes", "liveness", "readiness", "startup", "monitoring", "advanced"],
  "infrastructure": {
    "namespaces": ["health-demo"],
    "resources": ["Pod", "Deployment", "Service"],
    "prerequisites": ["Application with multiple health endpoints"]
  },
  "solution": {
    "steps": [
      "1. Create namespace and health check deployment:",
      "   kubectl create namespace health-demo",
      "2. Create deployment with comprehensive health monitoring:",
      "   kubectl apply -f - <<EOF",
      "   apiVersion: apps/v1",
      "   kind: Deployment",
      "   metadata:",
      "     name: health-app",
      "     namespace: health-demo",
      "   spec:",
      "     replicas: 3",
      "     selector:",
      "       matchLabels:",
      "         app: health-app",
      "     template:",
      "       metadata:",
      "         labels:",
      "           app: health-app",
      "       spec:",
      "         containers:",
      "         - name: app",
      "           image: busybox:latest",
      "           ports:",
      "           - containerPort: 8080",
      "           command: ['/bin/sh', '-c']",
      "           args:",
      "           - |",
      "             # Create health check endpoints",
      "             mkdir -p /app/health",
      "             echo \"initializing\" > /app/health/status",
      "             # Simulate startup time",
      "             sleep 15",
      "             echo \"ready\" > /app/health/status",
      "             # Start HTTP server for health checks",
      "             while true; do",
      "               PORT=8080",
      "               echo -e 'HTTP/1.1 200 OK\\nContent-Type: application/json\\n\\n{\"status\":\"ready\",\"dependencies\":[\"database\",\"cache\"],\"uptime\":300}' | nc -l -p $PORT &",
      "               sleep 1",
      "             done",
      "           startupProbe:",
      "             httpGet:",
      "               path: /health/startup",
      "               port: 8080",
      "             initialDelaySeconds: 10",
      "             periodSeconds: 5",
      "             failureThreshold: 30",
      "           livenessProbe:",
      "             exec:",
      "               command:",
      "               - /bin/sh",
      "               - -c",
      "               - |",
      "                 # Check for deadlock or hanging processes",
      "                 if [ -f /app/health/status ]; then",
      "                   status=$(cat /app/health/status)",
      "                   if [ \"$status\" = \"ready\" ]; then",
      "                     exit 0",
      "                   fi",
      "                 fi",
      "                 exit 1",
      "             initialDelaySeconds: 30",
      "             periodSeconds: 10",
      "             failureThreshold: 3",
      "           readinessProbe:",
      "             httpGet:",
      "               path: /health/readiness",
      "               port: 8080",
      "             initialDelaySeconds: 5",
      "             periodSeconds: 5",
      "             failureThreshold: 3",
      "   EOF",
      "3. Create service to expose health endpoints:",
      "   kubectl expose deployment health-app -n health-demo --port=8080 --target-port=8080",
      "4. Verify health check configuration and functionality:",
      "   kubectl get deployment health-app -n health-demo -o jsonpath='{.spec.template.spec.containers[0].startupProbe}'",
      "   kubectl get pods -n health-demo -l app=health-app --field-selector=status.phase=Running",
      "   kubectl exec -n health-demo deploy/health-app -- wget -qO- http://localhost:8080/health/readiness",
      "   kubectl describe pod -n health-demo -l app=health-app | grep -A5 \"Liveness\""
    ]
  },
  "validations": [
    {
      "command": "kubectl get deployment health-app -n health-demo -o jsonpath='{.spec.template.spec.containers[0].startupProbe.httpGet.path}'",
      "expected": "/health/startup",
      "points": 2,
      "description": "Deployment has startup probe configured"
    },
    {
      "command": "kubectl get deployment health-app -n health-demo -o jsonpath='{.spec.template.spec.containers[0].livenessProbe.exec.command[0]}'",
      "expected": "/bin/sh",
      "points": 3,
      "description": "Liveness probe uses exec command"
    },
    {
      "command": "kubectl get deployment health-app -n health-demo -o jsonpath='{.spec.template.spec.containers[0].readinessProbe.httpGet.port}'",
      "expected": "8080",
      "points": 2,
      "description": "Readiness probe checks HTTP port 8080"
    },
    {
      "command": "kubectl get pod -n health-demo -l app=health-app --field-selector=status.phase=Running | wc -l",
      "expected": "4",
      "points": 3,
      "description": "At least 3 healthy pods are running"
    },
    {
      "command": "kubectl exec -n health-demo deploy/health-app -- curl -s localhost:8080/health/readiness | jq .status",
      "expected": "ready",
      "points": 2,
      "description": "Readiness endpoint returns healthy status"
    },
    {
      "command": "kubectl exec -n health-demo deploy/health-app -- curl -s localhost:8080/health/liveness | jq .dependencies",
      "expected": "database",
      "points": 2,
      "description": "Liveness endpoint checks external dependencies"
    }
  ]
}