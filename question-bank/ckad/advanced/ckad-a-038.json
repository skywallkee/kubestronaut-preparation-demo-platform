{
  "id": "ckad-a-038",
  "title": "Advanced Pod Security Context and Capabilities",
  "description": "Create a secure containerized application that demonstrates advanced ||security context|| configurations. The pod should run with a ||non-root user||, have specific Linux ||capabilities|| added and dropped, use a custom ||seccomp profile||, and implement ||AppArmor|| annotations. Additionally, configure ||file system|| permissions and demonstrate how security contexts affect container behavior. This scenario tests deep understanding of Kubernetes security primitives.",
  "points": 14,
  "timeLimit": 30,
  "category": "Core Concepts",
  "tags": ["security-context", "capabilities", "seccomp", "apparmor", "non-root", "advanced"],
  "infrastructure": {
    "namespaces": ["secure-apps"],
    "resources": ["Pod", "SecurityContext"],
    "prerequisites": ["Cluster with security features enabled"]
  },
  "solution": {
    "steps": [
      "1. Create secure-apps namespace:",
      "   kubectl create namespace secure-apps",
      "2. Create pod with advanced security context:",
      "   kubectl apply -f - <<EOF",
      "   apiVersion: v1",
      "   kind: Pod",
      "   metadata:",
      "     name: secure-app",
      "     namespace: secure-apps",
      "     annotations:",
      "       seccomp.security.alpha.kubernetes.io/pod: runtime/default",
      "       container.apparmor.security.beta.kubernetes.io/secure-container: runtime/default",
      "   spec:",
      "     securityContext:",
      "       runAsUser: 1000",
      "       runAsGroup: 1000",
      "       runAsNonRoot: true",
      "       fsGroup: 1000",
      "     containers:",
      "     - name: secure-container",
      "       image: nginx:alpine",
      "       ports:",
      "       - containerPort: 8080",
      "       securityContext:",
      "         allowPrivilegeEscalation: false",
      "         readOnlyRootFilesystem: true",
      "         capabilities:",
      "           drop:",
      "           - ALL",
      "           add:",
      "           - NET_BIND_SERVICE",
      "       volumeMounts:",
      "       - name: tmp-volume",
      "         mountPath: /tmp",
      "       - name: var-cache-nginx",
      "         mountPath: /var/cache/nginx",
      "       - name: var-run",
      "         mountPath: /var/run",
      "     volumes:",
      "     - name: tmp-volume",
      "       emptyDir: {}",
      "     - name: var-cache-nginx",
      "       emptyDir: {}",
      "     - name: var-run",
      "       emptyDir: {}",
      "   EOF",
      "3. Create another pod with different security settings for comparison:",
      "   kubectl apply -f - <<EOF",
      "   apiVersion: v1",
      "   kind: Pod",
      "   metadata:",
      "     name: privileged-test",
      "     namespace: secure-apps",
      "   spec:",
      "     securityContext:",
      "       runAsUser: 0",
      "       runAsNonRoot: false",
      "     containers:",
      "     - name: privileged-container",
      "       image: busybox",
      "       command: ['/bin/sh']",
      "       args: ['-c', 'sleep 3600']",
      "       securityContext:",
      "         privileged: true",
      "   EOF",
      "4. Verify security context implementation:",
      "   kubectl get pods -n secure-apps",
      "   kubectl describe pod secure-app -n secure-apps",
      "   kubectl exec secure-app -n secure-apps -- id",
      "   kubectl exec secure-app -n secure-apps -- cat /proc/1/status | grep -E 'Uid|Gid|CapEff'",
      "5. Test filesystem restrictions:",
      "   kubectl exec secure-app -n secure-apps -- touch /test-file 2>&1 || echo 'Read-only filesystem working'",
      "   kubectl exec secure-app -n secure-apps -- touch /tmp/test-file && echo 'Writable tmp directory working'"
    ]
  },
  "validations": [
    {
      "command": "kubectl get pod secure-app -n secure-apps -o jsonpath='{.spec.securityContext.runAsUser}'",
      "expected": "1000",
      "points": 2,
      "description": "Pod runs as non-root user 1000"
    },
    {
      "command": "kubectl get pod secure-app -n secure-apps -o jsonpath='{.spec.containers[0].securityContext.readOnlyRootFilesystem}'",
      "expected": "true",
      "points": 3,
      "description": "Container has read-only root filesystem"
    },
    {
      "command": "kubectl get pod secure-app -n secure-apps -o jsonpath='{.spec.containers[0].securityContext.capabilities.drop[0]}'",
      "expected": "ALL",
      "points": 3,
      "description": "All capabilities are dropped"
    },
    {
      "command": "kubectl get pod secure-app -n secure-apps -o jsonpath='{.spec.containers[0].securityContext.capabilities.add[0]}'",
      "expected": "NET_BIND_SERVICE",
      "points": 3,
      "description": "NET_BIND_SERVICE capability is added"
    },
    {
      "command": "kubectl get pod secure-app -n secure-apps --field-selector=status.phase=Running | wc -l",
      "expected": "2",
      "points": 3,
      "description": "Secure pod is running successfully"
    }
  ]
}