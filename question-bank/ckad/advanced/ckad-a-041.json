{
  "id": "ckad-a-041",
  "title": "Pod Priority Classes and Preemption",
  "description": "Implement a sophisticated ||priority-based|| scheduling system using ||PriorityClass|| resources. Create multiple priority classes for different application tiers (critical, high, normal, low) and demonstrate how ||pod preemption|| works when cluster resources are constrained. Create pods with different priorities and show how higher priority pods can preempt lower priority ones when resources are scarce. This scenario tests understanding of Kubernetes scheduling priorities and resource contention resolution.",
  "points": 12,
  "timeLimit": 25,
  "category": "Core Concepts",
  "tags": ["priority-class", "preemption", "scheduling", "resource-contention", "advanced"],
  "infrastructure": {
    "namespaces": ["priority-demo"],
    "resources": ["PriorityClass", "Pod", "Deployment"],
    "prerequisites": ["Cluster with limited resources for testing preemption"]
  },
  "solution": {
    "steps": [
      "1. Create PriorityClass resources:",
      "   kubectl apply -f - <<EOF",
      "   apiVersion: scheduling.k8s.io/v1",
      "   kind: PriorityClass",
      "   metadata:",
      "     name: critical-priority",
      "   value: 1000",
      "   globalDefault: false",
      "   description: 'Critical priority for system pods'",
      "   EOF",
      "   kubectl apply -f - <<EOF",
      "   apiVersion: scheduling.k8s.io/v1",
      "   kind: PriorityClass",
      "   metadata:",
      "     name: high-priority",
      "   value: 500",
      "   globalDefault: false",
      "   description: 'High priority for important workloads'",
      "   EOF",
      "2. Create namespace and low priority pods that consume resources:",
      "   kubectl create namespace priority-demo",
      "   kubectl apply -f - <<EOF",
      "   apiVersion: apps/v1",
      "   kind: Deployment",
      "   metadata:",
      "     name: low-priority-app",
      "     namespace: priority-demo",
      "   spec:",
      "     replicas: 5",
      "     selector:",
      "       matchLabels:",
      "         priority: low",
      "     template:",
      "       metadata:",
      "         labels:",
      "           priority: low",
      "       spec:",
      "         priorityClassName: low-priority",
      "         containers:",
      "         - name: app",
      "           image: nginx:1.21",
      "           resources:",
      "             requests:",
      "               memory: '1Gi'",
      "               cpu: '500m'",
      "   EOF",
      "3. Create high priority pods that trigger preemption:",
      "   kubectl apply -f - <<EOF",
      "   apiVersion: apps/v1",
      "   kind: Deployment",
      "   metadata:",
      "     name: critical-app",
      "     namespace: priority-demo",
      "   spec:",
      "     replicas: 2",
      "     selector:",
      "       matchLabels:",
      "         priority: critical",
      "     template:",
      "       metadata:",
      "         labels:",
      "           priority: critical",
      "       spec:",
      "         priorityClassName: critical-priority",
      "         containers:",
      "         - name: app",
      "           image: nginx:1.21",
      "           resources:",
      "             requests:",
      "               memory: '2Gi'",
      "               cpu: '1000m'",
      "   EOF",
      "4. Monitor preemption and verify scheduling:",
      "   kubectl get pods -n priority-demo -w",
      "   kubectl get events -n priority-demo --sort-by='.lastTimestamp'",
      "   kubectl describe pods -n priority-demo -l priority=critical"
    ]
  },
  "validations": [
    {
      "command": "kubectl get priorityclass critical-priority -o jsonpath='{.value}'",
      "expected": "1000",
      "points": 2,
      "description": "Critical priority class has value 1000"
    },
    {
      "command": "kubectl get priorityclass high-priority -o jsonpath='{.value}'",
      "expected": "500",
      "points": 2,
      "description": "High priority class has value 500"
    },
    {
      "command": "kubectl get pod -n priority-demo -l priority=critical --field-selector=status.phase=Running | wc -l",
      "expected": "2",
      "points": 3,
      "description": "Critical priority pods are running"
    },
    {
      "command": "kubectl get pod -n priority-demo -l priority=low --field-selector=status.phase=Pending | wc -l",
      "expected": "1",
      "points": 2,
      "description": "Some low priority pods are pending due to preemption"
    },
    {
      "command": "kubectl get events -n priority-demo | grep -i preempt",
      "expected": "preemption-events",
      "points": 3,
      "description": "Preemption events are recorded"
    }
  ]
}