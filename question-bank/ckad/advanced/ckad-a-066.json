{
  "id": "ckad-a-066",
  "title": "Vertical Pod Autoscaling (VPA) and Resource Optimization",
  "description": "Implement ||Vertical Pod Autoscaling|| (VPA) for automatic resource optimization and cost management. Create applications with different resource consumption patterns and configure VPA to automatically adjust ||CPU|| and ||memory|| requests and limits based on actual usage. Implement VPA policies with different update modes (Auto, Initial, Off), configure resource policies for individual containers, and demonstrate how VPA coordinates with HPA. Include scenarios with resource recommendation analysis, update strategies, and conflict resolution between VPA and manually set resources.",
  "points": 13,
  "timeLimit": 27,
  "category": "Pod Design",
  "tags": ["vpa", "vertical-autoscaling", "resource-optimization", "cost-management", "resource-policies", "advanced"],
  "infrastructure": {
    "namespaces": ["vpa-demo"],
    "resources": ["Deployment", "VerticalPodAutoscaler", "Service"],
    "prerequisites": ["VPA operator installed"]
  },
  "solution": {
    "steps": [
      "# Create vpa-demo namespace\nkubectl create namespace vpa-demo",

      "# Create deployment with suboptimal resource requests\nkubectl apply -f - <<EOF\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: optimized-app\n  namespace: vpa-demo\n  labels:\n    app: optimized-app\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: optimized-app\n  template:\n    metadata:\n      labels:\n        app: optimized-app\n    spec:\n      containers:\n      - name: app\n        image: python:3.9-slim\n        ports:\n        - containerPort: 8080\n        resources:\n          requests:\n            cpu: 10m    # Deliberately low\n            memory: 32Mi # Deliberately low\n          limits:\n            cpu: 1000m\n            memory: 1Gi\n        command:\n        - python3\n        - -c\n        - |\n          import http.server\n          import socketserver\n          import time\n          import random\n          \n          class ResourceHandler(http.server.BaseHTTPRequestHandler):\n              def do_GET(self):\n                  # Simulate variable CPU usage\n                  for _ in range(random.randint(10000, 100000)):\n                      pass\n                  \n                  self.send_response(200)\n                  self.send_header('Content-Type', 'text/plain')\n                  self.end_headers()\n                  self.wfile.write(b'Resource usage simulation')\n          \n          with socketserver.TCPServer((\"\", 8080), ResourceHandler) as httpd:\n              print(\"Server running with variable resource usage\")\n              httpd.serve_forever()\nEOF",

      "# Create VPA with Auto update mode\nkubectl apply -f - <<EOF\napiVersion: autoscaling.k8s.io/v1\nkind: VerticalPodAutoscaler\nmetadata:\n  name: resource-optimizer\n  namespace: vpa-demo\nspec:\n  targetRef:\n    apiVersion: apps/v1\n    kind: Deployment\n    name: optimized-app\n  updatePolicy:\n    updateMode: \"Auto\"\n  resourcePolicy:\n    containerPolicies:\n    - containerName: app\n      minAllowed:\n        cpu: 50m\n        memory: 64Mi\n      maxAllowed:\n        cpu: 500m\n        memory: 512Mi\n      controlledResources: [\"cpu\", \"memory\"]\nEOF",

      "# Create second deployment for recommendation-only VPA\nkubectl apply -f - <<EOF\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: recommendation-app\n  namespace: vpa-demo\n  labels:\n    app: recommendation-app\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      app: recommendation-app\n  template:\n    metadata:\n      labels:\n        app: recommendation-app\n    spec:\n      containers:\n      - name: app\n        image: nginx:1.20\n        ports:\n        - containerPort: 80\n        resources:\n          requests:\n            cpu: 100m\n            memory: 128Mi\n          limits:\n            cpu: 200m\n            memory: 256Mi\nEOF",

      "# Create VPA with Initial mode for recommendations only\nkubectl apply -f - <<EOF\napiVersion: autoscaling.k8s.io/v1\nkind: VerticalPodAutoscaler\nmetadata:\n  name: resource-recommender\n  namespace: vpa-demo\nspec:\n  targetRef:\n    apiVersion: apps/v1\n    kind: Deployment\n    name: recommendation-app\n  updatePolicy:\n    updateMode: \"Initial\"\n  resourcePolicy:\n    containerPolicies:\n    - containerName: app\n      minAllowed:\n        cpu: 10m\n        memory: 32Mi\n      maxAllowed:\n        cpu: 1000m\n        memory: 1Gi\nEOF",

      "# Create VPA with Off mode (recommendations only)\nkubectl apply -f - <<EOF\napiVersion: autoscaling.k8s.io/v1\nkind: VerticalPodAutoscaler\nmetadata:\n  name: resource-monitor\n  namespace: vpa-demo\nspec:\n  targetRef:\n    apiVersion: apps/v1\n    kind: Deployment\n    name: recommendation-app\n  updatePolicy:\n    updateMode: \"Off\"\nEOF",

      "# Wait for deployments to be ready\nkubectl wait --for=condition=available --timeout=300s deployment/optimized-app -n vpa-demo\nkubectl wait --for=condition=available --timeout=300s deployment/recommendation-app -n vpa-demo",

      "# Generate load to create resource usage patterns\necho \"Generating load to establish usage patterns...\"\nkubectl run load-generator --image=busybox --rm --restart=Never -n vpa-demo -- sh -c 'for i in $(seq 1 100); do wget -qO- http://optimized-app:8080/; sleep 2; done' &\nsleep 30",

      "# Monitor VPA recommendations\necho \"Monitoring VPA recommendations...\"\necho \"Auto VPA status:\"\nkubectl describe vpa resource-optimizer -n vpa-demo\necho\necho \"Initial VPA status:\"\nkubectl describe vpa resource-recommender -n vpa-demo\necho\necho \"Off VPA status:\"\nkubectl describe vpa resource-monitor -n vpa-demo",

      "# Check if Auto VPA has updated resources\necho \"Checking resource updates...\"\necho \"Current pod resources:\"\nkubectl get pods -n vpa-demo -l app=optimized-app -o yaml | grep -A 10 resources:\necho\necho \"VPA recommendations:\"\nkubectl get vpa -n vpa-demo -o yaml | grep -A 10 recommendation:"
    ]
  },
  "validations": [
    {
      "command": "kubectl get vpa resource-optimizer -n vpa-demo -o jsonpath='{.spec.updatePolicy.updateMode}'",
      "expected": "Auto",
      "points": 3,
      "description": "VPA configured with Auto update mode"
    },
    {
      "command": "kubectl get vpa resource-recommender -n vpa-demo -o jsonpath='{.spec.updatePolicy.updateMode}'",
      "expected": "Initial",
      "points": 2,
      "description": "Recommendation VPA configured with Initial mode"
    },
    {
      "command": "kubectl get vpa resource-optimizer -n vpa-demo -o jsonpath='{.status.recommendation.containerRecommendations[0].target.cpu}'",
      "expected": "resource-recommendation",
      "points": 3,
      "description": "VPA provides CPU recommendations"
    },
    {
      "command": "kubectl get deployment optimized-app -n vpa-demo -o jsonpath='{.spec.template.spec.containers[0].resources.requests.cpu}'",
      "expected": "updated-cpu",
      "points": 3,
      "description": "Deployment CPU requests updated by VPA"
    },
    {
      "command": "kubectl describe vpa resource-optimizer -n vpa-demo | grep -c 'RecommendationProvided'",
      "expected": "1",
      "points": 2,
      "description": "VPA successfully provides resource recommendations"
    }
  ]
}