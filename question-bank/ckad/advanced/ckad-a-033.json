{
  "id": "ckad-a-033",
  "title": "StatefulSet with Complex Persistent Storage and Backup Strategies",
  "description": "Deploy and manage a complex StatefulSet application in namespace ||database-cluster|| with sophisticated storage management, backup, and disaster recovery:\n\n1. **Multi-Node Database Cluster**:\n   Deploy a MongoDB replica set using StatefulSet:\n   - **Primary Node**: MongoDB primary with 200Gi storage\n   - **Secondary Nodes**: 2 secondary replicas with 150Gi storage each\n   - **Arbiter Node**: Lightweight arbiter with 10Gi storage\n   - **Hidden Node**: Hidden replica for backup with 300Gi storage\n\n2. **Persistent Storage Configuration**:\n   Configure diverse storage for different components:\n   - **Data Storage**: High-performance SSD for active data\n   - **Log Storage**: Separate volume for MongoDB logs\n   - **Config Storage**: ConfigMap and Secret mounted volumes\n   - **Backup Storage**: NFS volume for backup operations\n   - **Temporary Storage**: EmptyDir for temporary operations\n\n3. **StatefulSet Lifecycle Management**:\n   Implement proper StatefulSet operations:\n   - **Ordered Deployment**: Sequential pod creation and initialization\n   - **Rolling Updates**: Safe update strategy without data loss\n   - **Scaling Operations**: Add/remove replica nodes safely\n   - **Pod Disruption Budget**: Ensure cluster availability\n   - **Graceful Shutdown**: Proper shutdown sequence\n\n4. **Backup and Recovery Strategy**:\n   Implement comprehensive backup solutions:\n   - **Automated Backups**: CronJob for daily database dumps\n   - **Point-in-Time Recovery**: Binary log backup and replay\n   - **Cross-Site Replication**: Backup to external storage\n   - **Snapshot-Based Backup**: Volume snapshots for quick recovery\n   - **Backup Validation**: Automated backup integrity checks\n\n5. **Storage Volume Management**:\n   Configure advanced volume features:\n   - **Volume Expansion**: Dynamic storage expansion without downtime\n   - **Storage Migration**: Move data between storage classes\n   - **Cleanup Automation**: Orphaned volume cleanup\n   - **Monitoring**: Storage usage and performance monitoring\n   - **Encryption**: Encrypted storage volumes\n\n6. **High Availability and Disaster Recovery**:\n   Ensure cluster resilience:\n   - **Multi-Zone Deployment**: Spread nodes across availability zones\n   - **Network Partitioning**: Handle split-brain scenarios\n   - **Auto-Failover**: Automatic primary election\n   - **Data Consistency**: Ensure replica synchronization\n   - **Recovery Procedures**: Document disaster recovery steps\n\n7. **Monitoring and Observability**:\n   Implement comprehensive monitoring:\n   - **Cluster Health**: MongoDB replica set status monitoring\n   - **Storage Metrics**: Disk usage, IOPS, and latency\n   - **Replication Lag**: Monitor data synchronization delays\n   - **Backup Status**: Track backup completion and health\n   - **Alert Rules**: Critical issue notifications\n\n8. **Testing and Validation**:\n   Create comprehensive test scenarios:\n   - **Data Consistency Tests**: Verify replica synchronization\n   - **Failover Tests**: Test primary node failure scenarios\n   - **Backup Recovery Tests**: Validate backup and restore procedures\n   - **Performance Tests**: Storage and database performance\n   - **Disaster Recovery Tests**: Full cluster failure scenarios\n\nEnsure robust, highly available database cluster with comprehensive storage management.",
  "points": 15,
  "timeLimit": 30,
  "category": "State Persistence",
  "tags": [
    "statefulsets",
    "database-cluster",
    "persistent-volumes",
    "backup-recovery",
    "high-availability",
    "advanced"
  ],
  "infrastructure": {
    "namespaces": [
      "database-cluster"
    ],
    "resources": [
      "statefulsets",
      "persistentvolumeclaims",
      "services",
      "configmaps",
      "secrets",
      "cronjobs",
      "poddisruptionbudgets",
      "jobs"
    ],
    "prerequisites": [
      "storage-classes",
      "snapshot-controller"
    ]
  },
  "solution": {
    "steps": [
      "1. Create namespace and headless service:",
      "   kubectl create namespace database-cluster",
      "   kubectl apply -f - <<EOF",
      "   apiVersion: v1",
      "   kind: Service",
      "   metadata:",
      "     name: mongodb-headless",
      "     namespace: database-cluster",
      "   spec:",
      "     clusterIP: None",
      "     selector:",
      "       app: mongodb-replica",
      "     ports:",
      "     - port: 27017",
      "       targetPort: 27017",
      "   EOF",
      "2. Deploy MongoDB StatefulSet with persistent storage:",
      "   kubectl apply -f - <<EOF",
      "   apiVersion: apps/v1",
      "   kind: StatefulSet",
      "   metadata:",
      "     name: mongodb-replica",
      "     namespace: database-cluster",
      "   spec:",
      "     serviceName: mongodb-headless",
      "     replicas: 5",
      "     selector:",
      "       matchLabels:",
      "         app: mongodb-replica",
      "     template:",
      "       metadata:",
      "         labels:",
      "           app: mongodb-replica",
      "       spec:",
      "         containers:",
      "         - name: mongodb",
      "           image: mongo:5.0",
      "           ports:",
      "           - containerPort: 27017",
      "           env:",
      "           - name: MONGO_INITDB_ROOT_USERNAME",
      "             value: \"admin\"",
      "           - name: MONGO_INITDB_ROOT_PASSWORD",
      "             value: \"password\"",
      "           volumeMounts:",
      "           - name: mongodb-data",
      "             mountPath: /data/db",
      "           - name: mongodb-logs",
      "             mountPath: /var/log/mongodb",
      "           command:",
      "           - mongod",
      "           - --replSet",
      "           - rs0",
      "           - --bind_ip_all",
      "           - --auth",
      "     volumeClaimTemplates:",
      "     - metadata:",
      "         name: mongodb-data",
      "       spec:",
      "         accessModes: [\"ReadWriteOnce\"]",
      "         resources:",
      "           requests:",
      "             storage: 200Gi",
      "     - metadata:",
      "         name: mongodb-logs",
      "       spec:",
      "         accessModes: [\"ReadWriteOnce\"]",
      "         resources:",
      "           requests:",
      "             storage: 50Gi",
      "   EOF",
      "3. Configure Pod Disruption Budget:",
      "   kubectl apply -f - <<EOF",
      "   apiVersion: policy/v1",
      "   kind: PodDisruptionBudget",
      "   metadata:",
      "     name: mongodb-pdb",
      "     namespace: database-cluster",
      "   spec:",
      "     minAvailable: 3",
      "     selector:",
      "       matchLabels:",
      "         app: mongodb-replica",
      "   EOF",
      "4. Set up backup CronJob:",
      "   kubectl apply -f - <<EOF",
      "   apiVersion: batch/v1",
      "   kind: CronJob",
      "   metadata:",
      "     name: mongodb-backup",
      "     namespace: database-cluster",
      "   spec:",
      "     schedule: \"0 2 * * *\"",
      "     jobTemplate:",
      "       spec:",
      "         template:",
      "           spec:",
      "             containers:",
      "             - name: mongodb-backup",
      "               image: mongo:5.0",
      "               command:",
      "               - /bin/bash",
      "               args:",
      "               - -c",
      "               - |",
      "                 mongodump --host mongodb-headless.database-cluster.svc.cluster.local --port 27017 \\",
      "                   --username admin --password password --authenticationDatabase admin \\",
      "                   --out /backup/$(date +%Y%m%d) --gzip",
      "                 echo \"Backup completed for $(date)\"",
      "               volumeMounts:",
      "               - name: backup-storage",
      "                 mountPath: /backup",
      "             volumes:",
      "             - name: backup-storage",
      "               emptyDir: {}",
      "             restartPolicy: OnFailure",
      "   EOF",
      "5. Create database configuration and secrets:",
      "   kubectl create secret generic mongodb-secret \\",
      "     --from-literal=username=admin \\",
      "     --from-literal=password=password -n database-cluster",
      "   kubectl apply -f - <<EOF",
      "   apiVersion: v1",
      "   kind: ConfigMap",
      "   metadata:",
      "     name: mongodb-config",
      "     namespace: database-cluster",
      "   data:",
      "     mongod.conf: |",
      "       storage:",
      "         dbPath: /data/db",
      "       systemLog:",
      "         destination: file",
      "         path: /var/log/mongodb/mongod.log",
      "       net:",
      "         port: 27017",
      "         bindIp: 0.0.0.0",
      "       replication:",
      "         replSetName: rs0",
      "   EOF",
      "6. Create database validation job:",
      "   kubectl apply -f - <<EOF",
      "   apiVersion: batch/v1",
      "   kind: Job",
      "   metadata:",
      "     name: database-tester",
      "     namespace: database-cluster",
      "   spec:",
      "     template:",
      "       spec:",
      "         containers:",
      "         - name: tester",
      "           image: mongo:5.0",
      "           command: [\"/bin/bash\"]",
      "           args:",
      "           - -c",
      "           - |",
      "             sleep 30",
      "             mongo --host mongodb-headless.database-cluster.svc.cluster.local:27017 \\",
      "               --username admin --password password --authenticationDatabase admin \\",
      "               --eval \"rs.status()\" || true",
      "             echo \"Database connectivity test completed\"",
      "         restartPolicy: Never",
      "   EOF",
      "7. Verify StatefulSet and storage configuration:",
      "   kubectl get statefulset mongodb-replica -n database-cluster",
      "   kubectl get pvc -n database-cluster",
      "   kubectl get poddisruptionbudget mongodb-pdb -n database-cluster",
      "   kubectl describe statefulset mongodb-replica -n database-cluster"
    ]
  },
  "validations": [
    {
      "command": "kubectl get statefulset mongodb-replica -n database-cluster -o jsonpath='{.spec.replicas}'",
      "expected": "5",
      "points": 1,
      "description": "MongoDB StatefulSet should have 5 replicas"
    },
    {
      "command": "kubectl get pvc mongodb-data-mongodb-replica-0 -n database-cluster -o jsonpath='{.spec.resources.requests.storage}'",
      "expected": "200Gi",
      "points": 1,
      "description": "Primary node should have 200Gi storage"
    },
    {
      "command": "kubectl get service mongodb-headless -n database-cluster -o jsonpath='{.spec.clusterIP}'",
      "expected": "None",
      "points": 1,
      "description": "Should have headless service for StatefulSet"
    },
    {
      "command": "kubectl get cronjob mongodb-backup -n database-cluster -o jsonpath='{.spec.schedule}'",
      "expected": "0 2 * * *",
      "points": 1,
      "description": "Should have scheduled backup job"
    },
    {
      "command": "kubectl get poddisruptionbudget mongodb-pdb -n database-cluster -o jsonpath='{.spec.minAvailable}'",
      "expected": "3",
      "points": 1,
      "description": "Should have PDB ensuring minimum availability"
    },
    {
      "command": "kubectl get job database-tester -n database-cluster -o jsonpath='{.status.succeeded}'",
      "expected": "1",
      "points": 1,
      "description": "Database validation should complete successfully"
    }
  ]
}