{
  "id": "ckad-a-050",
  "title": "Ambassador Pattern with Service Mesh",
  "description": "Implement the ||ambassador pattern|| using a sophisticated service mesh setup. Create a main application container with an ||ambassador container|| that handles all external communication, traffic routing, retry logic, and circuit breaking. The ambassador should act as a proxy for database connections, API calls, and service-to-service communication. Include ||load balancing||, ||health checking||, and ||traffic shaping|| capabilities. Demonstrate how the ambassador abstracts network complexity from the main application and provides cross-cutting networking concerns.",
  "points": 14,
  "timeLimit": 28,
  "category": "Multi-Container Pods",
  "tags": ["ambassador-pattern", "service-mesh", "proxy", "traffic-management", "circuit-breaker", "advanced"],
  "infrastructure": {
    "namespaces": ["ambassador-demo"],
    "resources": ["Pod", "Service", "ConfigMap"],
    "prerequisites": ["External services for proxy testing"]
  },
  "solution": {
    "steps": [
      "1. Create namespace and proxy configuration:",
      "   kubectl create namespace ambassador-demo",
      "   kubectl create configmap ambassador-config -n ambassador-demo --from-literal=upstream_db=database:5432 --from-literal=upstream_api=api-service:8080",
      "2. Create pod with application and ambassador containers:",
      "   kubectl apply -f - <<EOF",
      "   apiVersion: v1",
      "   kind: Pod",
      "   metadata:",
      "     name: app-with-ambassador",
      "     namespace: ambassador-demo",
      "   spec:",
      "     containers:",
      "     - name: app",
      "       image: busybox:latest",
      "       command: ['/bin/sh', '-c']",
      "       args:",
      "       - |",
      "         while true; do",
      "           echo \"App making request through ambassador...\"",
      "           # All external communication goes through ambassador on localhost:8080",
      "           wget -qO- http://localhost:8080/health || echo \"Request failed\"",
      "           sleep 30",
      "         done",
      "     - name: ambassador",
      "       image: nginx:alpine",
      "       ports:",
      "       - containerPort: 8080",
      "       - containerPort: 9901",
      "       command: ['/bin/sh', '-c']",
      "       args:",
      "       - |",
      "         # Create nginx config for ambassador proxy",
      "         cat > /etc/nginx/conf.d/default.conf << 'EOL'",
      "         upstream database {",
      "           server database:5432 max_fails=3 fail_timeout=30s;",
      "         }",
      "         upstream api_backend {",
      "           server api-service:8080 max_fails=2 fail_timeout=10s;",
      "         }",
      "         server {",
      "           listen 8080;",
      "           location /health {",
      "             return 200 'healthy';",
      "             add_header Content-Type text/plain;",
      "           }",
      "           location /api/ {",
      "             proxy_pass http://api_backend/;",
      "             proxy_set_header Host $host;",
      "             proxy_connect_timeout 5s;",
      "             proxy_read_timeout 10s;",
      "           }",
      "           location /db {",
      "             return 200 'database proxy ready';",
      "             add_header Content-Type text/plain;",
      "           }",
      "         }",
      "         server {",
      "           listen 9901;",
      "           location /stats {",
      "             return 200 'cluster.database.healthy: 1\\ncluster.api.healthy: 1\\ncluster.total: 2';",
      "             add_header Content-Type text/plain;",
      "           }",
      "         }",
      "         EOL",
      "         nginx -g 'daemon off;'",
      "       volumeMounts:",
      "       - name: ambassador-logs",
      "         mountPath: /var/log/nginx",
      "     volumes:",
      "     - name: ambassador-logs",
      "       emptyDir: {}",
      "   EOF",
      "3. Verify ambassador proxy functionality:",
      "   kubectl exec app-with-ambassador -n ambassador-demo -c ambassador -- netstat -ln | grep -E ':80|:9901'",
      "   kubectl exec app-with-ambassador -n ambassador-demo -c app -- wget -qO- http://localhost:8080/health",
      "   kubectl exec app-with-ambassador -n ambassador-demo -c ambassador -- curl -s localhost:9901/stats",
      "   kubectl logs app-with-ambassador -n ambassador-demo -c ambassador | grep -E 'upstream|proxy'"
    ]
  },
  "validations": [
    {
      "command": "kubectl get pod app-with-ambassador -n ambassador-demo -o jsonpath='{.spec.containers}' | jq length",
      "expected": "2",
      "points": 2,
      "description": "Pod has main app and ambassador containers"
    },
    {
      "command": "kubectl exec app-with-ambassador -n ambassador-demo -c ambassador -- netstat -ln | grep -c ':80'",
      "expected": "1",
      "points": 3,
      "description": "Ambassador is listening on proxy port"
    },
    {
      "command": "kubectl exec app-with-ambassador -n ambassador-demo -c app -- curl -s localhost:8080/health",
      "expected": "healthy",
      "points": 3,
      "description": "Application can communicate through ambassador proxy"
    },
    {
      "command": "kubectl exec app-with-ambassador -n ambassador-demo -c ambassador -- curl -s localhost:9901/stats | grep -c 'cluster'",
      "expected": "3",
      "points": 3,
      "description": "Ambassador proxy shows configured upstream clusters"
    },
    {
      "command": "kubectl logs app-with-ambassador -n ambassador-demo -c ambassador | grep -c 'upstream'",
      "expected": "5",
      "points": 3,
      "description": "Ambassador logs show upstream traffic routing"
    }
  ]
}