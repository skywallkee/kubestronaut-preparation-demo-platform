{
  "id": "ckad-a-049",
  "title": "Init Container Dependency Chain",
  "description": "Design a complex application initialization system using multiple ||init containers|| in a dependency chain. Create a web application that requires database migration, configuration validation, external service health checks, and data seeding before the main application starts. Implement proper ||init container ordering||, failure handling, and resource sharing between init containers and the main application. Demonstrate how init containers can prepare the environment, download dependencies, and ensure all prerequisites are met before application startup.",
  "points": 12,
  "timeLimit": 25,
  "category": "Multi-Container Pods",
  "tags": ["init-containers", "dependency-chain", "initialization", "startup-sequence", "prerequisites", "advanced"],
  "infrastructure": {
    "namespaces": ["init-demo"],
    "resources": ["Pod", "ConfigMap", "Secret", "Service"],
    "prerequisites": ["Database service for connection testing"]
  },
  "solution": {
    "steps": [
      "1. Create namespace and configuration resources:",
      "   kubectl create namespace init-demo",
      "   kubectl create configmap app-config -n init-demo --from-literal=database_url=postgres://db:5432/app --from-literal=api_endpoint=http://api:8080",
      "   kubectl create secret generic db-credentials -n init-demo --from-literal=username=appuser --from-literal=password=apppass",
      "2. Create pod with init container dependency chain:",
      "   kubectl apply -f - <<EOF",
      "   apiVersion: v1",
      "   kind: Pod",
      "   metadata:",
      "     name: webapp-with-init",
      "     namespace: init-demo",
      "   spec:",
      "     initContainers:",
      "     - name: db-migration",
      "       image: busybox:latest",
      "       command: ['/bin/sh', '-c']",
      "       args:",
      "       - |",
      "         echo \"Running database migration...\"",
      "         sleep 5",
      "         echo \"Migration completed\" > /app/data/migration.done",
      "         echo \"CREATE TABLE users (id SERIAL PRIMARY KEY);\" > /app/data/schema.sql",
      "       volumeMounts:",
      "       - name: app-data",
      "         mountPath: /app/data",
      "     - name: config-validator",
      "       image: busybox:latest",
      "       command: ['/bin/sh', '-c']",
      "       args:",
      "       - |",
      "         echo \"Validating configuration...\"",
      "         if [ ! -f /app/data/migration.done ]; then",
      "           echo \"Migration not completed!\"",
      "           exit 1",
      "         fi",
      "         echo \"Configuration validated\" > /app/data/config.validated",
      "       volumeMounts:",
      "       - name: app-data",
      "         mountPath: /app/data",
      "       env:",
      "       - name: DATABASE_URL",
      "         valueFrom:",
      "           configMapKeyRef:",
      "             name: app-config",
      "             key: database_url",
      "     - name: health-check",
      "       image: busybox:latest",
      "       command: ['/bin/sh', '-c']",
      "       args:",
      "       - |",
      "         echo \"Checking external service health...\"",
      "         # Simulate health check",
      "         sleep 3",
      "         echo \"Health check passed\" > /app/data/health.ok",
      "       volumeMounts:",
      "       - name: app-data",
      "         mountPath: /app/data",
      "     - name: data-seeder",
      "       image: busybox:latest",
      "       command: ['/bin/sh', '-c']",
      "       args:",
      "       - |",
      "         echo \"Seeding initial data...\"",
      "         echo \"INSERT INTO users (name) VALUES ('admin');\" > /app/data/seed.sql",
      "         echo \"Sample data seeded\" > /app/data/seeded.txt",
      "         echo \"Data seeding completed\"",
      "       volumeMounts:",
      "       - name: app-data",
      "         mountPath: /app/data",
      "     containers:",
      "     - name: main-app",
      "       image: nginx:alpine",
      "       command: ['/bin/sh', '-c']",
      "       args:",
      "       - |",
      "         echo \"Main application starting...\"",
      "         echo \"Checking initialization files:\"",
      "         ls -la /app/data/",
      "         nginx -g 'daemon off;'",
      "       volumeMounts:",
      "       - name: app-data",
      "         mountPath: /app/data",
      "     volumes:",
      "     - name: app-data",
      "       emptyDir: {}",
      "   EOF",
      "3. Verify init container execution and data preparation:",
      "   kubectl get pod webapp-with-init -n init-demo -o jsonpath='{.status.initContainerStatuses[*].name}'",
      "   kubectl exec webapp-with-init -n init-demo -- ls -la /app/data/",
      "   kubectl exec webapp-with-init -n init-demo -- cat /app/data/seeded.txt",
      "   kubectl logs webapp-with-init -n init-demo -c db-migration"
    ]
  },
  "validations": [
    {
      "command": "kubectl get pod webapp-with-init -n init-demo -o jsonpath='{.spec.initContainers}' | jq length",
      "expected": "4",
      "points": 3,
      "description": "Pod has 4 init containers"
    },
    {
      "command": "kubectl get pod webapp-with-init -n init-demo -o jsonpath='{.status.initContainerStatuses[0].state.terminated.reason}'",
      "expected": "Completed",
      "points": 2,
      "description": "First init container completed successfully"
    },
    {
      "command": "kubectl get pod webapp-with-init -n init-demo -o jsonpath='{.status.initContainerStatuses[3].state.terminated.reason}'",
      "expected": "Completed",
      "points": 2,
      "description": "Last init container completed successfully"
    },
    {
      "command": "kubectl exec webapp-with-init -n init-demo -- ls /app/data/",
      "expected": "seeded.txt",
      "points": 3,
      "description": "Init containers created required data files"
    },
    {
      "command": "kubectl get pod webapp-with-init -n init-demo --field-selector=status.phase=Running | wc -l",
      "expected": "2",
      "points": 2,
      "description": "Main application container is running after init completion"
    }
  ]
}