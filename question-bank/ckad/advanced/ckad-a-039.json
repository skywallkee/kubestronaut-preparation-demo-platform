{
  "id": "ckad-a-039",
  "title": "Custom Resource Definitions and Controllers",
  "description": "Implement a simple ||Custom Resource Definition|| (CRD) for managing application configurations. Create a CRD called ||AppConfig|| that stores application settings, then create multiple instances of this custom resource. Demonstrate how to interact with custom resources using kubectl and show how they integrate with the Kubernetes API. This scenario tests understanding of Kubernetes extensibility and how custom resources work alongside built-in resources.",
  "points": 13,
  "timeLimit": 25,
  "category": "Core Concepts",
  "tags": ["crd", "custom-resources", "api-extensions", "kubernetes-api", "advanced"],
  "infrastructure": {
    "namespaces": ["custom-resources"],
    "resources": ["CustomResourceDefinition", "AppConfig"],
    "prerequisites": ["Cluster admin access for CRD creation"]
  },
  "solution": {
    "steps": [
      "1. Create CustomResourceDefinition for AppConfig:",
      "   kubectl apply -f - <<EOF",
      "   apiVersion: apiextensions.k8s.io/v1",
      "   kind: CustomResourceDefinition",
      "   metadata:",
      "     name: appconfigs.stable.example.com",
      "   spec:",
      "     group: stable.example.com",
      "     versions:",
      "     - name: v1",
      "       served: true",
      "       storage: true",
      "       schema:",
      "         openAPIV3Schema:",
      "           type: object",
      "           properties:",
      "             spec:",
      "               type: object",
      "               properties:",
      "                 appName:",
      "                   type: string",
      "                 version:",
      "                   type: string",
      "                 replicas:",
      "                   type: integer",
      "                   minimum: 1",
      "                   maximum: 10",
      "                 configData:",
      "                   type: object",
      "                   additionalProperties:",
      "                     type: string",
      "               required:",
      "               - appName",
      "               - version",
      "               - replicas",
      "     scope: Namespaced",
      "     names:",
      "       plural: appconfigs",
      "       singular: appconfig",
      "       kind: AppConfig",
      "   EOF",
      "2. Create namespace for custom resources:",
      "   kubectl create namespace custom-resources",
      "3. Create AppConfig instance for webapp:",
      "   kubectl apply -f - <<EOF",
      "   apiVersion: stable.example.com/v1",
      "   kind: AppConfig",
      "   metadata:",
      "     name: webapp-config",
      "     namespace: custom-resources",
      "   spec:",
      "     appName: webapp",
      "     version: v1.2.3",
      "     replicas: 5",
      "     configData:",
      "       database_url: postgres://localhost:5432/webapp",
      "       log_level: info",
      "       max_connections: '100'",
      "   EOF",
      "4. Create AppConfig instance for database:",
      "   kubectl apply -f - <<EOF",
      "   apiVersion: stable.example.com/v1",
      "   kind: AppConfig",
      "   metadata:",
      "     name: database-config",
      "     namespace: custom-resources",
      "   spec:",
      "     appName: database",
      "     version: v13.2",
      "     replicas: 3",
      "     configData:",
      "       max_connections: '200'",
      "       shared_buffers: 256MB",
      "       log_statement: all",
      "   EOF",
      "5. Create AppConfig instance for cache:",
      "   kubectl apply -f - <<EOF",
      "   apiVersion: stable.example.com/v1",
      "   kind: AppConfig",
      "   metadata:",
      "     name: cache-config",
      "     namespace: custom-resources",
      "   spec:",
      "     appName: redis",
      "     version: v6.2",
      "     replicas: 2",
      "     configData:",
      "       maxmemory: 1gb",
      "       maxmemory_policy: allkeys-lru",
      "       save: '900 1'",
      "   EOF",
      "6. Verify CRD and custom resources:",
      "   kubectl get crd appconfigs.stable.example.com",
      "   kubectl api-resources | grep appconfig",
      "   kubectl get appconfigs -n custom-resources",
      "   kubectl describe appconfig webapp-config -n custom-resources",
      "   kubectl get appconfig webapp-config -n custom-resources -o yaml"
    ]
  },
  "validations": [
    {
      "command": "kubectl get crd appconfigs.stable.example.com -o jsonpath='{.metadata.name}'",
      "expected": "appconfigs.stable.example.com",
      "points": 3,
      "description": "CRD is created with correct name"
    },
    {
      "command": "kubectl api-resources | grep appconfig",
      "expected": "appconfigs",
      "points": 2,
      "description": "Custom resource is available in API"
    },
    {
      "command": "kubectl get appconfigs -n custom-resources | wc -l",
      "expected": "4",
      "points": 3,
      "description": "At least 3 AppConfig instances exist (plus header)"
    },
    {
      "command": "kubectl get appconfig webapp-config -n custom-resources -o jsonpath='{.spec.appName}'",
      "expected": "webapp",
      "points": 3,
      "description": "AppConfig instance has correct spec.appName"
    },
    {
      "command": "kubectl get appconfig database-config -n custom-resources -o jsonpath='{.spec.replicas}'",
      "expected": "3",
      "points": 2,
      "description": "AppConfig instance has correct spec.replicas"
    }
  ]
}