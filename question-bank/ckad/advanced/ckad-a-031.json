{
  "id": "ckad-a-031",
  "title": "Service Mesh Integration with Istio and Advanced Traffic Management",
  "description": "Implement a comprehensive service mesh architecture in namespace ||service-mesh|| using Istio with advanced traffic management, security, and observability:\n\n1. **Istio Service Mesh Setup**:\n   Configure Istio service mesh with:\n   - **Istio Control Plane**: Istiod deployment and configuration\n   - **Sidecar Injection**: Automatic envoy proxy injection\n   - **Gateway Configuration**: Ingress and egress gateways\n   - **Service Registry**: Automatic service discovery\n\n2. **Microservices Application Deployment**:\n   Deploy a microservices application:\n   - **Frontend Service**: React app (nginx:1.21) - 2 replicas\n   - **User Service**: User management API (httpd:2.4) - 2 replicas\n   - **Product Service**: Product catalog API (node:16) - 3 replicas\n   - **Order Service**: Order processing API (python:3.9) - 2 replicas\n   - **Payment Service**: Payment processing (java:11) - 1 replica\n\n3. **Advanced Traffic Routing**:\n   Implement sophisticated traffic management:\n   - **Virtual Services**: Define routing rules for each service\n   - **Destination Rules**: Configure load balancing and circuit breaking\n   - **Traffic Splitting**: Canary deployments with percentage-based routing\n   - **Fault Injection**: Test resilience with delay and error injection\n   - **Request Routing**: Header-based and weight-based routing\n\n4. **Security Policies**:\n   Configure comprehensive security:\n   - **mTLS Authentication**: Automatic mutual TLS between services\n   - **Authorization Policies**: Service-to-service access control\n   - **JWT Validation**: Token-based authentication at gateway\n   - **Security Policies**: Fine-grained access control rules\n   - **Certificate Management**: Automatic certificate rotation\n\n5. **Observability and Monitoring**:\n   Implement full observability stack:\n   - **Distributed Tracing**: Jaeger integration for request tracing\n   - **Metrics Collection**: Prometheus metrics from Envoy sidecars\n   - **Service Graph**: Kiali service topology visualization\n   - **Access Logs**: Detailed request/response logging\n   - **Custom Metrics**: Application-specific telemetry\n\n6. **Circuit Breaking and Resilience**:\n   Configure resilience patterns:\n   - **Connection Limits**: Max connections per service\n   - **Request Timeouts**: Service-specific timeout configurations\n   - **Retry Policies**: Automatic retry with backoff\n   - **Circuit Breaker**: Fail-fast for unhealthy services\n   - **Outlier Detection**: Automatic unhealthy instance removal\n\n7. **Multi-Version Deployment**:\n   Implement version-aware deployments:\n   - **Blue-Green Deployment**: Zero-downtime deployments\n   - **Canary Releases**: Gradual traffic shifting\n   - **A/B Testing**: User-based traffic routing\n   - **Version Routing**: Route based on service versions\n   - **Rollback Mechanisms**: Quick version rollback procedures\n\n8. **Testing and Validation**:\n   Create comprehensive service mesh tests:\n   - **Traffic Flow Tests**: Verify routing rules\n   - **Security Tests**: mTLS and authorization validation\n   - **Resilience Tests**: Circuit breaker and fault tolerance\n   - **Performance Tests**: Latency and throughput measurement\n   - **Observability Tests**: Tracing and metrics validation\n\nEnsure robust service mesh architecture with advanced traffic management and security.",
  "points": 14,
  "timeLimit": 30,
  "category": "Services & Networking",
  "tags": [
    "service-mesh",
    "istio",
    "traffic-management",
    "mtls",
    "observability",
    "advanced"
  ],
  "infrastructure": {
    "namespaces": [
      "service-mesh",
      "istio-system"
    ],
    "resources": [
      "deployments",
      "services",
      "virtualservices",
      "destinationrules",
      "gateways",
      "authorizationpolicies",
      "jobs"
    ],
    "prerequisites": [
      "istio-installation",
      "prometheus",
      "jaeger"
    ]
  },
  "solution": {
    "steps": [
      "1. Install and configure Istio service mesh:",
      "   istioctl install --set values.defaultRevision=default",
      "   kubectl create namespace service-mesh",
      "   kubectl label namespace service-mesh istio-injection=enabled",
      "2. Deploy microservices application with sidecar injection:",
      "   kubectl create deployment frontend --image=nginx:1.21 --replicas=2 -n service-mesh",
      "   kubectl expose deployment frontend --port=80 --target-port=80 -n service-mesh",
      "   kubectl create deployment user-service --image=httpd:2.4 --replicas=2 -n service-mesh",
      "   kubectl expose deployment user-service --port=8080 --target-port=80 -n service-mesh",
      "   kubectl create deployment product-service --image=node:16 --replicas=3 -n service-mesh",
      "   kubectl expose deployment product-service --port=3000 --target-port=3000 -n service-mesh",
      "   kubectl create deployment order-service --image=python:3.9 --replicas=2 -n service-mesh",
      "   kubectl annotate deployment order-service sidecar.istio.io/inject=true -n service-mesh",
      "   kubectl expose deployment order-service --port=5000 --target-port=5000 -n service-mesh",
      "   kubectl create deployment payment-service --image=openjdk:11 --replicas=1 -n service-mesh",
      "   kubectl expose deployment payment-service --port=8080 --target-port=8080 -n service-mesh",
      "3. Configure Istio gateway and virtual services:",
      "   kubectl apply -f - <<EOF",
      "   apiVersion: networking.istio.io/v1beta1",
      "   kind: Gateway",
      "   metadata:",
      "     name: service-mesh-gateway",
      "     namespace: service-mesh",
      "   spec:",
      "     selector:",
      "       istio: ingressgateway",
      "     servers:",
      "     - port:",
      "         number: 80",
      "         name: http",
      "         protocol: HTTP",
      "       hosts:",
      "       - \"*\"",
      "   EOF",
      "   kubectl apply -f - <<EOF",
      "   apiVersion: networking.istio.io/v1beta1",
      "   kind: VirtualService",
      "   metadata:",
      "     name: frontend-vs",
      "     namespace: service-mesh",
      "   spec:",
      "     hosts:",
      "     - \"*\"",
      "     gateways:",
      "     - service-mesh-gateway",
      "     http:",
      "     - route:",
      "       - destination:",
      "           host: frontend",
      "           port:",
      "             number: 80",
      "   EOF",
      "4. Create destination rules with circuit breaking:",
      "   kubectl apply -f - <<EOF",
      "   apiVersion: networking.istio.io/v1beta1",
      "   kind: DestinationRule",
      "   metadata:",
      "     name: product-dr",
      "     namespace: service-mesh",
      "   spec:",
      "     host: product-service",
      "     trafficPolicy:",
      "       circuitBreaker:",
      "         maxConnections: 10",
      "         http1MaxPendingRequests: 10",
      "         maxRequestsPerConnection: 2",
      "       loadBalancer:",
      "         simple: ROUND_ROBIN",
      "   EOF",
      "5. Implement authorization policies:",
      "   kubectl apply -f - <<EOF",
      "   apiVersion: security.istio.io/v1beta1",
      "   kind: AuthorizationPolicy",
      "   metadata:",
      "     name: payment-policy",
      "     namespace: service-mesh",
      "   spec:",
      "     selector:",
      "       matchLabels:",
      "         app: payment-service",
      "     action: ALLOW",
      "     rules:",
      "     - from:",
      "       - source:",
      "           principals: [\"cluster.local/ns/service-mesh/sa/order-service\"]",
      "   EOF",
      "6. Enable mTLS and observability:",
      "   kubectl apply -f - <<EOF",
      "   apiVersion: security.istio.io/v1beta1",
      "   kind: PeerAuthentication",
      "   metadata:",
      "     name: default",
      "     namespace: service-mesh",
      "   spec:",
      "     mtls:",
      "       mode: STRICT",
      "   EOF",
      "   kubectl apply -f - <<EOF",
      "   apiVersion: telemetry.istio.io/v1alpha1",
      "   kind: Telemetry",
      "   metadata:",
      "     name: default",
      "     namespace: service-mesh",
      "   spec:",
      "     metrics:",
      "     - providers:",
      "       - name: prometheus",
      "     tracing:",
      "     - providers:",
      "       - name: jaeger",
      "   EOF",
      "7. Create validation job and test traffic management:",
      "   kubectl apply -f - <<EOF",
      "   apiVersion: batch/v1",
      "   kind: Job",
      "   metadata:",
      "     name: service-mesh-tester",
      "     namespace: service-mesh",
      "   spec:",
      "     template:",
      "       spec:",
      "         containers:",
      "         - name: tester",
      "           image: curlimages/curl",
      "           command: [\"/bin/sh\"]",
      "           args: [\"-c\", \"curl -s frontend.service-mesh.svc.cluster.local && echo 'Service mesh test completed'\"]",
      "         restartPolicy: Never",
      "   EOF",
      "   kubectl get virtualservices -n service-mesh",
      "   kubectl get destinationrules -n service-mesh",
      "   kubectl get authorizationpolicies -n service-mesh"
    ]
  },
  "validations": [
    {
      "command": "kubectl get virtualservice frontend-vs -n service-mesh -o jsonpath='{.spec.http[0].route[0].destination.host}'",
      "expected": "frontend",
      "points": 1,
      "description": "Frontend virtual service should route to frontend service"
    },
    {
      "command": "kubectl get destinationrule product-dr -n service-mesh -o jsonpath='{.spec.trafficPolicy.circuitBreaker.maxConnections}'",
      "expected": "10",
      "points": 1,
      "description": "Product service should have circuit breaker configured"
    },
    {
      "command": "kubectl get authorizationpolicy payment-policy -n service-mesh -o jsonpath='{.spec.action}'",
      "expected": "ALLOW",
      "points": 1,
      "description": "Payment service should have authorization policy"
    },
    {
      "command": "kubectl get deployment order-service -n service-mesh -o jsonpath='{.spec.template.metadata.annotations.sidecar\\.istio\\.io/inject}'",
      "expected": "true",
      "points": 1,
      "description": "Order service should have sidecar injection enabled"
    },
    {
      "command": "kubectl get gateway service-mesh-gateway -n service-mesh -o jsonpath='{.spec.selector.istio}'",
      "expected": "ingressgateway",
      "points": 1,
      "description": "Should have Istio ingress gateway configured"
    },
    {
      "command": "kubectl get job service-mesh-tester -n service-mesh -o jsonpath='{.status.succeeded}'",
      "expected": "1",
      "points": 1,
      "description": "Service mesh validation should complete successfully"
    }
  ]
}