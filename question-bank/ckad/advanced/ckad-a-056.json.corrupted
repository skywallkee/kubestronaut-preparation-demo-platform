{
  "id": "ckad-a-056",
  "title": "Comprehensive Logging and Log Aggregation",
  "description": "Design a sophisticated ||logging architecture|| with centralized log aggregation and analysis. Create applications that generate structured logs in multiple formats (JSON, plain text, metrics) and implement a complete logging pipeline with ||log collection||, ||parsing||, ||filtering||, and ||aggregation||. Use sidecar containers for log processing, implement log rotation, and create custom log parsers for different application components. Include log correlation, error tracking, and performance monitoring through log analysis.",
  "points": 15,
  "timeLimit": 30,
  "category": "Observability",
  "tags": ["logging", "log-aggregation", "structured-logs", "sidecar", "log-parsing", "monitoring", "advanced"],
  "infrastructure": {
    "namespaces": ["logging-demo"],
    "resources": ["Pod", "Deployment", "ConfigMap", "Service"],
    "prerequisites": ["Log aggregation system (fluentd/filebeat)"]
  },
  "solution": {
    "steps": [
      "1. Create namespace and log parsing configuration:",
      "   kubectl create namespace logging-demo",
      "   kubectl create configmap log-config -n logging-demo --from-literal=fluent.conf='<source>\\n  @type tail\\n  path /var/log/app/application.log\\n  pos_file /var/log/fluentd-app.log.pos\\n  tag app.logs\\n  <parse>\\n    @type json\\n  </parse>\\n</source>\\n<match app.logs>\\n  @type stdout\\n</match>'",
      "2. Deploy application with logging sidecar:",
      "   kubectl apply -f - <<EOF",
      "   apiVersion: apps/v1",
      "   kind: Deployment",
      "   metadata:",
      "     name: log-app",
      "     namespace: logging-demo",
      "   spec:",
      "     replicas: 1",
      "     selector:",
      "       matchLabels:",
      "         app: log-app",
      "     template:",
      "       metadata:",
      "         labels:",
      "           app: log-app",
      "       spec:",
      "         containers:",
      "         - name: app",
      "           image: busybox:latest",
      "           command: ['/bin/sh', '-c']",
      "           args:",
      "           - |",
      "             echo \"Application starting with structured logging...\"",
      "             counter=1",
      "             while true; do",
      "               trace_id=\"trace-$(date +%s)-$counter\"",
      "               timestamp=$(date -u +\"%Y-%m-%dT%H:%M:%SZ\")",
      "               # Generate structured JSON logs",
      "               cat >> /var/log/app/application.log << EOL",
      "             {\"timestamp\":\"$timestamp\",\"level\":\"INFO\",\"message\":\"Processing request $counter\",\"trace_id\":\"$trace_id\",\"component\":\"web-server\",\"duration_ms\":$((RANDOM % 1000))}",
      "             EOL",
      "               if [ $((counter % 5)) -eq 0 ]; then",
      "                 cat >> /var/log/app/application.log << EOL",
      "             {\"timestamp\":\"$timestamp\",\"level\":\"ERROR\",\"message\":\"Failed to process request $counter\",\"trace_id\":\"$trace_id\",\"component\":\"database\",\"error_code\":\"DB_TIMEOUT\"}",
      "             EOL",
      "               fi",
      "               counter=$((counter + 1))",
      "               sleep 5",
      "             done",
      "           volumeMounts:",
      "           - name: app-logs",
      "             mountPath: /var/log/app",
      "         - name: log-collector",
      "           image: busybox:latest",
      "           command: ['/bin/sh', '-c']",
      "           args:",
      "           - |",
      "             echo \"Log collector starting...\"",
      "             while true; do",
      "               if [ -f /var/log/app/application.log ]; then",
      "                 # Process and parse logs",
      "                 tail -n 1 /var/log/app/application.log | while read line; do",
      "                   if echo \"$line\" | grep -q '\"level\"'; then",
      "                     echo \"parsed successfully: $line\" >> /var/log/collector/parsed.log",
      "                   fi",
      "                 done",
      "                 # Log aggregation metrics",
      "                 log_count=$(wc -l < /var/log/app/application.log)",
      "                 error_count=$(grep -c '\"level\":\"ERROR\"' /var/log/app/application.log 2>/dev/null || echo 0)",
      "                 echo \"{\\\"timestamp\\\":\\\"$(date -u +\\\"%Y-%m-%dT%H:%M:%SZ\\\")\\\",\\\"total_logs\\\":$log_count,\\\"errors\\\":$error_count}\" >> /var/log/collector/metrics.log",
      "               fi",
      "               sleep 10",
      "             done",
      "           volumeMounts:",
      "           - name: app-logs",
      "             mountPath: /var/log/app",
      "           - name: collector-logs",
      "             mountPath: /var/log/collector",
      "         volumes:",
      "         - name: app-logs",
      "           emptyDir: {}",
      "         - name: collector-logs",
      "           emptyDir: {}",
      "   EOF",
      "3. Verify logging pipeline and structured log format:",
      "   kubectl exec -n logging-demo deploy/log-app -c app -- ls -la /var/log/app/",
      "   kubectl exec -n logging-demo deploy/log-app -c log-collector -- head -5 /var/log/app/application.log",
      "   kubectl exec -n logging-demo deploy/log-app -c app -- grep trace_id /var/log/app/application.log | head -5",
      "   kubectl logs -n logging-demo deploy/log-app -c log-collector | grep 'parsed successfully'",
      "   kubectl get configmap log-config -n logging-demo -o jsonpath='{.data.fluent\.conf}' | grep 'parse json'"
    ]
  },
  "validations": [
    {
      "command": "kubectl get pod -n logging-demo -l app=log-app -o jsonpath='{.items[0].spec.containers}' | jq length",
      "expected": "2",
      "points": 2,
      "description": "Pod has application and log collection sidecar"
    },
    {
      "command": "kubectl exec -n logging-demo deploy/log-app -c app -- ls /var/log/app/",
      "expected": "application.log",
      "points": 2,
      "description": "Application generates logs in shared volume"
    },
    {
      "command": "kubectl exec -n logging-demo deploy/log-app -c log-collector -- cat /var/log/app/application.log | head -1 | jq .level",
      "expected": "INFO",
      "points": 3,
      "description": "Logs are in structured JSON format"
    },
    {
      "command": "kubectl logs -n logging-demo deploy/log-app -c log-collector | grep -c 'parsed successfully'",
      "expected": "10",
      "points": 3,
      "description": "Log collector successfully parses application logs"
    },
    {
      "command": "kubectl exec -n logging-demo deploy/log-app -c app -- cat /var/log/app/application.log | grep trace_id | wc -l",
      "expected": "5",
      "points": 3,
      "description": "Logs contain trace IDs for correlation"
    },
    {
      "command": "kubectl get configmap log-config -n logging-demo -o jsonpath='{.data.fluent\\.conf}'",
      "expected": "parse json",
      "points": 2,
      "description": "Log collector configuration includes JSON parsing"
    }
  ]
}