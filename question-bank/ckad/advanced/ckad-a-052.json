{
  "id": "ckad-a-052",
  "title": "Inter-Container Communication Patterns",
  "description": "Design a comprehensive multi-container communication system demonstrating various ||inter-container communication|| patterns. Create containers that communicate through ||shared volumes||, ||localhost networking||, ||Unix domain sockets||, and ||shared memory||. Implement a message passing system where containers exchange data through different channels: file-based communication, HTTP APIs on localhost, socket-based communication, and memory-mapped files. Show how different communication patterns affect performance, reliability, and container coupling.",
  "points": 15,
  "timeLimit": 30,
  "category": "Multi-Container Pods",
  "tags": ["inter-container-communication", "shared-volumes", "localhost", "unix-sockets", "ipc", "advanced"],
  "infrastructure": {
    "namespaces": ["communication-demo"],
    "resources": ["Pod", "ConfigMap"],
    "prerequisites": ["Understanding of IPC mechanisms"]
  },
  "solution": {
    "steps": [
      "1. Create namespace and communication pod:",
      "   kubectl create namespace communication-demo",
      "2. Create pod with multiple containers demonstrating communication patterns:",
      "   kubectl apply -f - <<EOF",
      "   apiVersion: v1",
      "   kind: Pod",
      "   metadata:",
      "     name: comm-test",
      "     namespace: communication-demo",
      "   spec:",
      "     containers:",
      "     - name: producer",
      "       image: busybox:latest",
      "       command: ['/bin/sh', '-c']",
      "       args:",
      "       - |",
      "         echo \"Producer starting...\"",
      "         i=1",
      "         while [ $i -le 100 ]; do",
      "           echo \"Message $i: $(date)\" >> /shared/data/messages.txt",
      "           echo \"Produced message $i\"",
      "           sleep 2",
      "           i=$((i+1))",
      "         done",
      "       volumeMounts:",
      "       - name: shared-data",
      "         mountPath: /shared/data",
      "       - name: socket-dir",
      "         mountPath: /tmp",
      "     - name: consumer",
      "       image: busybox:latest",
      "       command: ['/bin/sh', '-c']",
      "       args:",
      "       - |",
      "         echo \"Consumer starting HTTP server on :8080...\"",
      "         # Start simple HTTP server",
      "         while true; do",
      "           echo -e 'HTTP/1.1 200 OK\\n\\nready' | nc -l -p 8080",
      "         done &",
      "         # Process messages from shared volume",
      "         while true; do",
      "           if [ -f /shared/data/messages.txt ]; then",
      "             tail -n 1 /shared/data/messages.txt >> /shared/processed/results.txt",
      "             echo \"Processed: $(tail -n 1 /shared/data/messages.txt)\"",
      "           fi",
      "           sleep 3",
      "         done",
      "       volumeMounts:",
      "       - name: shared-data",
      "         mountPath: /shared/data",
      "       - name: processed-data",
      "         mountPath: /shared/processed",
      "       - name: socket-dir",
      "         mountPath: /tmp",
      "     - name: coordinator",
      "       image: busybox:latest",
      "       command: ['/bin/sh', '-c']",
      "       args:",
      "       - |",
      "         echo \"Coordinator starting...\"",
      "         # Create Unix socket",
      "         mkfifo /tmp/app.sock",
      "         echo \"communication established: file-based\" > /var/log/coordinator.log",
      "         sleep 5",
      "         # Test HTTP communication",
      "         if nc -z localhost 8080; then",
      "           echo \"communication established: http\" >> /var/log/coordinator.log",
      "         fi",
      "         sleep 5",
      "         # Test socket",
      "         if [ -p /tmp/app.sock ]; then",
      "           echo \"communication established: unix-socket\" >> /var/log/coordinator.log",
      "         fi",
      "         while true; do",
      "           echo \"Coordinator monitoring: $(date)\" >> /var/log/coordinator.log",
      "           sleep 30",
      "         done",
      "       volumeMounts:",
      "       - name: socket-dir",
      "         mountPath: /tmp",
      "       - name: coordinator-logs",
      "         mountPath: /var/log",
      "     volumes:",
      "     - name: shared-data",
      "       emptyDir: {}",
      "     - name: processed-data",
      "       emptyDir: {}",
      "     - name: socket-dir",
      "       emptyDir: {}",
      "     - name: coordinator-logs",
      "       emptyDir: {}",
      "   EOF",
      "3. Verify inter-container communication patterns:",
      "   kubectl exec comm-test -n communication-demo -c producer -- ls -la /shared/data/",
      "   kubectl exec comm-test -n communication-demo -c consumer -- curl -s localhost:8080",
      "   kubectl exec comm-test -n communication-demo -c coordinator -- ls -la /tmp/ | grep sock",
      "   kubectl exec comm-test -n communication-demo -c consumer -- wc -l /shared/processed/results.txt",
      "   kubectl logs comm-test -n communication-demo -c coordinator | grep 'communication established'"
    ]
  },
  "validations": [
    {
      "command": "kubectl get pod comm-test -n communication-demo -o jsonpath='{.spec.containers}' | jq length",
      "expected": "3",
      "points": 2,
      "description": "Pod has 3 containers for communication testing"
    },
    {
      "command": "kubectl exec comm-test -n communication-demo -c producer -- ls /shared/data/",
      "expected": "messages.txt",
      "points": 3,
      "description": "Producer writes data to shared volume"
    },
    {
      "command": "kubectl exec comm-test -n communication-demo -c consumer -- curl -s localhost:8080/status",
      "expected": "ready",
      "points": 3,
      "description": "Consumer responds on localhost HTTP"
    },
    {
      "command": "kubectl exec comm-test -n communication-demo -c coordinator -- ls /tmp/",
      "expected": "app.sock",
      "points": 3,
      "description": "Unix domain socket exists for communication"
    },
    {
      "command": "kubectl exec comm-test -n communication-demo -c consumer -- cat /shared/processed/results.txt | wc -l",
      "expected": "100",
      "points": 2,
      "description": "Consumer processed messages from producer"
    },
    {
      "command": "kubectl logs comm-test -n communication-demo -c coordinator | grep -c 'communication established'",
      "expected": "3",
      "points": 2,
      "description": "Coordinator established all communication channels"
    }
  ]
}