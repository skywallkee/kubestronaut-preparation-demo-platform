{
  "id": "ckad-a-054",
  "title": "Advanced Resource Sharing and Isolation",
  "description": "Design a complex multi-container pod with sophisticated ||resource sharing|| and ||isolation|| strategies. Create containers with different resource requirements that share ||CPU||, ||memory||, and ||storage|| resources efficiently while maintaining proper isolation. Implement containers with different ||QoS classes|| within the same pod, demonstrate ||cgroup|| resource limits, and show how containers can share resources while preventing resource starvation. Include scenarios with ||resource monitoring||, ||throttling||, and ||competitive resource usage|| patterns between containers.",
  "points": 13,
  "timeLimit": 27,
  "category": "Multi-Container Pods",
  "tags": ["resource-sharing", "resource-isolation", "qos", "cgroups", "resource-monitoring", "advanced"],
  "infrastructure": {
    "namespaces": ["resource-sharing"],
    "resources": ["Pod", "ConfigMap"],
    "prerequisites": ["Cluster with resource monitoring capabilities"]
  },
  "solution": {
    "steps": [
      "1. Create namespace and monitoring configuration:",
      "   kubectl create namespace resource-sharing",
      "   kubectl create configmap monitor-config -n resource-sharing --from-literal=check_interval=10 --from-literal=memory_threshold=80",
      "2. Create pod with multiple containers having different resource profiles:",
      "   kubectl apply -f - <<EOF",
      "   apiVersion: v1",
      "   kind: Pod",
      "   metadata:",
      "     name: resource-test",
      "     namespace: resource-sharing",
      "   spec:",
      "     containers:",
      "     - name: cpu-intensive",
      "       image: busybox:latest",
      "       command: ['/bin/sh', '-c']",
      "       args:",
      "       - |",
      "         echo \"CPU-intensive workload starting...\"",
      "         while true; do",
      "           # CPU intensive task",
      "           for i in $(seq 1 1000); do",
      "             echo $i > /dev/null",
      "           done",
      "           sleep 1",
      "         done",
      "       resources:",
      "         requests:",
      "           cpu: \"500m\"",
      "           memory: \"256Mi\"",
      "         limits:",
      "           cpu: \"500m\"",
      "           memory: \"256Mi\"",
      "     - name: memory-intensive",
      "       image: busybox:latest",
      "       command: ['/bin/sh', '-c']",
      "       args:",
      "       - |",
      "         echo \"Memory-intensive workload starting...\"",
      "         # Allocate and use memory",
      "         dd if=/dev/zero of=/tmp/memfile bs=1M count=512 2>/dev/null &",
      "         while true; do",
      "           echo \"Memory usage: $(cat /proc/meminfo | grep MemAvailable)\"",
      "           sleep 10",
      "         done",
      "       resources:",
      "         requests:",
      "           cpu: \"100m\"",
      "           memory: \"1Gi\"",
      "         limits:",
      "           cpu: \"200m\"",
      "           memory: \"2Gi\"",
      "     - name: background-task",
      "       image: busybox:latest",
      "       command: ['/bin/sh', '-c']",
      "       args:",
      "       - |",
      "         echo \"Background task starting (best-effort)...\"",
      "         while true; do",
      "           echo \"Background: $(date)\" >> /tmp/background.log",
      "           sleep 60",
      "         done",
      "       # No resource requests/limits for best-effort QoS",
      "     - name: monitor",
      "       image: busybox:latest",
      "       command: ['/bin/sh', '-c']",
      "       args:",
      "       - |",
      "         echo \"Resource monitor starting...\"",
      "         while true; do",
      "           echo \"=== Resource Usage $(date) ===\" >> /tmp/monitoring.log",
      "           cat /proc/meminfo | grep -E \"(MemTotal|MemAvailable|MemFree)\" >> /tmp/monitoring.log",
      "           cat /proc/loadavg >> /tmp/monitoring.log",
      "           echo \"\" >> /tmp/monitoring.log",
      "           sleep 30",
      "         done",
      "       resources:",
      "         requests:",
      "           cpu: \"50m\"",
      "           memory: \"64Mi\"",
      "         limits:",
      "           cpu: \"100m\"",
      "           memory: \"128Mi\"",
      "   EOF",
      "3. Verify resource allocation and sharing:",
      "   kubectl describe pod resource-test -n resource-sharing | grep -A10 \"Requests\"",
      "   kubectl top pod resource-test -n resource-sharing --containers",
      "   kubectl exec resource-test -n resource-sharing -c monitor -- head -20 /tmp/monitoring.log",
      "   kubectl exec resource-test -n resource-sharing -c monitor -- cat /proc/meminfo | grep MemAvailable"
    ]
  },
  "validations": [
    {
      "command": "kubectl get pod resource-test -n resource-sharing -o jsonpath='{.spec.containers[0].resources.requests.cpu}'",
      "expected": "500m",
      "points": 2,
      "description": "CPU-intensive container has CPU requests set"
    },
    {
      "command": "kubectl get pod resource-test -n resource-sharing -o jsonpath='{.spec.containers[1].resources.requests.memory}'",
      "expected": "1Gi",
      "points": 2,
      "description": "Memory-intensive container has memory requests set"
    },
    {
      "command": "kubectl get pod resource-test -n resource-sharing -o jsonpath='{.spec.containers[2].resources}'",
      "expected": "{}",
      "points": 2,
      "description": "Background container has no resource constraints (best-effort)"
    },
    {
      "command": "kubectl top pod resource-test -n resource-sharing --containers | grep cpu-intensive | awk '{print $3}'",
      "expected": "cpu-usage",
      "points": 3,
      "description": "CPU-intensive container shows resource usage"
    },
    {
      "command": "kubectl exec resource-test -n resource-sharing -c monitor -- cat /proc/meminfo | grep MemAvailable",
      "expected": "memory-info",
      "points": 2,
      "description": "Monitor container can access memory information"
    },
    {
      "command": "kubectl get pod resource-test -n resource-sharing --field-selector=status.phase=Running | wc -l",
      "expected": "2",
      "points": 2,
      "description": "Pod with resource-sharing containers is running"
    }
  ]
}