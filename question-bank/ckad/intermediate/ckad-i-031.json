{
  "id": "ckad-i-031",
  "title": "Advanced Volume Types with Container Images",
  "description": "Create a comprehensive data processing pipeline in namespace ||saturn|| using various volume types:\n\n**Custom Container Setup:**\n- Build-like deployment using ||alpine:3.18|| base\n- Install ||curl||, ||wget||, and ||jq|| in init container\n- Main application container with custom entrypoint\n- Use multi-stage approach with init and main containers\n\n**Volume Configuration:**\n- **HostPath Volume**: Mount ||/host-data|| to ||/input|| (read-only)\n- **EmptyDir Volume**: Share data between containers at ||/shared||\n- **ConfigMap Volume**: Mount processing config at ||/config||\n- **Secret Volume**: Mount credentials at ||/secrets|| (mode 0600)\n- **PVC Volume**: Store results at ||/output|| (ReadWriteOnce, 2Gi)\n\n**Processing Workflow:**\n- Init container: Download sample data to shared volume\n- Main container: Process data from input, write to output\n- Sidecar container: Monitor and log processing status\n\n**Storage Class:**\n- Create custom ||data-processing|| storage class\n- Set reclaim policy to ||Retain||\n- Configure for local provisioner\n\n**Data Pipeline:**\n- ConfigMap: Processing parameters and scripts\n- Secret: API keys and database credentials\n- Job: One-time data processing task\n- Persistent storage for results\n\n**Verification:**\n- All volume types are mounted correctly\n- Data flows through the pipeline\n- Results are persisted beyond pod lifecycle\n- Volume permissions are correctly set",
  "points": 11,
  "timeLimit": 20,
  "category": "Storage",
  "tags": [
    "volume-types",
    "container-images",
    "storage-classes",
    "persistent-volumes-claims",
    "configmaps-secrets",
    "jobs-cronjobs",
    "intermediate"
  ],
  "infrastructure": {
    "namespaces": [
      "saturn"
    ],
    "resources": [
      "jobs",
      "persistentvolumes",
      "persistentvolumeclaims",
      "storageclasses",
      "configmaps",
      "secrets"
    ],
    "prerequisites": []
  },
  "solution": {
    "steps": [
      "1. Create storage class:",
      "   cat <<EOF > data-processing-sc.yaml",
      "   apiVersion: storage.k8s.io/v1",
      "   kind: StorageClass",
      "   metadata:",
      "     name: data-processing",
      "   provisioner: kubernetes.io/no-provisioner",
      "   reclaimPolicy: Retain",
      "   volumeBindingMode: WaitForFirstConsumer",
      "   EOF",
      "2. Create PV and PVC:",
      "   cat <<EOF > storage.yaml",
      "   apiVersion: v1",
      "   kind: PersistentVolume",
      "   metadata:",
      "     name: data-output-pv",
      "   spec:",
      "     capacity:",
      "       storage: 2Gi",
      "     accessModes:",
      "     - ReadWriteOnce",
      "     storageClassName: data-processing",
      "     hostPath:",
      "       path: /mnt/data-output",
      "   ---",
      "   apiVersion: v1",
      "   kind: PersistentVolumeClaim",
      "   metadata:",
      "     name: data-output-pvc",
      "     namespace: saturn",
      "   spec:",
      "     accessModes:",
      "     - ReadWriteOnce",
      "     storageClassName: data-processing",
      "     resources:",
      "       requests:",
      "         storage: 2Gi",
      "   EOF",
      "3. Create ConfigMap and Secret:",
      "   cat <<EOF > config-secret.yaml",
      "   apiVersion: v1",
      "   kind: ConfigMap",
      "   metadata:",
      "     name: processing-config",
      "     namespace: saturn",
      "   data:",
      "     config.json: |",
      "       {",
      "         \"input_format\": \"json\",",
      "         \"output_format\": \"csv\",",
      "         \"batch_size\": 100,",
      "         \"timeout\": 300",
      "       }",
      "     process.sh: |",
      "       #!/bin/sh",
      "       echo \"Processing data from /input to /output\"",
      "       echo \"Config: $(cat /config/config.json)\"",
      "       echo \"Processed at $(date)\" > /output/result.txt",
      "       echo \"Sample data: $(cat /shared/sample.json)\" >> /output/result.txt",
      "   ---",
      "   apiVersion: v1",
      "   kind: Secret",
      "   metadata:",
      "     name: processing-secrets",
      "     namespace: saturn",
      "   type: Opaque",
      "   data:",
      "     api_key: YWJjZGVmZ2hpams=",
      "     db_password: c3VwZXJzZWNyZXQ=",
      "   EOF",
      "4. Create comprehensive Job with multiple volume types:",
      "   cat <<EOF > data-processing-job.yaml",
      "   apiVersion: batch/v1",
      "   kind: Job",
      "   metadata:",
      "     name: data-processing-job",
      "     namespace: saturn",
      "   spec:",
      "     template:",
      "       spec:",
      "         initContainers:",
      "         - name: data-downloader",
      "           image: alpine:3.18",
      "           command:",
      "           - /bin/sh",
      "           - -c",
      "           - |",
      "             apk add --no-cache curl jq",
      "             echo '{\"sample\": \"data\", \"timestamp\": \"$(date)\"}' > /shared/sample.json",
      "             echo \"Init container completed data preparation\"",
      "           volumeMounts:",
      "           - name: shared-data",
      "             mountPath: /shared",
      "         containers:",
      "         - name: processor",
      "           image: alpine:3.18",
      "           command: [\"/bin/sh\", \"/config/process.sh\"]",
      "           volumeMounts:",
      "           - name: host-input",
      "             mountPath: /input",
      "             readOnly: true",
      "           - name: shared-data",
      "             mountPath: /shared",
      "           - name: config-volume",
      "             mountPath: /config",
      "           - name: secret-volume",
      "             mountPath: /secrets",
      "             readOnly: true",
      "           - name: output-storage",
      "             mountPath: /output",
      "         - name: monitor",
      "           image: alpine:3.18",
      "           command:",
      "           - /bin/sh",
      "           - -c",
      "           - |",
      "             while true; do",
      "               if [ -f /output/result.txt ]; then",
      "                 echo \"Processing completed: $(cat /output/result.txt)\"",
      "                 break",
      "               fi",
      "               echo \"Monitoring processing status...\"",
      "               sleep 5",
      "             done",
      "           volumeMounts:",
      "           - name: output-storage",
      "             mountPath: /output",
      "             readOnly: true",
      "         volumes:",
      "         - name: host-input",
      "           hostPath:",
      "             path: /tmp",
      "             type: Directory",
      "         - name: shared-data",
      "           emptyDir: {}",
      "         - name: config-volume",
      "           configMap:",
      "             name: processing-config",
      "             defaultMode: 0755",
      "         - name: secret-volume",
      "           secret:",
      "             secretName: processing-secrets",
      "             defaultMode: 0600",
      "         - name: output-storage",
      "           persistentVolumeClaim:",
      "             claimName: data-output-pvc",
      "         restartPolicy: Never",
      "   EOF",
      "5. Apply all resources:",
      "   kubectl apply -f data-processing-sc.yaml",
      "   kubectl apply -f storage.yaml",
      "   kubectl apply -f config-secret.yaml",
      "   kubectl apply -f data-processing-job.yaml",
      "6. Wait for job completion:",
      "   kubectl wait --for=condition=complete job/data-processing-job -n saturn --timeout=120s",
      "7. Verify volume mounts and data processing:",
      "   kubectl logs job/data-processing-job -c processor -n saturn",
      "   kubectl logs job/data-processing-job -c monitor -n saturn",
      "8. Check persistent storage:",
      "   kubectl exec -n saturn job/data-processing-job -c processor -- ls -la /output/"
    ]
  },
  "validations": [
    {
      "command": "kubectl get storageclass data-processing -o jsonpath='{.reclaimPolicy}'",
      "expected": "Retain",
      "points": 1,
      "description": "StorageClass should have Retain reclaim policy"
    },
    {
      "command": "kubectl get pvc data-output-pvc -n saturn -o jsonpath='{.status.phase}'",
      "expected": "Bound",
      "points": 1,
      "description": "PVC should be bound to PV"
    },
    {
      "command": "kubectl get configmap processing-config -n saturn -o jsonpath='{.data}' | grep -c 'process.sh'",
      "expected": "1",
      "points": 1,
      "description": "ConfigMap should contain processing script"
    },
    {
      "command": "kubectl get secret processing-secrets -n saturn -o jsonpath='{.data.api_key}' | base64 -d",
      "expected": "abcdefghijk",
      "points": 1,
      "description": "Secret should contain correct API key"
    },
    {
      "command": "kubectl get job data-processing-job -n saturn -o jsonpath='{.spec.template.spec.initContainers[*].name}' | grep -c 'data-downloader'",
      "expected": "1",
      "points": 1,
      "description": "Job should have init container for data preparation"
    },
    {
      "command": "kubectl get job data-processing-job -n saturn -o jsonpath='{.spec.template.spec.containers[*].name}' | tr ' ' '\n' | wc -l",
      "expected": "2",
      "points": 1,
      "description": "Job should have 2 main containers (processor + monitor)"
    },
    {
      "command": "kubectl get job data-processing-job -n saturn -o jsonpath='{.spec.template.spec.volumes[*].name}' | tr ' ' '\n' | wc -l",
      "expected": "5",
      "points": 1,
      "description": "Job should have 5 different volume types"
    },
    {
      "command": "kubectl get job data-processing-job -n saturn -o jsonpath='{.status.conditions[0].type}'",
      "expected": "Complete",
      "points": 2,
      "description": "Job should complete successfully"
    },
    {
      "command": "kubectl logs job/data-processing-job -c processor -n saturn | grep -c 'Processing data'",
      "expected": "1",
      "points": 1,
      "description": "Processor container should execute processing script"
    },
    {
      "command": "kubectl logs job/data-processing-job -c monitor -n saturn | grep -c 'Processing completed'",
      "expected": "1",
      "points": 1,
      "description": "Monitor container should detect completion"
    }
  ]
}