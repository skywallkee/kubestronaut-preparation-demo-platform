{
  "id": "ckad-i-030",
  "title": "Complete Microservices Stack with Inter-Service Communication",
  "description": "Build a complete microservices application in namespace ||mars|| with multiple components communicating through services:\n\n**Frontend Service:**\n- Deployment: ||frontend-app||\n- Image: ||nginx:1.21||\n- Replicas: ||2||\n- Service: ||frontend-service|| on port ||80||\n- ConfigMap: Custom HTML showing \"Frontend v1.0\"\n\n**API Gateway:**\n- Deployment: ||api-gateway||\n- Image: ||nginx:alpine||\n- Replicas: ||2||\n- Service: ||api-service|| on port ||8080||\n- Proxy requests to backend services\n\n**Backend Service:**\n- Deployment: ||backend-app||\n- Image: ||busybox:1.35||\n- Command: Simple HTTP server on port ||9000||\n- Replicas: ||3||\n- Service: ||backend-service|| on port ||9000||\n\n**Database:**\n- StatefulSet: ||database||\n- Image: ||postgres:13||\n- Replicas: ||1||\n- Service: ||db-service|| on port ||5432||\n- PVC for data persistence\n\n**Inter-Service Communication:**\n- Frontend calls API Gateway\n- API Gateway routes to Backend\n- Backend connects to Database\n- Use DNS service discovery\n\n**Network Policies:**\n- Allow frontend -> api-gateway\n- Allow api-gateway -> backend\n- Allow backend -> database\n- Deny all other traffic\n\n**Health Checks:**\n- Readiness probes for all services\n- Liveness probes for long-running services\n\n**Verification:**\n- Test full request flow from frontend to database\n- Verify network policies are enforced\n- Confirm DNS resolution works between services",
  "points": 15,
  "timeLimit": 25,
  "category": "Integration",
  "tags": [
    "services",
    "dns-service-discovery",
    "network-policies",
    "configmaps-secrets",
    "persistent-volumes-claims",
    "health-probes",
    "multi-container-pods",
    "intermediate"
  ],
  "infrastructure": {
    "namespaces": [
      "mars"
    ],
    "resources": [
      "deployments",
      "statefulsets",
      "services",
      "configmaps",
      "networkpolicies",
      "persistentvolumeclaims"
    ],
    "prerequisites": []
  },
  "solution": {
    "steps": [
      "1. Create ConfigMaps for applications:",
      "   cat <<EOF > frontend-config.yaml",
      "   apiVersion: v1",
      "   kind: ConfigMap",
      "   metadata:",
      "     name: frontend-config",
      "     namespace: mars",
      "   data:",
      "     index.html: |",
      "       <!DOCTYPE html>",
      "       <html><head><title>Frontend v1.0</title></head>",
      "       <body><h1>Frontend Application v1.0</h1>",
      "       <p>API Gateway: <a href=\"/api\">Call API</a></p></body></html>",
      "   ---",
      "   apiVersion: v1",
      "   kind: ConfigMap",
      "   metadata:",
      "     name: api-gateway-config",
      "     namespace: mars",
      "   data:",
      "     nginx.conf: |",
      "       events {}",
      "       http {",
      "         upstream backend {",
      "           server backend-service:9000;",
      "         }",
      "         server {",
      "           listen 8080;",
      "           location /api/ {",
      "             proxy_pass http://backend/;",
      "           }",
      "         }",
      "       }",
      "   EOF",
      "2. Create frontend deployment and service:",
      "   cat <<EOF > frontend.yaml",
      "   apiVersion: apps/v1",
      "   kind: Deployment",
      "   metadata:",
      "     name: frontend-app",
      "     namespace: mars",
      "   spec:",
      "     replicas: 2",
      "     selector:",
      "       matchLabels:",
      "         app: frontend",
      "         tier: frontend",
      "     template:",
      "       metadata:",
      "         labels:",
      "           app: frontend",
      "           tier: frontend",
      "       spec:",
      "         containers:",
      "         - name: nginx",
      "           image: nginx:1.21",
      "           ports:",
      "           - containerPort: 80",
      "           volumeMounts:",
      "           - name: frontend-content",
      "             mountPath: /usr/share/nginx/html",
      "           readinessProbe:",
      "             httpGet:",
      "               path: /",
      "               port: 80",
      "             initialDelaySeconds: 5",
      "             periodSeconds: 5",
      "         volumes:",
      "         - name: frontend-content",
      "           configMap:",
      "             name: frontend-config",
      "   ---",
      "   apiVersion: v1",
      "   kind: Service",
      "   metadata:",
      "     name: frontend-service",
      "     namespace: mars",
      "   spec:",
      "     selector:",
      "       app: frontend",
      "     ports:",
      "     - port: 80",
      "       targetPort: 80",
      "   EOF",
      "3. Create API gateway deployment and service:",
      "   cat <<EOF > api-gateway.yaml",
      "   apiVersion: apps/v1",
      "   kind: Deployment",
      "   metadata:",
      "     name: api-gateway",
      "     namespace: mars",
      "   spec:",
      "     replicas: 2",
      "     selector:",
      "       matchLabels:",
      "         app: api-gateway",
      "         tier: gateway",
      "     template:",
      "       metadata:",
      "         labels:",
      "           app: api-gateway",
      "           tier: gateway",
      "       spec:",
      "         containers:",
      "         - name: nginx",
      "           image: nginx:alpine",
      "           ports:",
      "           - containerPort: 8080",
      "           volumeMounts:",
      "           - name: nginx-config",
      "             mountPath: /etc/nginx/nginx.conf",
      "             subPath: nginx.conf",
      "           readinessProbe:",
      "             httpGet:",
      "               path: /",
      "               port: 8080",
      "             initialDelaySeconds: 5",
      "             periodSeconds: 5",
      "         volumes:",
      "         - name: nginx-config",
      "           configMap:",
      "             name: api-gateway-config",
      "   ---",
      "   apiVersion: v1",
      "   kind: Service",
      "   metadata:",
      "     name: api-service",
      "     namespace: mars",
      "   spec:",
      "     selector:",
      "       app: api-gateway",
      "     ports:",
      "     - port: 8080",
      "       targetPort: 8080",
      "   EOF",
      "4. Create backend deployment and service:",
      "   cat <<EOF > backend.yaml",
      "   apiVersion: apps/v1",
      "   kind: Deployment",
      "   metadata:",
      "     name: backend-app",
      "     namespace: mars",
      "   spec:",
      "     replicas: 3",
      "     selector:",
      "       matchLabels:",
      "         app: backend",
      "         tier: backend",
      "     template:",
      "       metadata:",
      "         labels:",
      "           app: backend",
      "           tier: backend",
      "       spec:",
      "         containers:",
      "         - name: backend",
      "           image: busybox:1.35",
      "           command:",
      "           - /bin/sh",
      "           - -c",
      "           - |",
      "             while true; do",
      "               echo -e 'HTTP/1.1 200 OK\\r\\n\\r\\n{\"status\":\"healthy\",\"service\":\"backend\"}' | nc -l -p 9000",
      "             done",
      "           ports:",
      "           - containerPort: 9000",
      "           readinessProbe:",
      "             tcpSocket:",
      "               port: 9000",
      "             initialDelaySeconds: 5",
      "             periodSeconds: 5",
      "   ---",
      "   apiVersion: v1",
      "   kind: Service",
      "   metadata:",
      "     name: backend-service",
      "     namespace: mars",
      "   spec:",
      "     selector:",
      "       app: backend",
      "     ports:",
      "     - port: 9000",
      "       targetPort: 9000",
      "   EOF",
      "5. Create database StatefulSet and service:",
      "   cat <<EOF > database.yaml",
      "   apiVersion: apps/v1",
      "   kind: StatefulSet",
      "   metadata:",
      "     name: database",
      "     namespace: mars",
      "   spec:",
      "     serviceName: db-service",
      "     replicas: 1",
      "     selector:",
      "       matchLabels:",
      "         app: database",
      "         tier: database",
      "     template:",
      "       metadata:",
      "         labels:",
      "           app: database",
      "           tier: database",
      "       spec:",
      "         containers:",
      "         - name: postgres",
      "           image: postgres:13",
      "           ports:",
      "           - containerPort: 5432",
      "           env:",
      "           - name: POSTGRES_PASSWORD",
      "             value: dbpassword",
      "           - name: PGDATA",
      "             value: /var/lib/postgresql/data/pgdata",
      "           volumeMounts:",
      "           - name: postgres-storage",
      "             mountPath: /var/lib/postgresql/data",
      "           readinessProbe:",
      "             exec:",
      "               command:",
      "               - /bin/sh",
      "               - -c",
      "               - pg_isready -U postgres",
      "             initialDelaySeconds: 15",
      "             periodSeconds: 10",
      "           livenessProbe:",
      "             exec:",
      "               command:",
      "               - /bin/sh",
      "               - -c",
      "               - pg_isready -U postgres",
      "             initialDelaySeconds: 30",
      "             periodSeconds: 30",
      "     volumeClaimTemplates:",
      "     - metadata:",
      "         name: postgres-storage",
      "       spec:",
      "         accessModes: [\"ReadWriteOnce\"]",
      "         resources:",
      "           requests:",
      "             storage: 1Gi",
      "   ---",
      "   apiVersion: v1",
      "   kind: Service",
      "   metadata:",
      "     name: db-service",
      "     namespace: mars",
      "   spec:",
      "     selector:",
      "       app: database",
      "     ports:",
      "     - port: 5432",
      "       targetPort: 5432",
      "   EOF",
      "6. Create network policies:",
      "   cat <<EOF > network-policies.yaml",
      "   apiVersion: networking.k8s.io/v1",
      "   kind: NetworkPolicy",
      "   metadata:",
      "     name: frontend-to-gateway",
      "     namespace: mars",
      "   spec:",
      "     podSelector:",
      "       matchLabels:",
      "         tier: gateway",
      "     policyTypes:",
      "     - Ingress",
      "     ingress:",
      "     - from:",
      "       - podSelector:",
      "           matchLabels:",
      "             tier: frontend",
      "       ports:",
      "       - port: 8080",
      "   ---",
      "   apiVersion: networking.k8s.io/v1",
      "   kind: NetworkPolicy",
      "   metadata:",
      "     name: gateway-to-backend",
      "     namespace: mars",
      "   spec:",
      "     podSelector:",
      "       matchLabels:",
      "         tier: backend",
      "     policyTypes:",
      "     - Ingress",
      "     ingress:",
      "     - from:",
      "       - podSelector:",
      "           matchLabels:",
      "             tier: gateway",
      "       ports:",
      "       - port: 9000",
      "   ---",
      "   apiVersion: networking.k8s.io/v1",
      "   kind: NetworkPolicy",
      "   metadata:",
      "     name: backend-to-database",
      "     namespace: mars",
      "   spec:",
      "     podSelector:",
      "       matchLabels:",
      "         tier: database",
      "     policyTypes:",
      "     - Ingress",
      "     ingress:",
      "     - from:",
      "       - podSelector:",
      "           matchLabels:",
      "             tier: backend",
      "       ports:",
      "       - port: 5432",
      "   EOF",
      "7. Apply all resources:",
      "   kubectl apply -f frontend-config.yaml",
      "   kubectl apply -f frontend.yaml",
      "   kubectl apply -f api-gateway.yaml",
      "   kubectl apply -f backend.yaml",
      "   kubectl apply -f database.yaml",
      "   kubectl apply -f network-policies.yaml",
      "8. Wait for all services to be ready:",
      "   kubectl rollout status deployment/frontend-app -n mars",
      "   kubectl rollout status deployment/api-gateway -n mars",
      "   kubectl rollout status deployment/backend-app -n mars",
      "   kubectl rollout status statefulset/database -n mars",
      "9. Test inter-service communication:",
      "   kubectl exec -n mars deployment/frontend-app -- curl -s api-service.mars.svc.cluster.local:8080/api/",
      "10. Verify DNS resolution:",
      "    kubectl exec -n mars deployment/backend-app -- nslookup db-service.mars.svc.cluster.local"
    ]
  },
  "validations": [
    {
      "command": "kubectl get deployment frontend-app -n mars -o jsonpath='{.status.readyReplicas}'",
      "expected": "2",
      "points": 1,
      "description": "Frontend deployment should have 2 ready replicas"
    },
    {
      "command": "kubectl get deployment api-gateway -n mars -o jsonpath='{.status.readyReplicas}'",
      "expected": "2",
      "points": 1,
      "description": "API gateway deployment should have 2 ready replicas"
    },
    {
      "command": "kubectl get deployment backend-app -n mars -o jsonpath='{.status.readyReplicas}'",
      "expected": "3",
      "points": 1,
      "description": "Backend deployment should have 3 ready replicas"
    },
    {
      "command": "kubectl get statefulset database -n mars -o jsonpath='{.status.readyReplicas}'",
      "expected": "1",
      "points": 1,
      "description": "Database StatefulSet should have 1 ready replica"
    },
    {
      "command": "kubectl get service frontend-service -n mars -o jsonpath='{.spec.ports[0].port}'",
      "expected": "80",
      "points": 1,
      "description": "Frontend service should expose port 80"
    },
    {
      "command": "kubectl get service api-service -n mars -o jsonpath='{.spec.ports[0].port}'",
      "expected": "8080",
      "points": 1,
      "description": "API service should expose port 8080"
    },
    {
      "command": "kubectl get service backend-service -n mars -o jsonpath='{.spec.ports[0].port}'",
      "expected": "9000",
      "points": 1,
      "description": "Backend service should expose port 9000"
    },
    {
      "command": "kubectl get service db-service -n mars -o jsonpath='{.spec.ports[0].port}'",
      "expected": "5432",
      "points": 1,
      "description": "Database service should expose port 5432"
    },
    {
      "command": "kubectl get networkpolicy -n mars | wc -l",
      "expected": "4",
      "points": 1,
      "description": "Should have 3 network policies plus header line"
    },
    {
      "command": "kubectl get pvc -n mars -l app=database | grep -c 'postgres-storage'",
      "expected": "1",
      "points": 1,
      "description": "Database should have persistent volume claim"
    },
    {
      "command": "kubectl exec -n mars deployment/frontend-app -- curl -s frontend-service.mars.svc.cluster.local | grep -c 'Frontend v1.0'",
      "expected": "1",
      "points": 1,
      "description": "Frontend should serve custom content"
    },
    {
      "command": "kubectl exec -n mars deployment/backend-app -- nslookup db-service.mars.svc.cluster.local | grep -c 'Address:'",
      "expected": "1",
      "points": 1,
      "description": "Backend should be able to resolve database service DNS"
    },
    {
      "command": "kubectl exec -n mars deployment/frontend-app -- nslookup api-service.mars.svc.cluster.local | grep -c 'Address:'",
      "expected": "1",
      "points": 1,
      "description": "Frontend should be able to resolve API service DNS"
    },
    {
      "command": "kubectl exec -n mars deployment/api-gateway -- nslookup backend-service.mars.svc.cluster.local | grep -c 'Address:'",
      "expected": "1",
      "points": 1,
      "description": "API gateway should be able to resolve backend service DNS"
    },
    {
      "command": "kubectl get pods -n mars --field-selector=status.phase=Running | wc -l",
      "expected": "9",
      "points": 1,
      "description": "Should have 8 running pods (2+2+3+1) plus header line"
    }
  ]
}