{
  "id": "ckad-i-014",
  "title": "Application Logging and Monitoring Setup",
  "description": "Implement logging and basic monitoring for an application in namespace ||mars||:\n\n1. Create a Deployment named ||logged-app|| with:\n   - Image: ||busybox:1.35||\n   - Command that generates logs every 5 seconds: ||sh -c \"while true; do echo \\\"$(date): Application running with PID $$\\\"; sleep 5; done\"||\n   - 2 replicas\n\n2. Configure log collection:\n   - Add logging annotations for log parsing\n   - Set log level environment variable ||LOG_LEVEL|| to ||info||\n\n3. Create a monitoring sidecar container:\n   - Image: ||alpine:3.18||\n   - Command to monitor the main application: ||sh -c \"while true; do echo \\\"Monitor: Checking app health at $(date)\\\"; sleep 10; done\"||\n   - Name the sidecar container ||monitor||\n\n4. Test log aggregation by tailing logs from both containers\n\n5. Create a ConfigMap named ||log-config|| with logging configuration",
  "points": 7,
  "timeLimit": 15,
  "category": "Observability and Maintenance",
  "tags": [
    "logging-monitoring",
    "sidecar-pattern",
    "configmap",
    "deployment",
    "intermediate"
  ],
  "infrastructure": {
    "namespaces": [
      "mars"
    ],
    "resources": [
      "deployments",
      "configmaps"
    ],
    "prerequisites": []
  },
  "solution": {
    "steps": [
      "1. Create ConfigMap for logging configuration:",
      "   kubectl create configmap log-config --from-literal=log.level=info --from-literal=log.format=json -n mars",
      "2. Create deployment YAML with main and sidecar containers:",
      "   # Create multi-container deployment with logging configuration",
      "3. Apply the deployment:",
      "   kubectl apply -f logged-app-deployment.yaml -n mars",
      "4. Add logging annotations to the deployment:",
      "   kubectl annotate deployment logged-app logging.enabled=true log-format=structured -n mars",
      "5. Verify both containers are running:",
      "   kubectl get pods -n mars -l app=logged-app",
      "6. Test log collection from main container:",
      "   kubectl logs -n mars deployment/logged-app -c logged-app",
      "7. Test log collection from sidecar:",
      "   kubectl logs -n mars deployment/logged-app -c monitor"
    ]
  },
  "validations": [
    {
      "command": "kubectl get configmap log-config -n mars -o jsonpath='{.data.log\\.level}'",
      "expected": "info",
      "points": 1,
      "description": "ConfigMap should contain log level configuration"
    },
    {
      "command": "kubectl get deployment logged-app -n mars -o jsonpath='{.spec.replicas}'",
      "expected": "2",
      "points": 1,
      "description": "Deployment should have 2 replicas"
    },
    {
      "command": "kubectl get deployment logged-app -n mars -o jsonpath='{.spec.template.spec.containers[0].env[?(@.name==\"LOG_LEVEL\")].value}'",
      "expected": "info",
      "points": 1,
      "description": "Main container should have LOG_LEVEL environment variable"
    },
    {
      "command": "kubectl get deployment logged-app -n mars -o jsonpath='{.spec.template.spec.containers[1].name}'",
      "expected": "monitor",
      "points": 1,
      "description": "Sidecar container should be named 'monitor'"
    },
    {
      "command": "kubectl get deployment logged-app -n mars -o jsonpath='{.spec.template.spec.containers[1].image}'",
      "expected": "alpine:3.18",
      "points": 1,
      "description": "Sidecar container should use alpine:3.18 image"
    },
    {
      "command": "kubectl get deployment logged-app -n mars -o jsonpath='{.metadata.annotations.logging\\.enabled}'",
      "expected": "true",
      "points": 1,
      "description": "Deployment should have logging annotation enabled"
    },
    {
      "command": "kubectl logs -n mars deployment/logged-app -c logged-app --tail=1 | grep -E 'Application running'",
      "expected": ".*Application running.*",
      "points": 1,
      "description": "Main container should be generating application logs"
    }
  ]
}