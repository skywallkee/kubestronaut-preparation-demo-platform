{
  "id": "ckad-i-009",
  "title": "Rolling Updates and Rollbacks",
  "description": "Create and manage a rolling update scenario in namespace ||pluto||:\n\n**1. Initial Deployment named ||rolling-app||:**\n- Image: ||nginx:1.20||\n- Replicas: ||4||\n- Rolling update strategy with:\n  - Max unavailable: ||1||\n  - Max surge: ||1||\n- Record the deployment for rollback tracking\n\n**2. Perform Rolling Update:**\n- Update image to ||nginx:1.21||\n- Use ||--record|| flag to track the change\n- Wait for rollout to complete\n\n**3. Simulate Problem and Rollback:**\n- Update image to ||nginx:1.22||\n- Immediately rollback to the previous version (1.21)\n- Verify the rollback was successful\n\n**4. Check Rollout History:**\n- View deployment rollout history\n- Confirm current image version is ||nginx:1.21||",
  "points": 8,
  "timeLimit": 15,
  "category": "Deployments",
  "tags": [
    "rolling-update",
    "rollback",
    "deployment",
    "rollout-history",
    "intermediate"
  ],
  "infrastructure": {
    "namespaces": [
      "pluto"
    ],
    "resources": [
      "deployments"
    ],
    "prerequisites": []
  },
  "solution": {
    "steps": [
      "1. Create initial deployment:",
      "   kubectl create deployment rolling-app --image=nginx:1.20 --replicas=4 -n pluto",
      "2. Configure rolling update strategy:",
      "   kubectl patch deployment rolling-app -n pluto -p '{\"spec\":{\"strategy\":{\"type\":\"RollingUpdate\",\"rollingUpdate\":{\"maxUnavailable\":1,\"maxSurge\":1}}}}'",
      "3. Record initial deployment:",
      "   kubectl annotate deployment rolling-app -n pluto deployment.kubernetes.io/revision=1",
      "4. Perform first rolling update:",
      "   kubectl set image deployment/rolling-app nginx=nginx:1.21 -n pluto --record",
      "5. Wait for rollout to complete:",
      "   kubectl rollout status deployment/rolling-app -n pluto",
      "6. Update to problematic version:",
      "   kubectl set image deployment/rolling-app nginx=nginx:1.22 -n pluto --record",
      "7. Rollback to previous version:",
      "   kubectl rollout undo deployment/rolling-app -n pluto",
      "8. Wait for rollback to complete:",
      "   kubectl rollout status deployment/rolling-app -n pluto",
      "9. Check rollout history:",
      "   kubectl rollout history deployment/rolling-app -n pluto",
      "10. Verify current image version:",
      "    kubectl get deployment rolling-app -n pluto -o jsonpath='{.spec.template.spec.containers[0].image}'"
    ]
  },
  "validations": [
    {
      "command": "kubectl get deployment rolling-app -n pluto -o jsonpath='{.spec.replicas}'",
      "expected": "4",
      "points": 1,
      "description": "Deployment should have 4 replicas"
    },
    {
      "command": "kubectl get deployment rolling-app -n pluto -o jsonpath='{.spec.strategy.rollingUpdate.maxUnavailable}'",
      "expected": "1",
      "points": 1,
      "description": "Max unavailable should be 1"
    },
    {
      "command": "kubectl get deployment rolling-app -n pluto -o jsonpath='{.spec.strategy.rollingUpdate.maxSurge}'",
      "expected": "1",
      "points": 1,
      "description": "Max surge should be 1"
    },
    {
      "command": "kubectl get deployment rolling-app -n pluto -o jsonpath='{.spec.template.spec.containers[0].image}'",
      "expected": "nginx:1.21",
      "points": 2,
      "description": "Final image should be nginx:1.21 after rollback"
    },
    {
      "command": "kubectl rollout history deployment/rolling-app -n pluto --output=json | jq '.items | length'",
      "expected": "3",
      "points": 1,
      "description": "Should have 3 revisions in history"
    },
    {
      "command": "kubectl get deployment rolling-app -n pluto -o jsonpath='{.status.readyReplicas}'",
      "expected": "4",
      "points": 1,
      "description": "All replicas should be ready"
    },
    {
      "command": "kubectl get deployment rolling-app -n pluto -o jsonpath='{.status.updatedReplicas}'",
      "expected": "4",
      "points": 1,
      "description": "All replicas should be updated"
    }
  ]
}