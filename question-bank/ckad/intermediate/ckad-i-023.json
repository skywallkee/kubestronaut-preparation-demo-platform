{
  "id": "ckad-i-023",
  "title": "Service Accounts and RBAC with Network Policies",
  "description": "Create a secure microservice setup in namespace ||saturn|| with proper authentication and network isolation:\n\n**Service Account & RBAC:**\n- Service account: ||api-service-account||\n- Role: ||api-role|| with permissions to ||get||, ||list|| pods and services\n- RoleBinding: ||api-binding|| linking the role to service account\n\n**Application Deployment:**\n- Name: ||secure-api||\n- Image: ||nginx:1.21||\n- Use the custom service account\n- Add label ||tier: api|| for network policy targeting\n- Replicas: ||2||\n\n**Database Deployment:**\n- Name: ||database||\n- Image: ||postgres:13||\n- Add label ||tier: database||\n- Environment: ||POSTGRES_PASSWORD|| = ||secretpass||\n- Replicas: ||1||\n\n**Network Policies:**\n- Policy 1: ||api-ingress|| - Allow ingress to api pods from any source on port 80\n- Policy 2: ||database-access|| - Allow ingress to database pods only from api pods on port 5432\n- Policy 3: ||deny-all-egress|| - Deny all egress from database pods except DNS\n\n**Services:**\n- ||api-service||: ClusterIP for secure-api on port 80\n- ||db-service||: ClusterIP for database on port 5432\n\nVerify RBAC permissions and network policy enforcement.",
  "points": 12,
  "timeLimit": 20,
  "category": "Security",
  "tags": [
    "service-accounts-rbac",
    "network-policies",
    "security-contexts",
    "services",
    "intermediate"
  ],
  "infrastructure": {
    "namespaces": [
      "saturn"
    ],
    "resources": [
      "serviceaccounts",
      "roles",
      "rolebindings",
      "deployments",
      "services",
      "networkpolicies"
    ],
    "prerequisites": []
  },
  "solution": {
    "steps": [
      "1. Create Service Account and RBAC:",
      "   kubectl create serviceaccount api-service-account -n saturn",
      "   cat <<EOF > api-rbac.yaml",
      "   apiVersion: rbac.authorization.k8s.io/v1",
      "   kind: Role",
      "   metadata:",
      "     name: api-role",
      "     namespace: saturn",
      "   rules:",
      "   - apiGroups: [\"\"]",
      "     resources: [\"pods\", \"services\"]",
      "     verbs: [\"get\", \"list\"]",
      "   ---",
      "   apiVersion: rbac.authorization.k8s.io/v1",
      "   kind: RoleBinding",
      "   metadata:",
      "     name: api-binding",
      "     namespace: saturn",
      "   subjects:",
      "   - kind: ServiceAccount",
      "     name: api-service-account",
      "     namespace: saturn",
      "   roleRef:",
      "     kind: Role",
      "     name: api-role",
      "     apiGroup: rbac.authorization.k8s.io",
      "   EOF",
      "2. Create application deployments:",
      "   cat <<EOF > deployments.yaml",
      "   apiVersion: apps/v1",
      "   kind: Deployment",
      "   metadata:",
      "     name: secure-api",
      "     namespace: saturn",
      "   spec:",
      "     replicas: 2",
      "     selector:",
      "       matchLabels:",
      "         app: secure-api",
      "         tier: api",
      "     template:",
      "       metadata:",
      "         labels:",
      "           app: secure-api",
      "           tier: api",
      "       spec:",
      "         serviceAccountName: api-service-account",
      "         containers:",
      "         - name: nginx",
      "           image: nginx:1.21",
      "           ports:",
      "           - containerPort: 80",
      "   ---",
      "   apiVersion: apps/v1",
      "   kind: Deployment",
      "   metadata:",
      "     name: database",
      "     namespace: saturn",
      "   spec:",
      "     replicas: 1",
      "     selector:",
      "       matchLabels:",
      "         app: database",
      "         tier: database",
      "     template:",
      "       metadata:",
      "         labels:",
      "           app: database",
      "           tier: database",
      "       spec:",
      "         containers:",
      "         - name: postgres",
      "           image: postgres:13",
      "           env:",
      "           - name: POSTGRES_PASSWORD",
      "             value: secretpass",
      "           ports:",
      "           - containerPort: 5432",
      "   EOF",
      "3. Create services:",
      "   kubectl expose deployment secure-api --port=80 --name=api-service -n saturn",
      "   kubectl expose deployment database --port=5432 --name=db-service -n saturn",
      "4. Create Network Policies:",
      "   cat <<EOF > network-policies.yaml",
      "   apiVersion: networking.k8s.io/v1",
      "   kind: NetworkPolicy",
      "   metadata:",
      "     name: api-ingress",
      "     namespace: saturn",
      "   spec:",
      "     podSelector:",
      "       matchLabels:",
      "         tier: api",
      "     policyTypes:",
      "     - Ingress",
      "     ingress:",
      "     - ports:",
      "       - port: 80",
      "   ---",
      "   apiVersion: networking.k8s.io/v1",
      "   kind: NetworkPolicy",
      "   metadata:",
      "     name: database-access",
      "     namespace: saturn",
      "   spec:",
      "     podSelector:",
      "       matchLabels:",
      "         tier: database",
      "     policyTypes:",
      "     - Ingress",
      "     ingress:",
      "     - from:",
      "       - podSelector:",
      "           matchLabels:",
      "             tier: api",
      "       ports:",
      "       - port: 5432",
      "   ---",
      "   apiVersion: networking.k8s.io/v1",
      "   kind: NetworkPolicy",
      "   metadata:",
      "     name: deny-all-egress",
      "     namespace: saturn",
      "   spec:",
      "     podSelector:",
      "       matchLabels:",
      "         tier: database",
      "     policyTypes:",
      "     - Egress",
      "     egress:",
      "     - to: []",
      "       ports:",
      "       - port: 53",
      "         protocol: UDP",
      "       - port: 53",
      "         protocol: TCP",
      "   EOF",
      "5. Apply all resources:",
      "   kubectl apply -f api-rbac.yaml",
      "   kubectl apply -f deployments.yaml",
      "   kubectl apply -f network-policies.yaml",
      "6. Wait for deployments:",
      "   kubectl rollout status deployment/secure-api -n saturn",
      "   kubectl rollout status deployment/database -n saturn",
      "7. Test RBAC permissions:",
      "   kubectl auth can-i get pods --as=system:serviceaccount:saturn:api-service-account -n saturn"
    ]
  },
  "validations": [
    {
      "command": "kubectl get serviceaccount api-service-account -n saturn -o jsonpath='{.metadata.name}'",
      "expected": "api-service-account",
      "points": 1,
      "description": "Service account should be created"
    },
    {
      "command": "kubectl get role api-role -n saturn -o jsonpath='{.rules[0].verbs}' | grep -c 'get'",
      "expected": "1",
      "points": 1,
      "description": "Role should have get permission for pods and services"
    },
    {
      "command": "kubectl get rolebinding api-binding -n saturn -o jsonpath='{.subjects[0].name}'",
      "expected": "api-service-account",
      "points": 1,
      "description": "RoleBinding should link to correct service account"
    },
    {
      "command": "kubectl get deployment secure-api -n saturn -o jsonpath='{.spec.template.spec.serviceAccountName}'",
      "expected": "api-service-account",
      "points": 1,
      "description": "Deployment should use the custom service account"
    },
    {
      "command": "kubectl get deployment secure-api -n saturn -o jsonpath='{.spec.template.metadata.labels.tier}'",
      "expected": "api",
      "points": 1,
      "description": "API deployment should have correct tier label"
    },
    {
      "command": "kubectl get deployment database -n saturn -o jsonpath='{.spec.template.metadata.labels.tier}'",
      "expected": "database",
      "points": 1,
      "description": "Database deployment should have correct tier label"
    },
    {
      "command": "kubectl get service api-service -n saturn -o jsonpath='{.spec.ports[0].port}'",
      "expected": "80",
      "points": 1,
      "description": "API service should expose port 80"
    },
    {
      "command": "kubectl get service db-service -n saturn -o jsonpath='{.spec.ports[0].port}'",
      "expected": "5432",
      "points": 1,
      "description": "Database service should expose port 5432"
    },
    {
      "command": "kubectl get networkpolicy api-ingress -n saturn -o jsonpath='{.spec.podSelector.matchLabels.tier}'",
      "expected": "api",
      "points": 1,
      "description": "API ingress network policy should target api tier"
    },
    {
      "command": "kubectl get networkpolicy database-access -n saturn -o jsonpath='{.spec.ingress[0].from[0].podSelector.matchLabels.tier}'",
      "expected": "api",
      "points": 1,
      "description": "Database access policy should allow ingress from api tier"
    },
    {
      "command": "kubectl get networkpolicy deny-all-egress -n saturn -o jsonpath='{.spec.podSelector.matchLabels.tier}'",
      "expected": "database",
      "points": 1,
      "description": "Egress denial policy should target database tier"
    },
    {
      "command": "kubectl auth can-i get pods --as=system:serviceaccount:saturn:api-service-account -n saturn && echo 'yes' || echo 'no'",
      "expected": "yes",
      "points": 1,
      "description": "Service account should have permission to get pods"
    }
  ]
}