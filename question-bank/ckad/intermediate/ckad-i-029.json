{
  "id": "ckad-i-029",
  "title": "Security Contexts with Resource Limits",
  "description": "Create a secure application deployment in namespace ||pluto|| with comprehensive security and resource management:\n\n**Security Requirements:**\n- Run containers as non-root user (UID ||1001||)\n- Set security context to read-only root filesystem\n- Drop all capabilities except ||NET_BIND_SERVICE||\n- Disable privilege escalation\n- Set fsGroup to ||2000|| for volume permissions\n\n**Resource Management:**\n- CPU requests: ||100m||, limits: ||300m||\n- Memory requests: ||128Mi||, limits: ||512Mi||\n- Ephemeral storage requests: ||500Mi||, limits: ||1Gi||\n\n**Application Setup:**\n- Deployment name: ||secure-web||\n- Image: ||nginx:1.21-alpine||\n- Replicas: ||3||\n- Container port: ||8080|| (non-privileged port)\n\n**Volume Configuration:**\n- EmptyDir volume for temp data at ||/tmp||\n- ConfigMap volume for nginx config at ||/etc/nginx/conf.d||\n- Both mounted with appropriate security contexts\n\n**Service Account:**\n- Name: ||secure-web-sa||\n- Automount service account token: ||false||\n- Use in deployment for additional security\n\n**ConfigMap:**\n- Name: ||nginx-secure-config||\n- Configure nginx to run on port 8080\n- Set appropriate worker processes and security headers\n\n**Verification Tasks:**\n- Confirm containers run as non-root\n- Verify read-only filesystem (except allowed mounts)\n- Test resource limits are enforced\n- Check security context is applied correctly",
  "points": 12,
  "timeLimit": 18,
  "category": "Security",
  "tags": [
    "security-contexts",
    "resource-management",
    "service-accounts-rbac",
    "configmaps-secrets",
    "volume-types",
    "intermediate"
  ],
  "infrastructure": {
    "namespaces": [
      "pluto"
    ],
    "resources": [
      "deployments",
      "serviceaccounts",
      "configmaps"
    ],
    "prerequisites": []
  },
  "solution": {
    "steps": [
      "1. Create service account:",
      "   cat <<EOF > secure-web-sa.yaml",
      "   apiVersion: v1",
      "   kind: ServiceAccount",
      "   metadata:",
      "     name: secure-web-sa",
      "     namespace: pluto",
      "   automountServiceAccountToken: false",
      "   EOF",
      "2. Create nginx configuration:",
      "   cat <<EOF > nginx-secure-config.yaml",
      "   apiVersion: v1",
      "   kind: ConfigMap",
      "   metadata:",
      "     name: nginx-secure-config",
      "     namespace: pluto",
      "   data:",
      "     default.conf: |",
      "       server {",
      "         listen 8080;",
      "         server_name localhost;",
      "         add_header X-Frame-Options \"DENY\";",
      "         add_header X-Content-Type-Options \"nosniff\";",
      "         add_header X-XSS-Protection \"1; mode=block\";",
      "         location / {",
      "           root /usr/share/nginx/html;",
      "           index index.html;",
      "         }",
      "       }",
      "   EOF",
      "3. Create secure deployment:",
      "   cat <<EOF > secure-web-deployment.yaml",
      "   apiVersion: apps/v1",
      "   kind: Deployment",
      "   metadata:",
      "     name: secure-web",
      "     namespace: pluto",
      "   spec:",
      "     replicas: 3",
      "     selector:",
      "       matchLabels:",
      "         app: secure-web",
      "     template:",
      "       metadata:",
      "         labels:",
      "           app: secure-web",
      "       spec:",
      "         serviceAccountName: secure-web-sa",
      "         securityContext:",
      "           runAsNonRoot: true",
      "           runAsUser: 1001",
      "           fsGroup: 2000",
      "         containers:",
      "         - name: nginx",
      "           image: nginx:1.21-alpine",
      "           ports:",
      "           - containerPort: 8080",
      "           securityContext:",
      "             allowPrivilegeEscalation: false",
      "             readOnlyRootFilesystem: true",
      "             runAsNonRoot: true",
      "             runAsUser: 1001",
      "             capabilities:",
      "               drop:",
      "               - ALL",
      "               add:",
      "               - NET_BIND_SERVICE",
      "           resources:",
      "             requests:",
      "               cpu: 100m",
      "               memory: 128Mi",
      "               ephemeral-storage: 500Mi",
      "             limits:",
      "               cpu: 300m",
      "               memory: 512Mi",
      "               ephemeral-storage: 1Gi",
      "           volumeMounts:",
      "           - name: nginx-config",
      "             mountPath: /etc/nginx/conf.d",
      "             readOnly: true",
      "           - name: tmp-volume",
      "             mountPath: /tmp",
      "           - name: nginx-cache",
      "             mountPath: /var/cache/nginx",
      "           - name: nginx-run",
      "             mountPath: /var/run",
      "         volumes:",
      "         - name: nginx-config",
      "           configMap:",
      "             name: nginx-secure-config",
      "         - name: tmp-volume",
      "           emptyDir: {}",
      "         - name: nginx-cache",
      "           emptyDir: {}",
      "         - name: nginx-run",
      "           emptyDir: {}",
      "   EOF",
      "4. Apply all resources:",
      "   kubectl apply -f secure-web-sa.yaml",
      "   kubectl apply -f nginx-secure-config.yaml",
      "   kubectl apply -f secure-web-deployment.yaml",
      "5. Wait for deployment:",
      "   kubectl rollout status deployment/secure-web -n pluto --timeout=120s",
      "6. Verify security context:",
      "   kubectl exec -n pluto deployment/secure-web -- id",
      "7. Test read-only filesystem:",
      "   kubectl exec -n pluto deployment/secure-web -- touch /test.txt || echo 'Read-only filesystem working'",
      "8. Check writable volumes:",
      "   kubectl exec -n pluto deployment/secure-web -- touch /tmp/test.txt && echo 'Temp volume writable'",
      "9. Verify resource limits:",
      "   kubectl describe pod -l app=secure-web -n pluto | grep -A 10 'Limits'"
    ]
  },
  "validations": [
    {
      "command": "kubectl get serviceaccount secure-web-sa -n pluto -o jsonpath='{.automountServiceAccountToken}'",
      "expected": "false",
      "points": 1,
      "description": "Service account should not automount token"
    },
    {
      "command": "kubectl get deployment secure-web -n pluto -o jsonpath='{.spec.template.spec.securityContext.runAsUser}'",
      "expected": "1001",
      "points": 1,
      "description": "Pod should run as user 1001"
    },
    {
      "command": "kubectl get deployment secure-web -n pluto -o jsonpath='{.spec.template.spec.securityContext.fsGroup}'",
      "expected": "2000",
      "points": 1,
      "description": "Pod should have fsGroup set to 2000"
    },
    {
      "command": "kubectl get deployment secure-web -n pluto -o jsonpath='{.spec.template.spec.containers[0].securityContext.readOnlyRootFilesystem}'",
      "expected": "true",
      "points": 1,
      "description": "Container should have read-only root filesystem"
    },
    {
      "command": "kubectl get deployment secure-web -n pluto -o jsonpath='{.spec.template.spec.containers[0].securityContext.allowPrivilegeEscalation}'",
      "expected": "false",
      "points": 1,
      "description": "Container should not allow privilege escalation"
    },
    {
      "command": "kubectl get deployment secure-web -n pluto -o jsonpath='{.spec.template.spec.containers[0].resources.requests.cpu}'",
      "expected": "100m",
      "points": 1,
      "description": "Container should have correct CPU request"
    },
    {
      "command": "kubectl get deployment secure-web -n pluto -o jsonpath='{.spec.template.spec.containers[0].resources.limits.memory}'",
      "expected": "512Mi",
      "points": 1,
      "description": "Container should have correct memory limit"
    },
    {
      "command": "kubectl get deployment secure-web -n pluto -o jsonpath='{.spec.template.spec.containers[0].resources.limits.ephemeral-storage}'",
      "expected": "1Gi",
      "points": 1,
      "description": "Container should have ephemeral storage limit"
    },
    {
      "command": "kubectl exec -n pluto deployment/secure-web -- id -u",
      "expected": "1001",
      "points": 1,
      "description": "Process should run as UID 1001"
    },
    {
      "command": "kubectl exec -n pluto deployment/secure-web -- sh -c 'touch /test.txt 2>&1' | grep -c 'Read-only file system'",
      "expected": "1",
      "points": 1,
      "description": "Root filesystem should be read-only"
    },
    {
      "command": "kubectl exec -n pluto deployment/secure-web -- touch /tmp/test.txt && echo 'success' || echo 'failed'",
      "expected": "success",
      "points": 1,
      "description": "Tmp volume should be writable"
    },
    {
      "command": "kubectl get deployment secure-web -n pluto -o jsonpath='{.status.readyReplicas}'",
      "expected": "3",
      "points": 1,
      "description": "All replicas should be ready with security constraints"
    }
  ]
}