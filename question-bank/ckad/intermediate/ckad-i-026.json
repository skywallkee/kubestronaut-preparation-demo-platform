{
  "id": "ckad-i-026",
  "title": "Container Images with Custom Build",
  "description": "Create a custom container image workflow in namespace ||mars||:\n\n**Custom Dockerfile Content:**\nCreate a simple web application that serves content on port ||8080||\n\n**Dockerfile Requirements:**\n- Base image: ||alpine:3.18||\n- Install ||curl|| and ||nginx||\n- Copy custom HTML content: ||Welcome to Custom App v1.0||\n- Expose port ||8080||\n- Set working directory to ||/app||\n- Add health check command: ||curl -f http://localhost:8080 || exit 1||\n\n**Deployment Configuration:**\n- Name: ||custom-app||\n- Use the custom image (simulate with ||nginx:alpine||)\n- Replicas: ||2||\n- Custom command: ||nginx -g 'daemon off;'||\n- Environment variable ||APP_VERSION|| = ||1.0||\n- Mount custom config at ||/etc/nginx/conf.d/default.conf||\n\n**Service and Ingress:**\n- Service: ||custom-app-service|| on port ||8080||\n- Ingress: ||custom-app-ingress|| with path ||/custom||\n- Add TLS with secret ||custom-tls-secret||\n\n**ConfigMap:**\n- Name: ||nginx-custom-config||\n- Configure nginx to listen on port 8080\n- Add custom response headers\n\nTest the deployment and verify custom configuration works.",
  "points": 8,
  "timeLimit": 14,
  "category": "Application Design",
  "tags": [
    "container-images",
    "configmaps-secrets",
    "ingress",
    "services",
    "intermediate"
  ],
  "infrastructure": {
    "namespaces": [
      "mars"
    ],
    "resources": [
      "deployments",
      "services",
      "ingresses",
      "configmaps",
      "secrets"
    ],
    "prerequisites": [
      "ingress-controller"
    ]
  },
  "solution": {
    "steps": [
      "1. Create Dockerfile content (for reference):",
      "   cat <<EOF > Dockerfile",
      "   FROM alpine:3.18",
      "   RUN apk add --no-cache curl nginx",
      "   WORKDIR /app",
      "   COPY index.html /usr/share/nginx/html/",
      "   EXPOSE 8080",
      "   HEALTHCHECK --interval=30s --timeout=3s \\",
      "     CMD curl -f http://localhost:8080 || exit 1",
      "   CMD [\"nginx\", \"-g\", \"daemon off;\"]",
      "   EOF",
      "2. Create custom nginx ConfigMap:",
      "   cat <<EOF > nginx-custom-config.yaml",
      "   apiVersion: v1",
      "   kind: ConfigMap",
      "   metadata:",
      "     name: nginx-custom-config",
      "     namespace: mars",
      "   data:",
      "     default.conf: |",
      "       server {",
      "         listen 8080;",
      "         server_name localhost;",
      "         add_header X-App-Version \"1.0\";",
      "         add_header X-Custom-Header \"Custom App\";",
      "         location / {",
      "           root /usr/share/nginx/html;",
      "           index index.html;",
      "         }",
      "       }",
      "   EOF",
      "3. Create TLS secret for ingress:",
      "   kubectl create secret tls custom-tls-secret -n mars \\",
      "     --cert=/dev/null --key=/dev/null --dry-run=client -o yaml | \\",
      "     sed 's/tls.crt: .*/tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0t/' | \\",
      "     sed 's/tls.key: .*/tls.key: LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0t/' | \\",
      "     kubectl apply -f -",
      "4. Create custom application deployment:",
      "   cat <<EOF > custom-app-deployment.yaml",
      "   apiVersion: apps/v1",
      "   kind: Deployment",
      "   metadata:",
      "     name: custom-app",
      "     namespace: mars",
      "   spec:",
      "     replicas: 2",
      "     selector:",
      "       matchLabels:",
      "         app: custom-app",
      "     template:",
      "       metadata:",
      "         labels:",
      "           app: custom-app",
      "       spec:",
      "         containers:",
      "         - name: nginx",
      "           image: nginx:alpine",
      "           command: [\"nginx\", \"-g\", \"daemon off;\"]",
      "           ports:",
      "           - containerPort: 8080",
      "           env:",
      "           - name: APP_VERSION",
      "             value: \"1.0\"",
      "           volumeMounts:",
      "           - name: nginx-config",
      "             mountPath: /etc/nginx/conf.d/default.conf",
      "             subPath: default.conf",
      "         volumes:",
      "         - name: nginx-config",
      "           configMap:",
      "             name: nginx-custom-config",
      "   EOF",
      "5. Create service:",
      "   cat <<EOF > custom-app-service.yaml",
      "   apiVersion: v1",
      "   kind: Service",
      "   metadata:",
      "     name: custom-app-service",
      "     namespace: mars",
      "   spec:",
      "     selector:",
      "       app: custom-app",
      "     ports:",
      "     - port: 8080",
      "       targetPort: 8080",
      "   EOF",
      "6. Create ingress with TLS:",
      "   cat <<EOF > custom-app-ingress.yaml",
      "   apiVersion: networking.k8s.io/v1",
      "   kind: Ingress",
      "   metadata:",
      "     name: custom-app-ingress",
      "     namespace: mars",
      "   spec:",
      "     tls:",
      "     - hosts:",
      "       - custom-app.local",
      "       secretName: custom-tls-secret",
      "     rules:",
      "     - host: custom-app.local",
      "       http:",
      "         paths:",
      "         - path: /custom",
      "           pathType: Prefix",
      "           backend:",
      "             service:",
      "               name: custom-app-service",
      "               port:",
      "                 number: 8080",
      "   EOF",
      "7. Apply all resources:",
      "   kubectl apply -f nginx-custom-config.yaml",
      "   kubectl apply -f custom-app-deployment.yaml",
      "   kubectl apply -f custom-app-service.yaml",
      "   kubectl apply -f custom-app-ingress.yaml",
      "8. Wait for deployment:",
      "   kubectl rollout status deployment/custom-app -n mars",
      "9. Test the application:",
      "   kubectl exec -n mars deployment/custom-app -- curl -I localhost:8080"
    ]
  },
  "validations": [
    {
      "command": "kubectl get configmap nginx-custom-config -n mars -o jsonpath='{.data.default\\.conf}' | grep -c '8080'",
      "expected": "1",
      "points": 1,
      "description": "ConfigMap should configure nginx to listen on port 8080"
    },
    {
      "command": "kubectl get secret custom-tls-secret -n mars -o jsonpath='{.type}'",
      "expected": "kubernetes.io/tls",
      "points": 1,
      "description": "TLS secret should be created for ingress"
    },
    {
      "command": "kubectl get deployment custom-app -n mars -o jsonpath='{.spec.template.spec.containers[0].env[0].value}'",
      "expected": "1.0",
      "points": 1,
      "description": "Deployment should have APP_VERSION environment variable"
    },
    {
      "command": "kubectl get deployment custom-app -n mars -o jsonpath='{.spec.template.spec.containers[0].ports[0].containerPort}'",
      "expected": "8080",
      "points": 1,
      "description": "Container should expose port 8080"
    },
    {
      "command": "kubectl get service custom-app-service -n mars -o jsonpath='{.spec.ports[0].port}'",
      "expected": "8080",
      "points": 1,
      "description": "Service should expose port 8080"
    },
    {
      "command": "kubectl get ingress custom-app-ingress -n mars -o jsonpath='{.spec.rules[0].http.paths[0].path}'",
      "expected": "/custom",
      "points": 1,
      "description": "Ingress should have /custom path"
    },
    {
      "command": "kubectl get ingress custom-app-ingress -n mars -o jsonpath='{.spec.tls[0].secretName}'",
      "expected": "custom-tls-secret",
      "points": 1,
      "description": "Ingress should reference TLS secret"
    },
    {
      "command": "kubectl get deployment custom-app -n mars -o jsonpath='{.status.readyReplicas}'",
      "expected": "2",
      "points": 1,
      "description": "All deployment replicas should be ready"
    }
  ]
}