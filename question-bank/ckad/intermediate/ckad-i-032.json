{
  "id": "ckad-i-032",
  "title": "Application Scaling with Network Policies and DNS",
  "description": "Build an auto-scaling web application in namespace ||venus|| with network security and service discovery:\n\n**Web Application Stack:**\n- Frontend Deployment: ||web-frontend|| (nginx:1.21, 2 replicas initially)\n- API Deployment: ||web-api|| (nginx:alpine, 3 replicas initially)\n- Cache Deployment: ||redis-cache|| (redis:7-alpine, 1 replica)\n\n**Auto-Scaling Configuration:**\n- HPA for frontend: min ||2||, max ||8||, CPU target ||60%||\n- HPA for API: min ||3||, max ||12||, CPU target ||70%||\n- Resource requests: CPU ||150m||, Memory ||128Mi||\n- Resource limits: CPU ||300m||, Memory ||256Mi||\n\n**Service Discovery Setup:**\n- Frontend service: ||frontend-svc|| (ClusterIP, port 80)\n- API service: ||api-svc|| (ClusterIP, port 8080)\n- Cache service: ||cache-svc|| (ClusterIP, port 6379)\n- Headless service for API: ||api-headless|| for load balancing\n\n**Network Policies:**\n- **Policy 1**: Allow frontend -> API (port 8080)\n- **Policy 2**: Allow API -> Cache (port 6379)\n- **Policy 3**: Deny all other inter-pod communication\n- **Policy 4**: Allow external ingress to frontend (port 80)\n\n**DNS Configuration:**\n- Configure frontend to discover API via ||api-svc.venus.svc.cluster.local||\n- Configure API to discover cache via ||cache-svc.venus.svc.cluster.local||\n- Test service resolution from each tier\n\n**Load Testing:**\n- Create load generator to trigger scaling\n- Monitor HPA behavior and scaling events\n- Verify network policies don't block legitimate traffic\n\n**Advanced Features:**\n- Custom nginx config for service discovery\n- Health checks for all components\n- Resource quotas for the namespace",
  "points": 13,
  "timeLimit": 22,
  "category": "Application Deployment",
  "tags": [
    "application-scaling",
    "network-policies",
    "dns-service-discovery",
    "services",
    "resource-management",
    "health-probes",
    "configmaps-secrets",
    "intermediate"
  ],
  "infrastructure": {
    "namespaces": [
      "venus"
    ],
    "resources": [
      "deployments",
      "services",
      "horizontalpodautoscalers",
      "networkpolicies",
      "resourcequotas",
      "configmaps"
    ],
    "prerequisites": [
      "metrics-server"
    ]
  },
  "solution": {
    "steps": [
      "1. Create namespace resource quota:",
      "   cat <<EOF > venus-resources.yaml",
      "   apiVersion: v1",
      "   kind: ResourceQuota",
      "   metadata:",
      "     name: venus-quota",
      "     namespace: venus",
      "   spec:",
      "     hard:",
      "       requests.cpu: \"4\"",
      "       requests.memory: 8Gi",
      "       limits.cpu: \"8\"",
      "       limits.memory: 16Gi",
      "       pods: \"30\"",
      "   EOF",
      "2. Create configuration for service discovery:",
      "   cat <<EOF > service-configs.yaml",
      "   apiVersion: v1",
      "   kind: ConfigMap",
      "   metadata:",
      "     name: frontend-config",
      "     namespace: venus",
      "   data:",
      "     nginx.conf: |",
      "       events {}",
      "       http {",
      "         upstream api_backend {",
      "           server api-svc.venus.svc.cluster.local:8080;",
      "         }",
      "         server {",
      "           listen 80;",
      "           location /api/ {",
      "             proxy_pass http://api_backend/;",
      "           }",
      "           location / {",
      "             root /usr/share/nginx/html;",
      "             index index.html;",
      "           }",
      "         }",
      "       }",
      "   ---",
      "   apiVersion: v1",
      "   kind: ConfigMap",
      "   metadata:",
      "     name: api-config",
      "     namespace: venus",
      "   data:",
      "     nginx.conf: |",
      "       events {}",
      "       http {",
      "         upstream cache_backend {",
      "           server cache-svc.venus.svc.cluster.local:6379;",
      "         }",
      "         server {",
      "           listen 8080;",
      "           location /cache-check {",
      "             proxy_pass http://cache_backend/;",
      "           }",
      "           location / {",
      "             return 200 '{\"status\":\"healthy\",\"service\":\"api\"}';",
      "             add_header Content-Type application/json;",
      "           }",
      "         }",
      "       }",
      "   EOF",
      "3. Create deployments with resource specifications:",
      "   cat <<EOF > deployments.yaml",
      "   apiVersion: apps/v1",
      "   kind: Deployment",
      "   metadata:",
      "     name: web-frontend",
      "     namespace: venus",
      "   spec:",
      "     replicas: 2",
      "     selector:",
      "       matchLabels:",
      "         app: frontend",
      "         tier: frontend",
      "     template:",
      "       metadata:",
      "         labels:",
      "           app: frontend",
      "           tier: frontend",
      "       spec:",
      "         containers:",
      "         - name: nginx",
      "           image: nginx:1.21",
      "           ports:",
      "           - containerPort: 80",
      "           resources:",
      "             requests:",
      "               cpu: 150m",
      "               memory: 128Mi",
      "             limits:",
      "               cpu: 300m",
      "               memory: 256Mi",
      "           volumeMounts:",
      "           - name: config",
      "             mountPath: /etc/nginx/nginx.conf",
      "             subPath: nginx.conf",
      "           readinessProbe:",
      "             httpGet:",
      "               path: /",
      "               port: 80",
      "             initialDelaySeconds: 5",
      "             periodSeconds: 5",
      "         volumes:",
      "         - name: config",
      "           configMap:",
      "             name: frontend-config",
      "   ---",
      "   apiVersion: apps/v1",
      "   kind: Deployment",
      "   metadata:",
      "     name: web-api",
      "     namespace: venus",
      "   spec:",
      "     replicas: 3",
      "     selector:",
      "       matchLabels:",
      "         app: api",
      "         tier: api",
      "     template:",
      "       metadata:",
      "         labels:",
      "           app: api",
      "           tier: api",
      "       spec:",
      "         containers:",
      "         - name: nginx",
      "           image: nginx:alpine",
      "           ports:",
      "           - containerPort: 8080",
      "           resources:",
      "             requests:",
      "               cpu: 150m",
      "               memory: 128Mi",
      "             limits:",
      "               cpu: 300m",
      "               memory: 256Mi",
      "           volumeMounts:",
      "           - name: config",
      "             mountPath: /etc/nginx/nginx.conf",
      "             subPath: nginx.conf",
      "           readinessProbe:",
      "             httpGet:",
      "               path: /",
      "               port: 8080",
      "             initialDelaySeconds: 5",
      "             periodSeconds: 5",
      "         volumes:",
      "         - name: config",
      "           configMap:",
      "             name: api-config",
      "   ---",
      "   apiVersion: apps/v1",
      "   kind: Deployment",
      "   metadata:",
      "     name: redis-cache",
      "     namespace: venus",
      "   spec:",
      "     replicas: 1",
      "     selector:",
      "       matchLabels:",
      "         app: cache",
      "         tier: cache",
      "     template:",
      "       metadata:",
      "         labels:",
      "           app: cache",
      "           tier: cache",
      "       spec:",
      "         containers:",
      "         - name: redis",
      "           image: redis:7-alpine",
      "           ports:",
      "           - containerPort: 6379",
      "           resources:",
      "             requests:",
      "               cpu: 100m",
      "               memory: 64Mi",
      "             limits:",
      "               cpu: 200m",
      "               memory: 128Mi",
      "           readinessProbe:",
      "             tcpSocket:",
      "               port: 6379",
      "             initialDelaySeconds: 5",
      "             periodSeconds: 5",
      "   EOF",
      "4. Create services including headless service:",
      "   cat <<EOF > services.yaml",
      "   apiVersion: v1",
      "   kind: Service",
      "   metadata:",
      "     name: frontend-svc",
      "     namespace: venus",
      "   spec:",
      "     selector:",
      "       app: frontend",
      "     ports:",
      "     - port: 80",
      "       targetPort: 80",
      "   ---",
      "   apiVersion: v1",
      "   kind: Service",
      "   metadata:",
      "     name: api-svc",
      "     namespace: venus",
      "   spec:",
      "     selector:",
      "       app: api",
      "     ports:",
      "     - port: 8080",
      "       targetPort: 8080",
      "   ---",
      "   apiVersion: v1",
      "   kind: Service",
      "   metadata:",
      "     name: api-headless",
      "     namespace: venus",
      "   spec:",
      "     clusterIP: None",
      "     selector:",
      "       app: api",
      "     ports:",
      "     - port: 8080",
      "       targetPort: 8080",
      "   ---",
      "   apiVersion: v1",
      "   kind: Service",
      "   metadata:",
      "     name: cache-svc",
      "     namespace: venus",
      "   spec:",
      "     selector:",
      "       app: cache",
      "     ports:",
      "     - port: 6379",
      "       targetPort: 6379",
      "   EOF",
      "5. Create HPA configurations:",
      "   cat <<EOF > hpa.yaml",
      "   apiVersion: autoscaling/v2",
      "   kind: HorizontalPodAutoscaler",
      "   metadata:",
      "     name: frontend-hpa",
      "     namespace: venus",
      "   spec:",
      "     scaleTargetRef:",
      "       apiVersion: apps/v1",
      "       kind: Deployment",
      "       name: web-frontend",
      "     minReplicas: 2",
      "     maxReplicas: 8",
      "     metrics:",
      "     - type: Resource",
      "       resource:",
      "         name: cpu",
      "         target:",
      "           type: Utilization",
      "           averageUtilization: 60",
      "   ---",
      "   apiVersion: autoscaling/v2",
      "   kind: HorizontalPodAutoscaler",
      "   metadata:",
      "     name: api-hpa",
      "     namespace: venus",
      "   spec:",
      "     scaleTargetRef:",
      "       apiVersion: apps/v1",
      "       kind: Deployment",
      "       name: web-api",
      "     minReplicas: 3",
      "     maxReplicas: 12",
      "     metrics:",
      "     - type: Resource",
      "       resource:",
      "         name: cpu",
      "         target:",
      "           type: Utilization",
      "           averageUtilization: 70",
      "   EOF",
      "6. Create network policies:",
      "   cat <<EOF > network-policies.yaml",
      "   apiVersion: networking.k8s.io/v1",
      "   kind: NetworkPolicy",
      "   metadata:",
      "     name: frontend-to-api",
      "     namespace: venus",
      "   spec:",
      "     podSelector:",
      "       matchLabels:",
      "         tier: api",
      "     policyTypes:",
      "     - Ingress",
      "     ingress:",
      "     - from:",
      "       - podSelector:",
      "           matchLabels:",
      "             tier: frontend",
      "       ports:",
      "       - port: 8080",
      "   ---",
      "   apiVersion: networking.k8s.io/v1",
      "   kind: NetworkPolicy",
      "   metadata:",
      "     name: api-to-cache",
      "     namespace: venus",
      "   spec:",
      "     podSelector:",
      "       matchLabels:",
      "         tier: cache",
      "     policyTypes:",
      "     - Ingress",
      "     ingress:",
      "     - from:",
      "       - podSelector:",
      "           matchLabels:",
      "             tier: api",
      "       ports:",
      "       - port: 6379",
      "   ---",
      "   apiVersion: networking.k8s.io/v1",
      "   kind: NetworkPolicy",
      "   metadata:",
      "     name: external-to-frontend",
      "     namespace: venus",
      "   spec:",
      "     podSelector:",
      "       matchLabels:",
      "         tier: frontend",
      "     policyTypes:",
      "     - Ingress",
      "     ingress:",
      "     - ports:",
      "       - port: 80",
      "   EOF",
      "7. Apply all resources:",
      "   kubectl apply -f venus-resources.yaml",
      "   kubectl apply -f service-configs.yaml",
      "   kubectl apply -f deployments.yaml",
      "   kubectl apply -f services.yaml",
      "   kubectl apply -f hpa.yaml",
      "   kubectl apply -f network-policies.yaml",
      "8. Wait for deployments:",
      "   kubectl rollout status deployment/web-frontend -n venus",
      "   kubectl rollout status deployment/web-api -n venus",
      "   kubectl rollout status deployment/redis-cache -n venus",
      "9. Test DNS resolution:",
      "   kubectl exec -n venus deployment/web-frontend -- nslookup api-svc.venus.svc.cluster.local",
      "   kubectl exec -n venus deployment/web-api -- nslookup cache-svc.venus.svc.cluster.local",
      "10. Create load generator to test scaling:",
      "    kubectl run load-generator --image=busybox -n venus --rm -it --restart=Never -- /bin/sh -c 'while true; do wget -q -O- http://frontend-svc.venus.svc.cluster.local; done'"
    ]
  },
  "validations": [
    {
      "command": "kubectl get resourcequota venus-quota -n venus -o jsonpath='{.spec.hard.requests\\.cpu}'",
      "expected": "4",
      "points": 1,
      "description": "ResourceQuota should limit CPU requests"
    },
    {
      "command": "kubectl get deployment web-frontend -n venus -o jsonpath='{.status.readyReplicas}'",
      "expected": "2",
      "points": 1,
      "description": "Frontend deployment should have 2 ready replicas"
    },
    {
      "command": "kubectl get deployment web-api -n venus -o jsonpath='{.status.readyReplicas}'",
      "expected": "3",
      "points": 1,
      "description": "API deployment should have 3 ready replicas"
    },
    {
      "command": "kubectl get service api-headless -n venus -o jsonpath='{.spec.clusterIP}'",
      "expected": "None",
      "points": 1,
      "description": "API headless service should have no cluster IP"
    },
    {
      "command": "kubectl get hpa frontend-hpa -n venus -o jsonpath='{.spec.maxReplicas}'",
      "expected": "8",
      "points": 1,
      "description": "Frontend HPA should have max 8 replicas"
    },
    {
      "command": "kubectl get hpa api-hpa -n venus -o jsonpath='{.spec.maxReplicas}'",
      "expected": "12",
      "points": 1,
      "description": "API HPA should have max 12 replicas"
    },
    {
      "command": "kubectl get hpa frontend-hpa -n venus -o jsonpath='{.spec.metrics[0].resource.target.averageUtilization}'",
      "expected": "60",
      "points": 1,
      "description": "Frontend HPA should target 60% CPU utilization"
    },
    {
      "command": "kubectl get networkpolicy -n venus | wc -l",
      "expected": "4",
      "points": 1,
      "description": "Should have 3 network policies plus header"
    },
    {
      "command": "kubectl get networkpolicy frontend-to-api -n venus -o jsonpath='{.spec.ingress[0].from[0].podSelector.matchLabels.tier}'",
      "expected": "frontend",
      "points": 1,
      "description": "Network policy should allow frontend to API"
    },
    {
      "command": "kubectl exec -n venus deployment/web-frontend -- nslookup api-svc.venus.svc.cluster.local | grep -c 'Address:'",
      "expected": "1",
      "points": 1,
      "description": "Frontend should resolve API service DNS"
    },
    {
      "command": "kubectl exec -n venus deployment/web-api -- nslookup cache-svc.venus.svc.cluster.local | grep -c 'Address:'",
      "expected": "1",
      "points": 1,
      "description": "API should resolve cache service DNS"
    },
    {
      "command": "kubectl get deployment web-frontend -n venus -o jsonpath='{.spec.template.spec.containers[0].resources.requests.cpu}'",
      "expected": "150m",
      "points": 1,
      "description": "Frontend deployment should have correct CPU request"
    },
    {
      "command": "kubectl get deployment redis-cache -n venus -o jsonpath='{.status.readyReplicas}'",
      "expected": "1",
      "points": 1,
      "description": "Cache deployment should have 1 ready replica"
    }
  ]
}