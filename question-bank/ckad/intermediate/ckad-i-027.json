{
  "id": "ckad-i-027",
  "title": "Helm Package Management with Dependencies",
  "description": "Create and deploy a Helm chart in namespace ||saturn|| with dependencies and custom values:\n\n**Chart Structure:**\n- Chart name: ||web-stack||\n- Version: ||1.0.0||\n- App version: ||1.0||\n- Description: ||A complete web application stack||\n\n**Dependencies:**\n- Add a dependency on a database subchart\n- Configure values for the dependency\n\n**Templates to Create:**\n- Deployment template for web application\n- Service template for load balancing\n- ConfigMap template for application configuration\n- Secret template for database credentials\n\n**Custom Values:**\n- Web app image: ||nginx:1.21||\n- Replica count: ||3||\n- Service type: ||ClusterIP||\n- Database password: ||secretpassword|| (in secret)\n- App environment: ||staging||\n\n**Installation Requirements:**\n- Install chart with custom values\n- Override default replica count to ||2||\n- Set environment to ||production||\n- Create release name ||web-stack-release||\n\n**Chart Testing:**\n- Create Helm tests to verify deployment\n- Test service connectivity\n- Verify configuration is applied correctly\n\nCreate the complete Helm chart structure and deploy it successfully.",
  "points": 11,
  "timeLimit": 20,
  "category": "Application Deployment",
  "tags": [
    "helm-package-manager",
    "configmaps-secrets",
    "deployments-rolling-updates",
    "services",
    "intermediate"
  ],
  "infrastructure": {
    "namespaces": [
      "saturn"
    ],
    "resources": [
      "deployments",
      "services",
      "configmaps",
      "secrets"
    ],
    "prerequisites": [
      "helm"
    ]
  },
  "solution": {
    "steps": [
      "1. Create Helm chart structure:",
      "   helm create web-stack",
      "   cd web-stack",
      "2. Update Chart.yaml:",
      "   cat <<EOF > Chart.yaml",
      "   apiVersion: v2",
      "   name: web-stack",
      "   description: A complete web application stack",
      "   type: application",
      "   version: 1.0.0",
      "   appVersion: \"1.0\"",
      "   EOF",
      "3. Create values.yaml:",
      "   cat <<EOF > values.yaml",
      "   replicaCount: 3",
      "   image:",
      "     repository: nginx",
      "     tag: \"1.21\"",
      "     pullPolicy: IfNotPresent",
      "   service:",
      "     type: ClusterIP",
      "     port: 80",
      "   app:",
      "     environment: staging",
      "   database:",
      "     password: secretpassword",
      "   EOF",
      "4. Create deployment template:",
      "   cat <<EOF > templates/deployment.yaml",
      "   apiVersion: apps/v1",
      "   kind: Deployment",
      "   metadata:",
      "     name: {{ include \"web-stack.fullname\" . }}",
      "     namespace: {{ .Release.Namespace }}",
      "   spec:",
      "     replicas: {{ .Values.replicaCount }}",
      "     selector:",
      "       matchLabels:",
      "         app: {{ include \"web-stack.name\" . }}",
      "     template:",
      "       metadata:",
      "         labels:",
      "           app: {{ include \"web-stack.name\" . }}",
      "       spec:",
      "         containers:",
      "         - name: {{ .Chart.Name }}",
      "           image: \"{{ .Values.image.repository }}:{{ .Values.image.tag }}\"",
      "           ports:",
      "           - containerPort: 80",
      "           env:",
      "           - name: ENVIRONMENT",
      "             valueFrom:",
      "               configMapKeyRef:",
      "                 name: {{ include \"web-stack.fullname\" . }}-config",
      "                 key: environment",
      "           - name: DB_PASSWORD",
      "             valueFrom:",
      "               secretKeyRef:",
      "                 name: {{ include \"web-stack.fullname\" . }}-secret",
      "                 key: database-password",
      "   EOF",
      "5. Create service template:",
      "   cat <<EOF > templates/service.yaml",
      "   apiVersion: v1",
      "   kind: Service",
      "   metadata:",
      "     name: {{ include \"web-stack.fullname\" . }}",
      "     namespace: {{ .Release.Namespace }}",
      "   spec:",
      "     type: {{ .Values.service.type }}",
      "     ports:",
      "     - port: {{ .Values.service.port }}",
      "       targetPort: 80",
      "     selector:",
      "       app: {{ include \"web-stack.name\" . }}",
      "   EOF",
      "6. Create configmap template:",
      "   cat <<EOF > templates/configmap.yaml",
      "   apiVersion: v1",
      "   kind: ConfigMap",
      "   metadata:",
      "     name: {{ include \"web-stack.fullname\" . }}-config",
      "     namespace: {{ .Release.Namespace }}",
      "   data:",
      "     environment: {{ .Values.app.environment | quote }}",
      "   EOF",
      "7. Create secret template:",
      "   cat <<EOF > templates/secret.yaml",
      "   apiVersion: v1",
      "   kind: Secret",
      "   metadata:",
      "     name: {{ include \"web-stack.fullname\" . }}-secret",
      "     namespace: {{ .Release.Namespace }}",
      "   type: Opaque",
      "   data:",
      "     database-password: {{ .Values.database.password | b64enc | quote }}",
      "   EOF",
      "8. Create test template:",
      "   mkdir -p templates/tests",
      "   cat <<EOF > templates/tests/test-connection.yaml",
      "   apiVersion: v1",
      "   kind: Pod",
      "   metadata:",
      "     name: \"{{ include \"web-stack.fullname\" . }}-test\"",
      "     annotations:",
      "       \"helm.sh/hook\": test",
      "   spec:",
      "     restartPolicy: Never",
      "     containers:",
      "     - name: wget",
      "       image: busybox",
      "       command: ['wget']",
      "       args: ['{{ include \"web-stack.fullname\" . }}:{{ .Values.service.port }}']",
      "   EOF",
      "9. Install chart with custom values:",
      "   helm install web-stack-release . -n saturn \\",
      "     --set replicaCount=2 \\",
      "     --set app.environment=production",
      "10. Verify installation:",
      "    helm list -n saturn",
      "    kubectl get all -n saturn",
      "11. Run Helm tests:",
      "    helm test web-stack-release -n saturn"
    ]
  },
  "validations": [
    {
      "command": "helm list -n saturn -o json | jq -r '.[0].name' 2>/dev/null || echo 'none'",
      "expected": "web-stack-release",
      "points": 1,
      "description": "Helm release should be installed with correct name"
    },
    {
      "command": "kubectl get deployment -n saturn -l app.kubernetes.io/managed-by=Helm -o jsonpath='{.items[0].spec.replicas}'",
      "expected": "2",
      "points": 1,
      "description": "Deployment should have 2 replicas as overridden in values"
    },
    {
      "command": "kubectl get configmap -n saturn -l app.kubernetes.io/managed-by=Helm -o jsonpath='{.items[0].data.environment}'",
      "expected": "production",
      "points": 1,
      "description": "ConfigMap should contain production environment"
    },
    {
      "command": "kubectl get secret -n saturn -l app.kubernetes.io/managed-by=Helm -o jsonpath='{.items[0].data.database-password}' | base64 -d",
      "expected": "secretpassword",
      "points": 1,
      "description": "Secret should contain correct database password"
    },
    {
      "command": "kubectl get service -n saturn -l app.kubernetes.io/managed-by=Helm -o jsonpath='{.items[0].spec.type}'",
      "expected": "ClusterIP",
      "points": 1,
      "description": "Service should be of type ClusterIP"
    },
    {
      "command": "kubectl get deployment -n saturn -l app.kubernetes.io/managed-by=Helm -o jsonpath='{.items[0].spec.template.spec.containers[0].image}'",
      "expected": "nginx:1.21",
      "points": 1,
      "description": "Deployment should use correct nginx image"
    },
    {
      "command": "helm get values web-stack-release -n saturn | grep -c 'production'",
      "expected": "1",
      "points": 1,
      "description": "Helm values should contain production environment override"
    },
    {
      "command": "kubectl get deployment -n saturn -l app.kubernetes.io/managed-by=Helm -o jsonpath='{.items[0].status.readyReplicas}'",
      "expected": "2",
      "points": 2,
      "description": "All deployment replicas should be ready"
    },
    {
      "command": "helm status web-stack-release -n saturn | grep -c 'STATUS: deployed'",
      "expected": "1",
      "points": 1,
      "description": "Helm release should be successfully deployed"
    },
    {
      "command": "kubectl get pod -n saturn -l 'helm.sh/hook=test' --field-selector=status.phase=Succeeded | wc -l",
      "expected": "1",
      "points": 1,
      "description": "Helm test should pass successfully"
    }
  ]
}