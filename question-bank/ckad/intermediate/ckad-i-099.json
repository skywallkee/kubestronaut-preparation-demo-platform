{
  "id": "ckad-i-099",
  "title": "Cross-Namespace RBAC with Resource Quotas",
  "description": "Create a ServiceAccount named ||quota-manager|| in namespace ||resource-control|| with permissions to manage ResourceQuotas and LimitRanges across multiple namespaces. Create ClusterRole that allows quota management in namespaces with label ||quota-managed=true||.",
  "points": 10,
  "timeLimit": 20,
  "category": "Application Environment, Configuration and Security",
  "tags": [
    "rbac",
    "resource-quotas",
    "cross-namespace",
    "label-selectors",
    "intermediate"
  ],
  "infrastructure": {
    "namespaces": [
      "resource-control",
      "managed-ns-1",
      "managed-ns-2"
    ],
    "resources": [
      "serviceaccounts",
      "clusterroles",
      "clusterrolebindings",
      "resourcequotas",
      "limitranges"
    ],
    "prerequisites": [
      "kubectl label namespace managed-ns-1 quota-managed=true",
      "kubectl label namespace managed-ns-2 quota-managed=true"
    ]
  },
  "solution": {
    "steps": [
      "1. Create ServiceAccount:",
      "   kubectl create serviceaccount quota-manager -n resource-control",
      "2. Create ClusterRole for quota management:",
      "   cat > quota-manager-clusterrole.yaml << EOF",
      "apiVersion: rbac.authorization.k8s.io/v1",
      "kind: ClusterRole",
      "metadata:",
      "  name: quota-manager",
      "rules:",
      "- apiGroups: [\"\"]",
      "  resources: [\"resourcequotas\", \"limitranges\"]",
      "  verbs: [\"get\", \"list\", \"create\", \"update\", \"patch\", \"delete\"]",
      "- apiGroups: [\"\"]",
      "  resources: [\"namespaces\"]",
      "  verbs: [\"get\", \"list\", \"watch\"]",
      "- apiGroups: [\"\"]",
      "  resources: [\"pods\", \"services\", \"persistentvolumeclaims\"]",
      "  verbs: [\"get\", \"list\", \"watch\"]",
      "- apiGroups: [\"apps\"]",
      "  resources: [\"deployments\", \"replicasets\", \"statefulsets\"]",
      "  verbs: [\"get\", \"list\", \"watch\"]",
      "- apiGroups: [\"metrics.k8s.io\"]",
      "  resources: [\"nodes\", \"pods\"]",
      "  verbs: [\"get\", \"list\"]",
      "EOF",
      "3. Create ClusterRoleBinding:",
      "   kubectl create clusterrolebinding quota-manager-binding --clusterrole=quota-manager --serviceaccount=resource-control:quota-manager",
      "4. Create sample ResourceQuota for managed namespaces:",
      "   cat > sample-quota.yaml << EOF",
      "apiVersion: v1",
      "kind: ResourceQuota",
      "metadata:",
      "  name: managed-quota",
      "  namespace: managed-ns-1",
      "spec:",
      "  hard:",
      "    requests.cpu: \"2\"",
      "    requests.memory: 4Gi",
      "    limits.cpu: \"4\"",
      "    limits.memory: 8Gi",
      "    pods: \"10\"",
      "    services: \"5\"",
      "---",
      "apiVersion: v1",
      "kind: LimitRange",
      "metadata:",
      "  name: managed-limits",
      "  namespace: managed-ns-1",
      "spec:",
      "  limits:",
      "  - default:",
      "      cpu: 200m",
      "      memory: 256Mi",
      "    defaultRequest:",
      "      cpu: 100m",
      "      memory: 128Mi",
      "    type: Container",
      "EOF",
      "5. Apply all resources:",
      "   kubectl apply -f quota-manager-clusterrole.yaml",
      "   kubectl apply -f sample-quota.yaml"
    ]
  },
  "validations": [
    {
      "command": "kubectl get serviceaccount quota-manager -n resource-control -o jsonpath='{.metadata.name}'",
      "expected": "quota-manager",
      "points": 2,
      "description": "ServiceAccount should exist"
    },
    {
      "command": "kubectl get clusterrole quota-manager -o jsonpath='{.rules[0].resources}' | grep -c resourcequotas",
      "expected": "1",
      "points": 3,
      "description": "ClusterRole should manage resource quotas"
    },
    {
      "command": "kubectl get namespace managed-ns-1 -o jsonpath='{.metadata.labels.quota-managed}'",
      "expected": "true",
      "points": 2,
      "description": "Managed namespace should have correct label"
    },
    {
      "command": "kubectl get resourcequota managed-quota -n managed-ns-1 -o jsonpath='{.spec.hard.requests\\.cpu}'",
      "expected": "2",
      "points": 3,
      "description": "ResourceQuota should be created in managed namespace"
    }
  ]
}