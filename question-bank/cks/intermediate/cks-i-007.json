{
  "id": "cks-i-007",
  "title": "Supply Chain Security and Image Scanning",
  "description": "Implement supply chain security with image scanning and vulnerability assessment:\n\n1. Set up automated image vulnerability scanning using Trivy in ||pluto|| namespace\n2. Create a CronJob named ||image-scanner|| that:\n   - Runs ||aquasec/trivy:latest|| image\n   - Scans container images in the cluster for vulnerabilities\n   - Runs every ||30 minutes|| (||*/30 * * * *||)\n   - Outputs results to a persistent volume\n\n3. Configure image admission controller to reject images with:\n   - ||HIGH|| or ||CRITICAL|| vulnerabilities\n   - Images without valid signatures\n   - Images older than ||90 days||\n\n4. Create a deployment named ||secure-supply-chain|| that:\n   - Uses a recent, signed image: ||nginx:1.25-alpine||\n   - Includes supply chain security labels\n   - Has proper resource quotas and security context\n\n5. Test the scanning system by checking a known vulnerable image\n6. Generate a software bill of materials (SBOM) for the deployment",
  "points": 10,
  "timeLimit": 20,
  "category": "Supply Chain Security",
  "tags": [
    "supply-chain",
    "image-scanning",
    "vulnerability-assessment",
    "sbom",
    "trivy",
    "admission-controller",
    "intermediate"
  ],
  "infrastructure": {
    "namespaces": [
      "pluto"
    ],
    "resources": [
      "cronjobs",
      "deployments",
      "persistentvolumeclaims",
      "configmaps"
    ],
    "prerequisites": [
      "Persistent volume support",
      "Image scanning tools available"
    ]
  },
  "solution": {
    "steps": [
      "1. Create PVC for scan results:",
      "   cat > scan-results-pvc.yaml << EOF",
      "   apiVersion: v1",
      "   kind: PersistentVolumeClaim",
      "   metadata:",
      "     name: scan-results",
      "     namespace: pluto",
      "   spec:",
      "     accessModes:",
      "     - ReadWriteOnce",
      "     resources:",
      "       requests:",
      "         storage: 1Gi",
      "   EOF",
      "2. Apply PVC:",
      "   kubectl apply -f scan-results-pvc.yaml",
      "3. Create image scanner CronJob:",
      "   cat > image-scanner-cronjob.yaml << EOF",
      "   apiVersion: batch/v1",
      "   kind: CronJob",
      "   metadata:",
      "     name: image-scanner",
      "     namespace: pluto",
      "   spec:",
      "     schedule: '*/30 * * * *'",
      "     jobTemplate:",
      "       spec:",
      "         template:",
      "           spec:",
      "             restartPolicy: OnFailure",
      "             securityContext:",
      "               runAsNonRoot: true",
      "               runAsUser: 1000",
      "               fsGroup: 1000",
      "             containers:",
      "             - name: trivy-scanner",
      "               image: aquasec/trivy:latest",
      "               command:",
      "               - /bin/sh",
      "               - -c",
      "               - |",
      "                 echo 'Starting vulnerability scan at' \\$(date)",
      "                 trivy image --format json --output /results/scan-\\$(date +%Y%m%d-%H%M).json nginx:latest",
      "                 trivy image --severity HIGH,CRITICAL nginx:latest > /results/critical-\\$(date +%Y%m%d-%H%M).txt",
      "                 echo 'Scan completed at' \\$(date)",
      "               volumeMounts:",
      "               - name: scan-results",
      "                 mountPath: /results",
      "               securityContext:",
      "                 allowPrivilegeEscalation: false",
      "                 readOnlyRootFilesystem: true",
      "                 capabilities:",
      "                   drop:",
      "                   - ALL",
      "               resources:",
      "                 limits:",
      "                   cpu: 500m",
      "                   memory: 512Mi",
      "                 requests:",
      "                   cpu: 100m",
      "                   memory: 128Mi",
      "             volumes:",
      "             - name: scan-results",
      "               persistentVolumeClaim:",
      "                 claimName: scan-results",
      "   EOF",
      "4. Apply the CronJob:",
      "   kubectl apply -f image-scanner-cronjob.yaml",
      "5. Create image policy for admission control:",
      "   cat > image-admission-policy.yaml << EOF",
      "   apiVersion: v1",
      "   kind: ConfigMap",
      "   metadata:",
      "     name: image-admission-policy",
      "     namespace: pluto",
      "   data:",
      "     policy.yaml: |",
      "       imagePolicy:",
      "         rules:",
      "         - name: reject-high-vulnerabilities",
      "           action: reject",
      "           conditions:",
      "           - vulnerabilities:",
      "               severity: ['HIGH', 'CRITICAL']",
      "         - name: require-recent-images",
      "           action: reject",
      "           conditions:",
      "           - age: '90d'",
      "         - name: require-signatures",
      "           action: warn",
      "           conditions:",
      "           - signature: false",
      "   EOF",
      "6. Apply image policy:",
      "   kubectl apply -f image-admission-policy.yaml",
      "7. Create secure supply chain deployment:",
      "   cat > secure-supply-chain.yaml << EOF",
      "   apiVersion: apps/v1",
      "   kind: Deployment",
      "   metadata:",
      "     name: secure-supply-chain",
      "     namespace: pluto",
      "     labels:",
      "       security.scan: enabled",
      "       supply-chain.verified: true",
      "   spec:",
      "     replicas: 2",
      "     selector:",
      "       matchLabels:",
      "         app: secure-supply-chain",
      "     template:",
      "       metadata:",
      "         labels:",
      "           app: secure-supply-chain",
      "           security.scan: enabled",
      "           supply-chain.verified: true",
      "         annotations:",
      "           security.scan.last: '$(date -Iseconds)'",
      "           supply-chain.image: 'nginx:1.25-alpine'",
      "       spec:",
      "         securityContext:",
      "           runAsNonRoot: true",
      "           runAsUser: 101",
      "           fsGroup: 101",
      "         containers:",
      "         - name: nginx",
      "           image: nginx:1.25-alpine",
      "           imagePullPolicy: Always",
      "           ports:",
      "           - containerPort: 8080",
      "           securityContext:",
      "             allowPrivilegeEscalation: false",
      "             readOnlyRootFilesystem: true",
      "             capabilities:",
      "               drop:",
      "               - ALL",
      "           resources:",
      "             limits:",
      "               cpu: 200m",
      "               memory: 256Mi",
      "             requests:",
      "               cpu: 100m",
      "               memory: 128Mi",
      "           volumeMounts:",
      "           - name: nginx-cache",
      "             mountPath: /var/cache/nginx",
      "           - name: nginx-run",
      "             mountPath: /var/run",
      "         volumes:",
      "         - name: nginx-cache",
      "           emptyDir: {}",
      "         - name: nginx-run",
      "           emptyDir: {}",
      "   EOF",
      "8. Apply secure deployment:",
      "   kubectl apply -f secure-supply-chain.yaml",
      "9. Create SBOM generation job:",
      "   kubectl create job sbom-generator --image=aquasec/trivy:latest \\",
      "     --dry-run=client -o yaml > sbom-job.yaml",
      "   echo '        - trivy image --format spdx-json nginx:1.25-alpine' >> sbom-job.yaml",
      "10. Verify scanner is working:",
      "    kubectl get cronjob image-scanner -n pluto",
      "    kubectl get deployment secure-supply-chain -n pluto"
    ]
  },
  "validations": [
    {
      "command": "kubectl get pvc scan-results -n pluto -o jsonpath='{.metadata.name}'",
      "expected": "scan-results",
      "points": 1,
      "description": "PVC for scan results should exist"
    },
    {
      "command": "kubectl get cronjob image-scanner -n pluto -o jsonpath='{.metadata.name}'",
      "expected": "image-scanner",
      "points": 2,
      "description": "Image scanner CronJob should exist"
    },
    {
      "command": "kubectl get cronjob image-scanner -n pluto -o jsonpath='{.spec.schedule}'",
      "expected": "*/30 * * * *",
      "points": 1,
      "description": "CronJob should run every 30 minutes"
    },
    {
      "command": "kubectl get configmap image-admission-policy -n pluto -o jsonpath='{.metadata.name}'",
      "expected": "image-admission-policy",
      "points": 1,
      "description": "Image admission policy should exist"
    },
    {
      "command": "kubectl get deployment secure-supply-chain -n pluto -o jsonpath='{.metadata.name}'",
      "expected": "secure-supply-chain",
      "points": 2,
      "description": "Secure supply chain deployment should exist"
    },
    {
      "command": "kubectl get deployment secure-supply-chain -n pluto -o jsonpath='{.metadata.labels.supply-chain\\.verified}'",
      "expected": "true",
      "points": 1,
      "description": "Deployment should have supply-chain.verified label"
    },
    {
      "command": "kubectl get deployment secure-supply-chain -n pluto -o jsonpath='{.spec.template.spec.containers[0].image}'",
      "expected": "nginx:1.25-alpine",
      "points": 1,
      "description": "Should use nginx:1.25-alpine image"
    },
    {
      "command": "kubectl get deployment secure-supply-chain -n pluto -o jsonpath='{.status.readyReplicas}'",
      "expected": "2",
      "points": 1,
      "description": "Deployment should have 2 ready replicas"
    }
  ]
}