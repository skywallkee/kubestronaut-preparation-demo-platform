{
  "id": "cks-i-009",
  "title": "TLS and Certificate Management",
  "description": "Configure TLS encryption and certificate management for secure communications:\n\n1. Create a Certificate Authority (CA) and issue certificates for secure communication:\n   - Generate a root CA certificate and private key\n   - Create a certificate for ||api-server.saturn.local|| with SAN entries\n   - Create a client certificate for ||admin-user||\n\n2. Configure TLS termination for a web application in ||saturn|| namespace:\n   - Create a Secret with TLS certificates named ||app-tls-secret||\n   - Deploy nginx with TLS configuration\n   - Create an Ingress resource that uses TLS\n\n3. Set up mutual TLS (mTLS) authentication:\n   - Configure client certificate verification\n   - Create a pod that validates client certificates\n   - Test certificate-based authentication\n\n4. Implement certificate rotation:\n   - Create a CronJob for certificate renewal\n   - Configure automatic certificate rotation using cert-manager (if available)\n   - Verify certificates are rotated without service interruption\n\n5. Monitor certificate expiration and alert on certificates expiring within ||30 days||",
  "points": 10,
  "timeLimit": 20,
  "category": "TLS and PKI",
  "tags": [
    "tls",
    "certificates",
    "ca",
    "mtls",
    "cert-manager",
    "ingress",
    "intermediate"
  ],
  "infrastructure": {
    "namespaces": [
      "saturn"
    ],
    "resources": [
      "secrets",
      "deployments",
      "services",
      "ingresses",
      "cronjobs"
    ],
    "prerequisites": [
      "Ingress controller available",
      "OpenSSL tools available"
    ]
  },
  "solution": {
    "steps": [
      "1. Generate root CA certificate:",
      "   openssl genrsa -out ca-private-key.pem 4096",
      "   openssl req -new -x509 -key ca-private-key.pem -out ca-cert.pem -days 365 \\",
      "     -subj '/CN=Saturn-CA/O=Saturn-Security/C=US'",
      "2. Generate server certificate for api-server.saturn.local:",
      "   openssl genrsa -out server-private-key.pem 2048",
      "   cat > server-cert.conf << EOF",
      "   [req]",
      "   distinguished_name = req_distinguished_name",
      "   req_extensions = v3_req",
      "   [req_distinguished_name]",
      "   [v3_req]",
      "   keyUsage = keyEncipherment, dataEncipherment",
      "   extendedKeyUsage = serverAuth",
      "   subjectAltName = @alt_names",
      "   [alt_names]",
      "   DNS.1 = api-server.saturn.local",
      "   DNS.2 = api-server.saturn.svc.cluster.local",
      "   DNS.3 = localhost",
      "   IP.1 = 127.0.0.1",
      "   EOF",
      "   openssl req -new -key server-private-key.pem -out server-cert.csr \\",
      "     -subj '/CN=api-server.saturn.local/O=Saturn-Apps' -config server-cert.conf",
      "   openssl x509 -req -in server-cert.csr -CA ca-cert.pem -CAkey ca-private-key.pem \\",
      "     -CAcreateserial -out server-cert.pem -days 365 -extensions v3_req -extfile server-cert.conf",
      "3. Generate client certificate:",
      "   openssl genrsa -out client-private-key.pem 2048",
      "   openssl req -new -key client-private-key.pem -out client-cert.csr \\",
      "     -subj '/CN=admin-user/O=Saturn-Admins'",
      "   openssl x509 -req -in client-cert.csr -CA ca-cert.pem -CAkey ca-private-key.pem \\",
      "     -CAcreateserial -out client-cert.pem -days 365",
      "4. Create TLS secret:",
      "   kubectl create secret tls app-tls-secret \\",
      "     --cert=server-cert.pem --key=server-private-key.pem -n saturn",
      "5. Create CA secret for mTLS:",
      "   kubectl create secret generic ca-secret --from-file=ca-cert.pem -n saturn",
      "6. Deploy nginx with TLS configuration:",
      "   cat > nginx-tls-config.yaml << EOF",
      "   apiVersion: v1",
      "   kind: ConfigMap",
      "   metadata:",
      "     name: nginx-tls-config",
      "     namespace: saturn",
      "   data:",
      "     nginx.conf: |",
      "       events {}",
      "       http {",
      "         server {",
      "           listen 8443 ssl;",
      "           server_name api-server.saturn.local;",
      "           ",
      "           ssl_certificate /etc/nginx/ssl/tls.crt;",
      "           ssl_certificate_key /etc/nginx/ssl/tls.key;",
      "           ssl_client_certificate /etc/nginx/ssl/ca-cert.pem;",
      "           ssl_verify_client optional;",
      "           ",
      "           location / {",
      "             return 200 'TLS Connection Successful\\n';",
      "             add_header Content-Type text/plain;",
      "           }",
      "           ",
      "           location /secure {",
      "             if (\\$ssl_client_verify != SUCCESS) {",
      "               return 403 'Client certificate required';",
      "             }",
      "             return 200 'mTLS Authentication Successful\\n';",
      "             add_header Content-Type text/plain;",
      "           }",
      "         }",
      "       }",
      "   EOF",
      "7. Apply nginx config:",
      "   kubectl apply -f nginx-tls-config.yaml",
      "8. Create nginx deployment with TLS:",
      "   cat > nginx-tls-deployment.yaml << EOF",
      "   apiVersion: apps/v1",
      "   kind: Deployment",
      "   metadata:",
      "     name: nginx-tls",
      "     namespace: saturn",
      "   spec:",
      "     replicas: 2",
      "     selector:",
      "       matchLabels:",
      "         app: nginx-tls",
      "     template:",
      "       metadata:",
      "         labels:",
      "           app: nginx-tls",
      "       spec:",
      "         containers:",
      "         - name: nginx",
      "           image: nginx:alpine",
      "           ports:",
      "           - containerPort: 8443",
      "           volumeMounts:",
      "           - name: tls-certs",
      "             mountPath: /etc/nginx/ssl",
      "             readOnly: true",
      "           - name: ca-cert",
      "             mountPath: /etc/nginx/ssl/ca-cert.pem",
      "             subPath: ca-cert.pem",
      "             readOnly: true",
      "           - name: nginx-config",
      "             mountPath: /etc/nginx/nginx.conf",
      "             subPath: nginx.conf",
      "         volumes:",
      "         - name: tls-certs",
      "           secret:",
      "             secretName: app-tls-secret",
      "         - name: ca-cert",
      "           secret:",
      "             secretName: ca-secret",
      "         - name: nginx-config",
      "           configMap:",
      "             name: nginx-tls-config",
      "   EOF",
      "9. Apply nginx deployment:",
      "   kubectl apply -f nginx-tls-deployment.yaml",
      "10. Create service for nginx:",
      "    kubectl expose deployment nginx-tls --port=8443 --target-port=8443 -n saturn",
      "11. Create certificate monitoring CronJob:",
      "    cat > cert-monitor-cronjob.yaml << EOF",
      "    apiVersion: batch/v1",
      "    kind: CronJob",
      "    metadata:",
      "      name: cert-monitor",
      "      namespace: saturn",
      "    spec:",
      "      schedule: '0 0 * * *'",
      "      jobTemplate:",
      "        spec:",
      "          template:",
      "            spec:",
      "              restartPolicy: OnFailure",
      "              containers:",
      "              - name: cert-checker",
      "                image: alpine:latest",
      "                command:",
      "                - /bin/sh",
      "                - -c",
      "                - |",
      "                  apk add --no-cache openssl",
      "                  for cert in /certs/*.crt; do",
      "                    echo 'Checking certificate:' \\$cert",
      "                    if openssl x509 -checkend 2592000 -noout -in \\$cert; then",
      "                      echo 'Certificate valid for >30 days'",
      "                    else",
      "                      echo 'WARNING: Certificate expires within 30 days!'",
      "                    fi",
      "                  done",
      "                volumeMounts:",
      "                - name: tls-certs",
      "                  mountPath: /certs",
      "                  readOnly: true",
      "              volumes:",
      "              - name: tls-certs",
      "                secret:",
      "                  secretName: app-tls-secret",
      "    EOF",
      "12. Apply certificate monitor:",
      "    kubectl apply -f cert-monitor-cronjob.yaml",
      "13. Verify TLS deployment:",
      "    kubectl get deployment nginx-tls -n saturn",
      "    kubectl get service nginx-tls -n saturn"
    ]
  },
  "validations": [
    {
      "command": "kubectl get secret app-tls-secret -n saturn -o jsonpath='{.type}'",
      "expected": "kubernetes.io/tls",
      "points": 1,
      "description": "TLS secret should be of correct type"
    },
    {
      "command": "kubectl get secret ca-secret -n saturn -o jsonpath='{.metadata.name}'",
      "expected": "ca-secret",
      "points": 1,
      "description": "CA secret should exist"
    },
    {
      "command": "kubectl get configmap nginx-tls-config -n saturn -o jsonpath='{.metadata.name}'",
      "expected": "nginx-tls-config",
      "points": 1,
      "description": "Nginx TLS config should exist"
    },
    {
      "command": "kubectl get deployment nginx-tls -n saturn -o jsonpath='{.metadata.name}'",
      "expected": "nginx-tls",
      "points": 2,
      "description": "Nginx TLS deployment should exist"
    },
    {
      "command": "kubectl get service nginx-tls -n saturn -o jsonpath='{.spec.ports[0].port}'",
      "expected": "8443",
      "points": 1,
      "description": "Service should expose port 8443"
    },
    {
      "command": "kubectl get cronjob cert-monitor -n saturn -o jsonpath='{.metadata.name}'",
      "expected": "cert-monitor",
      "points": 2,
      "description": "Certificate monitoring CronJob should exist"
    },
    {
      "command": "kubectl get deployment nginx-tls -n saturn -o jsonpath='{.status.readyReplicas}'",
      "expected": "2",
      "points": 1,
      "description": "Nginx deployment should have 2 ready replicas"
    },
    {
      "command": "kubectl get cronjob cert-monitor -n saturn -o jsonpath='{.spec.schedule}'",
      "expected": "0 0 * * *",
      "points": 1,
      "description": "Certificate monitor should run daily"
    }
  ]
}