{
  "id": "cks-i-006",
  "title": "Runtime Security with Seccomp and AppArmor",
  "description": "Configure runtime security using seccomp and AppArmor profiles:\n\n1. Create a custom seccomp profile named ||restricted-seccomp.json|| that blocks dangerous system calls:\n   - Block ||ptrace||, ||personality||, ||mount||, ||umount2||\n   - Allow common system calls like ||read||, ||write||, ||open||, ||close||\n   - Set default action to ||SCMP_ACT_ERRNO||\n\n2. Create an AppArmor profile named ||k8s-restricted|| that:\n   - Denies access to ||/proc/sys/**||\n   - Denies network raw sockets\n   - Allows read access to ||/etc/**|| and ||/usr/**||\n   - Allows write access to ||/tmp/**|| and ||/var/tmp/**||\n\n3. Create a pod named ||secure-runtime|| in ||venus|| namespace that:\n   - Uses both seccomp and AppArmor profiles\n   - Runs ||alpine:latest|| image\n   - Has security context with ||allowPrivilegeEscalation: false||\n   - Runs as user ||1001|| with read-only root filesystem\n\n4. Test that restricted system calls are blocked\n5. Verify the pod runs successfully with the security profiles",
  "points": 10,
  "timeLimit": 18,
  "category": "Runtime Security",
  "tags": [
    "seccomp",
    "apparmor",
    "runtime-security",
    "system-calls",
    "security-profiles",
    "intermediate"
  ],
  "infrastructure": {
    "namespaces": [
      "venus"
    ],
    "resources": [
      "pods",
      "configmaps"
    ],
    "prerequisites": [
      "Seccomp and AppArmor support enabled on nodes",
      "Security profiles directory accessible"
    ]
  },
  "solution": {
    "steps": [
      "1. Create seccomp profile:",
      "   cat > restricted-seccomp.json << EOF",
      "   {",
      "     'defaultAction': 'SCMP_ACT_ERRNO',",
      "     'architectures': ['SCMP_ARCH_X86_64', 'SCMP_ARCH_X86', 'SCMP_ARCH_X32'],",
      "     'syscalls': [",
      "       {",
      "         'names': [",
      "           'accept', 'accept4', 'access', 'alarm', 'bind', 'brk', 'capget',",
      "           'capset', 'chdir', 'chmod', 'chown', 'clock_getres', 'clock_gettime',",
      "           'clock_nanosleep', 'close', 'connect', 'dup', 'dup2', 'dup3',",
      "           'epoll_create', 'epoll_ctl', 'epoll_wait', 'eventfd', 'execve',",
      "           'exit', 'exit_group', 'fcntl', 'flock', 'fork', 'fstat', 'futex',",
      "           'getdents', 'getgid', 'getpeername', 'getpid', 'getppid', 'getrandom',",
      "           'getsockname', 'getsockopt', 'getuid', 'listen', 'lseek', 'madvise',",
      "           'memfd_create', 'mmap', 'mprotect', 'munmap', 'nanosleep', 'newfstatat',",
      "           'open', 'openat', 'pipe', 'pipe2', 'poll', 'ppoll', 'prctl',",
      "           'pread64', 'pwrite64', 'read', 'readv', 'recv', 'recvfrom',",
      "           'recvmsg', 'rt_sigaction', 'rt_sigprocmask', 'rt_sigreturn',",
      "           'sched_yield', 'seccomp', 'select', 'send', 'sendmsg', 'sendto',",
      "           'setgid', 'setgroups', 'setresuid', 'setsid', 'setsockopt',",
      "           'setuid', 'shutdown', 'socket', 'socketpair', 'stat', 'statx',",
      "           'tgkill', 'uname', 'wait4', 'write', 'writev'",
      "         ],",
      "         'action': 'SCMP_ACT_ALLOW'",
      "       }",
      "     ]",
      "   }",
      "   EOF",
      "2. Create AppArmor profile:",
      "   cat > k8s-restricted << EOF",
      "   #include <tunables/global>",
      "   profile k8s-restricted flags=(attach_disconnected,mediate_deleted) {",
      "     #include <abstractions/base>",
      "     ",
      "     # File access permissions",
      "     /etc/** r,",
      "     /usr/** r,",
      "     /lib/** r,",
      "     /bin/** r,",
      "     /sbin/** r,",
      "     /tmp/** rw,",
      "     /var/tmp/** rw,",
      "     ",
      "     # Deny dangerous paths",
      "     deny /proc/sys/** rw,",
      "     deny /sys/** w,",
      "     ",
      "     # Network restrictions",
      "     deny network raw,",
      "     network inet dgram,",
      "     network inet stream,",
      "     ",
      "     # Basic capabilities",
      "     capability setuid,",
      "     capability setgid,",
      "     capability chown,",
      "   }",
      "   EOF",
      "3. Load AppArmor profile (simulated for test environment):",
      "   kubectl create configmap apparmor-profile --from-file=k8s-restricted -n venus",
      "4. Create seccomp profile configmap:",
      "   kubectl create configmap seccomp-profile --from-file=restricted-seccomp.json -n venus",
      "5. Create secure pod with profiles:",
      "   cat > secure-runtime-pod.yaml << EOF",
      "   apiVersion: v1",
      "   kind: Pod",
      "   metadata:",
      "     name: secure-runtime",
      "     namespace: venus",
      "     annotations:",
      "       container.apparmor.security.beta.kubernetes.io/secure-container: 'localhost/k8s-restricted'",
      "   spec:",
      "     securityContext:",
      "       runAsUser: 1001",
      "       runAsGroup: 1001",
      "       fsGroup: 1001",
      "       seccompProfile:",
      "         type: Localhost",
      "         localhostProfile: restricted-seccomp.json",
      "     containers:",
      "     - name: secure-container",
      "       image: alpine:latest",
      "       command: ['sleep', '3600']",
      "       securityContext:",
      "         allowPrivilegeEscalation: false",
      "         readOnlyRootFilesystem: true",
      "         capabilities:",
      "           drop:",
      "           - ALL",
      "       volumeMounts:",
      "       - name: tmp",
      "         mountPath: /tmp",
      "       - name: seccomp-profile",
      "         mountPath: /var/lib/kubelet/seccomp",
      "         readOnly: true",
      "     volumes:",
      "     - name: tmp",
      "       emptyDir: {}",
      "     - name: seccomp-profile",
      "       configMap:",
      "         name: seccomp-profile",
      "   EOF",
      "6. Apply the secure pod:",
      "   kubectl apply -f secure-runtime-pod.yaml",
      "7. Verify pod is running:",
      "   kubectl get pod secure-runtime -n venus",
      "8. Test restricted system calls (should fail):",
      "   kubectl exec secure-runtime -n venus -- sh -c 'echo test > /proc/sys/kernel/hostname' || echo 'Correctly blocked'",
      "9. Test allowed operations:",
      "   kubectl exec secure-runtime -n venus -- ls /tmp",
      "   kubectl exec secure-runtime -n venus -- touch /tmp/test-file"
    ]
  },
  "validations": [
    {
      "command": "kubectl get configmap seccomp-profile -n venus -o jsonpath='{.metadata.name}'",
      "expected": "seccomp-profile",
      "points": 2,
      "description": "Seccomp profile configmap should exist"
    },
    {
      "command": "kubectl get configmap apparmor-profile -n venus -o jsonpath='{.metadata.name}'",
      "expected": "apparmor-profile",
      "points": 2,
      "description": "AppArmor profile configmap should exist"
    },
    {
      "command": "kubectl get pod secure-runtime -n venus -o jsonpath='{.metadata.name}'",
      "expected": "secure-runtime",
      "points": 1,
      "description": "Secure runtime pod should exist"
    },
    {
      "command": "kubectl get pod secure-runtime -n venus -o jsonpath='{.spec.securityContext.runAsUser}'",
      "expected": "1001",
      "points": 1,
      "description": "Pod should run as user 1001"
    },
    {
      "command": "kubectl get pod secure-runtime -n venus -o jsonpath='{.spec.containers[0].securityContext.allowPrivilegeEscalation}'",
      "expected": "false",
      "points": 1,
      "description": "Container should not allow privilege escalation"
    },
    {
      "command": "kubectl get pod secure-runtime -n venus -o jsonpath='{.spec.containers[0].securityContext.readOnlyRootFilesystem}'",
      "expected": "true",
      "points": 1,
      "description": "Container should use read-only root filesystem"
    },
    {
      "command": "kubectl get pod secure-runtime -n venus -o jsonpath='{.status.phase}'",
      "expected": "Running",
      "points": 2,
      "description": "Secure runtime pod should be running"
    }
  ]
}