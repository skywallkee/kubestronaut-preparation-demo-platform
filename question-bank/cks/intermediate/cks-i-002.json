{
  "id": "cks-i-002",
  "title": "Network Policy Micro-segmentation",
  "description": "Implement network policies for micro-segmentation in a multi-tier application:\n\n1. Create three deployments in ||venus|| namespace:\n   - ||frontend|| (nginx:alpine, 2 replicas, label: ||tier=frontend||)\n   - ||backend|| (httpd:alpine, 2 replicas, label: ||tier=backend||)\n   - ||database|| (redis:alpine, 1 replica, label: ||tier=database||)\n\n2. Create NetworkPolicies to enforce the following traffic rules:\n   - ||frontend|| can only receive traffic from outside the cluster\n   - ||backend|| can only receive traffic from ||frontend|| pods\n   - ||database|| can only receive traffic from ||backend|| pods\n   - All pods can make DNS queries\n   - No other traffic should be allowed\n\n3. Create services for each tier and test connectivity",
  "points": 10,
  "timeLimit": 20,
  "category": "Network Security",
  "tags": [
    "network-policy",
    "micro-segmentation",
    "pod-selector",
    "traffic-isolation",
    "intermediate"
  ],
  "infrastructure": {
    "namespaces": [
      "venus"
    ],
    "resources": [
      "deployments",
      "services",
      "networkpolicies"
    ],
    "prerequisites": [
      "Kubernetes cluster with CNI supporting NetworkPolicy"
    ]
  },
  "solution": {
    "steps": [
      "1. Create frontend deployment:",
      "   kubectl create deployment frontend --image=nginx:alpine --replicas=2 -n venus",
      "   kubectl label deployment frontend tier=frontend -n venus",
      "2. Create backend deployment:",
      "   kubectl create deployment backend --image=httpd:alpine --replicas=2 -n venus",
      "   kubectl label deployment backend tier=backend -n venus",
      "3. Create database deployment:",
      "   kubectl create deployment database --image=redis:alpine --replicas=1 -n venus",
      "   kubectl label deployment database tier=database -n venus",
      "4. Create services:",
      "   kubectl expose deployment frontend --port=80 --target-port=80 -n venus",
      "   kubectl expose deployment backend --port=80 --target-port=80 -n venus",
      "   kubectl expose deployment database --port=6379 --target-port=6379 -n venus",
      "5. Create NetworkPolicy for database (most restrictive):",
      "   cat > database-netpol.yaml << EOF",
      "   apiVersion: networking.k8s.io/v1",
      "   kind: NetworkPolicy",
      "   metadata:",
      "     name: database-policy",
      "     namespace: venus",
      "   spec:",
      "     podSelector:",
      "       matchLabels:",
      "         tier: database",
      "     policyTypes:",
      "     - Ingress",
      "     - Egress",
      "     ingress:",
      "     - from:",
      "       - podSelector:",
      "           matchLabels:",
      "             tier: backend",
      "       ports:",
      "       - protocol: TCP",
      "         port: 6379",
      "     egress:",
      "     - to: []",
      "       ports:",
      "       - protocol: UDP",
      "         port: 53",
      "   EOF",
      "6. Create NetworkPolicy for backend:",
      "   cat > backend-netpol.yaml << EOF",
      "   apiVersion: networking.k8s.io/v1",
      "   kind: NetworkPolicy",
      "   metadata:",
      "     name: backend-policy",
      "     namespace: venus",
      "   spec:",
      "     podSelector:",
      "       matchLabels:",
      "         tier: backend",
      "     policyTypes:",
      "     - Ingress",
      "     - Egress",
      "     ingress:",
      "     - from:",
      "       - podSelector:",
      "           matchLabels:",
      "             tier: frontend",
      "       ports:",
      "       - protocol: TCP",
      "         port: 80",
      "     egress:",
      "     - to:",
      "       - podSelector:",
      "           matchLabels:",
      "             tier: database",
      "       ports:",
      "       - protocol: TCP",
      "         port: 6379",
      "     - to: []",
      "       ports:",
      "       - protocol: UDP",
      "         port: 53",
      "   EOF",
      "7. Create NetworkPolicy for frontend:",
      "   cat > frontend-netpol.yaml << EOF",
      "   apiVersion: networking.k8s.io/v1",
      "   kind: NetworkPolicy",
      "   metadata:",
      "     name: frontend-policy",
      "     namespace: venus",
      "   spec:",
      "     podSelector:",
      "       matchLabels:",
      "         tier: frontend",
      "     policyTypes:",
      "     - Ingress",
      "     - Egress",
      "     ingress:",
      "     - {}",
      "     egress:",
      "     - to:",
      "       - podSelector:",
      "           matchLabels:",
      "             tier: backend",
      "       ports:",
      "       - protocol: TCP",
      "         port: 80",
      "     - to: []",
      "       ports:",
      "       - protocol: UDP",
      "         port: 53",
      "   EOF",
      "8. Apply all NetworkPolicies:",
      "   kubectl apply -f database-netpol.yaml",
      "   kubectl apply -f backend-netpol.yaml",
      "   kubectl apply -f frontend-netpol.yaml",
      "9. Verify policies are applied:",
      "   kubectl get networkpolicy -n venus"
    ]
  },
  "validations": [
    {
      "command": "kubectl get deployment frontend -n venus -o jsonpath='{.metadata.labels.tier}'",
      "expected": "frontend",
      "points": 1,
      "description": "Frontend deployment should have tier=frontend label"
    },
    {
      "command": "kubectl get deployment backend -n venus -o jsonpath='{.metadata.labels.tier}'",
      "expected": "backend",
      "points": 1,
      "description": "Backend deployment should have tier=backend label"
    },
    {
      "command": "kubectl get deployment database -n venus -o jsonpath='{.metadata.labels.tier}'",
      "expected": "database",
      "points": 1,
      "description": "Database deployment should have tier=database label"
    },
    {
      "command": "kubectl get networkpolicy database-policy -n venus -o jsonpath='{.metadata.name}'",
      "expected": "database-policy",
      "points": 2,
      "description": "Database NetworkPolicy should exist"
    },
    {
      "command": "kubectl get networkpolicy backend-policy -n venus -o jsonpath='{.metadata.name}'",
      "expected": "backend-policy",
      "points": 2,
      "description": "Backend NetworkPolicy should exist"
    },
    {
      "command": "kubectl get networkpolicy frontend-policy -n venus -o jsonpath='{.metadata.name}'",
      "expected": "frontend-policy",
      "points": 2,
      "description": "Frontend NetworkPolicy should exist"
    },
    {
      "command": "kubectl get service frontend backend database -n venus --no-headers | wc -l",
      "expected": "3",
      "points": 1,
      "description": "All three services should be created"
    }
  ]
}