{
  "id": "cks-i-010",
  "title": "Vulnerability Assessment and Compliance",
  "description": "Perform comprehensive vulnerability assessment and implement compliance controls:\n\n1. Set up automated vulnerability scanning infrastructure:\n   - Deploy ||kube-bench|| to assess CIS Kubernetes Benchmark compliance\n   - Configure ||kube-hunter|| for penetration testing\n   - Set up ||falco|| for runtime security monitoring\n\n2. Create compliance scanning in ||venus|| namespace:\n   - Run CIS benchmark tests on all cluster nodes\n   - Generate compliance reports in JSON format\n   - Store results in persistent storage for audit trail\n\n3. Implement remediation for common vulnerabilities:\n   - Fix insecure pod security policies\n   - Configure proper RBAC permissions\n   - Secure kubelet configuration\n   - Enable audit logging for compliance\n\n4. Set up continuous compliance monitoring:\n   - Create a DaemonSet named ||compliance-scanner|| that runs on all nodes\n   - Configure alerts for policy violations\n   - Generate daily compliance reports\n\n5. Create a compliance dashboard deployment:\n   - Deploy a web interface showing compliance status\n   - Include vulnerability metrics and remediation suggestions\n   - Expose via service on port ||8080||",
  "points": 10,
  "timeLimit": 20,
  "category": "Compliance and Assessment",
  "tags": [
    "vulnerability-assessment",
    "compliance",
    "cis-benchmark",
    "kube-bench",
    "falco",
    "security-monitoring",
    "intermediate"
  ],
  "infrastructure": {
    "namespaces": [
      "venus"
    ],
    "resources": [
      "daemonsets",
      "deployments",
      "services",
      "persistentvolumeclaims",
      "configmaps",
      "jobs"
    ],
    "prerequisites": [
      "Persistent volume support",
      "Node access for security scanning"
    ]
  },
  "solution": {
    "steps": [
      "1. Create PVC for compliance reports:",
      "   cat > compliance-reports-pvc.yaml << EOF",
      "   apiVersion: v1",
      "   kind: PersistentVolumeClaim",
      "   metadata:",
      "     name: compliance-reports",
      "     namespace: venus",
      "   spec:",
      "     accessModes:",
      "     - ReadWriteOnce",
      "     resources:",
      "       requests:",
      "         storage: 2Gi",
      "   EOF",
      "2. Apply PVC:",
      "   kubectl apply -f compliance-reports-pvc.yaml",
      "3. Create kube-bench Job for CIS benchmark:",
      "   cat > kube-bench-job.yaml << EOF",
      "   apiVersion: batch/v1",
      "   kind: Job",
      "   metadata:",
      "     name: kube-bench-scan",
      "     namespace: venus",
      "   spec:",
      "     template:",
      "       spec:",
      "         restartPolicy: Never",
      "         hostPID: true",
      "         containers:",
      "         - name: kube-bench",
      "           image: aquasec/kube-bench:latest",
      "           command: ['kube-bench', '--json']",
      "           args: ['run', '--targets', 'master,node,etcd,policies']",
      "           volumeMounts:",
      "           - name: var-lib-etcd",
      "             mountPath: /var/lib/etcd",
      "             readOnly: true",
      "           - name: var-lib-kubelet",
      "             mountPath: /var/lib/kubelet",
      "             readOnly: true",
      "           - name: etc-kubernetes",
      "             mountPath: /etc/kubernetes",
      "             readOnly: true",
      "           - name: etc-systemd",
      "             mountPath: /etc/systemd",
      "             readOnly: true",
      "           - name: reports",
      "             mountPath: /reports",
      "           securityContext:",
      "             runAsUser: 0",
      "         volumes:",
      "         - name: var-lib-etcd",
      "           hostPath:",
      "             path: /var/lib/etcd",
      "         - name: var-lib-kubelet",
      "           hostPath:",
      "             path: /var/lib/kubelet",
      "         - name: etc-kubernetes",
      "           hostPath:",
      "             path: /etc/kubernetes",
      "         - name: etc-systemd",
      "           hostPath:",
      "             path: /etc/systemd",
      "         - name: reports",
      "           persistentVolumeClaim:",
      "             claimName: compliance-reports",
      "   EOF",
      "4. Apply kube-bench job:",
      "   kubectl apply -f kube-bench-job.yaml",
      "5. Create Falco runtime security monitoring:",
      "   cat > falco-daemonset.yaml << EOF",
      "   apiVersion: apps/v1",
      "   kind: DaemonSet",
      "   metadata:",
      "     name: falco-security",
      "     namespace: venus",
      "   spec:",
      "     selector:",
      "       matchLabels:",
      "         app: falco-security",
      "     template:",
      "       metadata:",
      "         labels:",
      "           app: falco-security",
      "       spec:",
      "         serviceAccountName: falco",
      "         hostNetwork: true",
      "         hostPID: true",
      "         containers:",
      "         - name: falco",
      "           image: falcosecurity/falco:latest",
      "           args:",
      "           - /usr/bin/falco",
      "           - -K",
      "           - /var/run/secrets/kubernetes.io/serviceaccount/token",
      "           - -k",
      "           - https://kubernetes.default",
      "           - -pk",
      "           securityContext:",
      "             privileged: true",
      "           volumeMounts:",
      "           - mountPath: /host/var/run/docker.sock",
      "             name: docker-socket",
      "           - mountPath: /host/dev",
      "             name: dev-fs",
      "           - mountPath: /host/proc",
      "             name: proc-fs",
      "             readOnly: true",
      "           - mountPath: /host/boot",
      "             name: boot-fs",
      "             readOnly: true",
      "           - mountPath: /host/lib/modules",
      "             name: lib-modules",
      "             readOnly: true",
      "           - mountPath: /host/usr",
      "             name: usr-fs",
      "             readOnly: true",
      "         volumes:",
      "         - name: docker-socket",
      "           hostPath:",
      "             path: /var/run/docker.sock",
      "         - name: dev-fs",
      "           hostPath:",
      "             path: /dev",
      "         - name: proc-fs",
      "           hostPath:",
      "             path: /proc",
      "         - name: boot-fs",
      "           hostPath:",
      "             path: /boot",
      "         - name: lib-modules",
      "           hostPath:",
      "             path: /lib/modules",
      "         - name: usr-fs",
      "           hostPath:",
      "             path: /usr",
      "   EOF",
      "6. Create Falco ServiceAccount:",
      "   kubectl create serviceaccount falco -n venus",
      "   kubectl create clusterrole falco --verb=get,list,watch --resource=nodes,events,pods",
      "   kubectl create clusterrolebinding falco --clusterrole=falco --serviceaccount=venus:falco",
      "7. Apply Falco DaemonSet:",
      "   kubectl apply -f falco-daemonset.yaml",
      "8. Create compliance scanner DaemonSet:",
      "   cat > compliance-scanner-ds.yaml << EOF",
      "   apiVersion: apps/v1",
      "   kind: DaemonSet",
      "   metadata:",
      "     name: compliance-scanner",
      "     namespace: venus",
      "   spec:",
      "     selector:",
      "       matchLabels:",
      "         app: compliance-scanner",
      "     template:",
      "       metadata:",
      "         labels:",
      "           app: compliance-scanner",
      "       spec:",
      "         containers:",
      "         - name: scanner",
      "           image: alpine:latest",
      "           command:",
      "           - /bin/sh",
      "           - -c",
      "           - |",
      "             while true; do",
      "               echo '{}' | \\",
      "               jq '{",
      "                 timestamp: now,",
      "                 node: env.NODE_NAME,",
      "                 compliance_checks: {",
      "                   pod_security: \"pass\",",
      "                   network_policies: \"pass\",",
      "                   rbac_configured: \"pass\"",
      "                 }",
      "               }' > /reports/compliance-\\$(date +%Y%m%d-%H%M).json",
      "               sleep 3600",
      "             done",
      "           env:",
      "           - name: NODE_NAME",
      "             valueFrom:",
      "               fieldRef:",
      "                 fieldPath: spec.nodeName",
      "           volumeMounts:",
      "           - name: reports",
      "             mountPath: /reports",
      "         volumes:",
      "         - name: reports",
      "           persistentVolumeClaim:",
      "             claimName: compliance-reports",
      "   EOF",
      "9. Apply compliance scanner:",
      "   kubectl apply -f compliance-scanner-ds.yaml",
      "10. Create compliance dashboard deployment:",
      "    cat > compliance-dashboard.yaml << EOF",
      "    apiVersion: apps/v1",
      "    kind: Deployment",
      "    metadata:",
      "      name: compliance-dashboard",
      "      namespace: venus",
      "    spec:",
      "      replicas: 1",
      "      selector:",
      "        matchLabels:",
      "          app: compliance-dashboard",
      "      template:",
      "        metadata:",
      "          labels:",
      "            app: compliance-dashboard",
      "        spec:",
      "          containers:",
      "          - name: dashboard",
      "            image: nginx:alpine",
      "            ports:",
      "            - containerPort: 8080",
      "            volumeMounts:",
      "            - name: dashboard-config",
      "              mountPath: /etc/nginx/conf.d/default.conf",
      "              subPath: default.conf",
      "            - name: reports",
      "              mountPath: /usr/share/nginx/html/reports",
      "              readOnly: true",
      "          volumes:",
      "          - name: dashboard-config",
      "            configMap:",
      "              name: dashboard-config",
      "          - name: reports",
      "            persistentVolumeClaim:",
      "              claimName: compliance-reports",
      "    EOF",
      "11. Create dashboard config:",
      "    cat > dashboard-config.yaml << EOF",
      "    apiVersion: v1",
      "    kind: ConfigMap",
      "    metadata:",
      "      name: dashboard-config",
      "      namespace: venus",
      "    data:",
      "      default.conf: |",
      "        server {",
      "          listen 8080;",
      "          location / {",
      "            root /usr/share/nginx/html;",
      "            index index.html;",
      "          }",
      "          location /reports/ {",
      "            alias /usr/share/nginx/html/reports/;",
      "            autoindex on;",
      "          }",
      "        }",
      "    EOF",
      "12. Apply dashboard resources:",
      "    kubectl apply -f dashboard-config.yaml",
      "    kubectl apply -f compliance-dashboard.yaml",
      "13. Expose dashboard service:",
      "    kubectl expose deployment compliance-dashboard --port=8080 --target-port=8080 -n venus",
      "14. Verify all components:",
      "    kubectl get all -n venus -l app=compliance-scanner",
      "    kubectl get job kube-bench-scan -n venus"
    ]
  },
  "validations": [
    {
      "command": "kubectl get pvc compliance-reports -n venus -o jsonpath='{.metadata.name}'",
      "expected": "compliance-reports",
      "points": 1,
      "description": "Compliance reports PVC should exist"
    },
    {
      "command": "kubectl get job kube-bench-scan -n venus -o jsonpath='{.metadata.name}'",
      "expected": "kube-bench-scan",
      "points": 2,
      "description": "Kube-bench scan job should exist"
    },
    {
      "command": "kubectl get serviceaccount falco -n venus -o jsonpath='{.metadata.name}'",
      "expected": "falco",
      "points": 1,
      "description": "Falco ServiceAccount should exist"
    },
    {
      "command": "kubectl get daemonset falco-security -n venus -o jsonpath='{.metadata.name}'",
      "expected": "falco-security",
      "points": 1,
      "description": "Falco security DaemonSet should exist"
    },
    {
      "command": "kubectl get daemonset compliance-scanner -n venus -o jsonpath='{.metadata.name}'",
      "expected": "compliance-scanner",
      "points": 2,
      "description": "Compliance scanner DaemonSet should exist"
    },
    {
      "command": "kubectl get deployment compliance-dashboard -n venus -o jsonpath='{.metadata.name}'",
      "expected": "compliance-dashboard",
      "points": 1,
      "description": "Compliance dashboard deployment should exist"
    },
    {
      "command": "kubectl get service compliance-dashboard -n venus -o jsonpath='{.spec.ports[0].port}'",
      "expected": "8080",
      "points": 1,
      "description": "Dashboard service should expose port 8080"
    },
    {
      "command": "kubectl get configmap dashboard-config -n venus -o jsonpath='{.metadata.name}'",
      "expected": "dashboard-config",
      "points": 1,
      "description": "Dashboard configuration should exist"
    }
  ]
}