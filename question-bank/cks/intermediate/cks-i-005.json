{
  "id": "cks-i-005",
  "title": "Image Security and Admission Controllers",
  "description": "Configure image security policies using admission controllers and image scanning:\n\n1. Create a ValidatingAdmissionWebhook configuration that rejects images from untrusted registries\n2. Configure an ImagePolicy that only allows images from these trusted registries:\n   - ||docker.io|| (Docker Hub)\n   - ||gcr.io|| (Google Container Registry)\n   - ||quay.io|| (Red Hat Quay)\n   - ||registry.k8s.io|| (Kubernetes Registry)\n\n3. Create a deployment named ||trusted-app|| in ||saturn|| namespace that:\n   - Uses image ||nginx:1.21|| from Docker Hub\n   - Has image pull policy ||Always||\n   - Includes security labels: ||security.policy=strict||\n\n4. Test the policy by attempting to create a pod with an untrusted image (should fail)\n5. Implement image signature verification using cosign (if available)\n6. Configure automatic image vulnerability scanning alerts",
  "points": 10,
  "timeLimit": 20,
  "category": "Image Security",
  "tags": [
    "admission-controllers",
    "image-policy",
    "trusted-registries",
    "image-scanning",
    "vulnerability-assessment",
    "intermediate"
  ],
  "infrastructure": {
    "namespaces": [
      "saturn"
    ],
    "resources": [
      "deployments",
      "pods",
      "validatingadmissionwebhooks"
    ],
    "prerequisites": [
      "Admission controllers enabled",
      "Image scanning tools available"
    ]
  },
  "solution": {
    "steps": [
      "1. Create ImagePolicy configuration:",
      "   cat > image-policy.yaml << EOF",
      "   apiVersion: v1",
      "   kind: ConfigMap",
      "   metadata:",
      "     name: image-policy-config",
      "     namespace: kube-system",
      "   data:",
      "     policy.yaml: |",
      "       imagePolicy:",
      "         defaultAllow: false",
      "         allowedRegistries:",
      "         - docker.io",
      "         - gcr.io",
      "         - quay.io",
      "         - registry.k8s.io",
      "         - k8s.gcr.io",
      "   EOF",
      "2. Apply the image policy config:",
      "   kubectl apply -f image-policy.yaml",
      "3. Create ValidatingAdmissionWebhook (simplified example):",
      "   cat > admission-webhook.yaml << EOF",
      "   apiVersion: admissionregistration.k8s.io/v1",
      "   kind: ValidatingAdmissionWebhook",
      "   metadata:",
      "     name: image-security-webhook",
      "   webhooks:",
      "   - name: validate-images.security.io",
      "     clientConfig:",
      "       service:",
      "         name: image-validator",
      "         namespace: kube-system",
      "         path: /validate",
      "     rules:",
      "     - operations: ['CREATE', 'UPDATE']",
      "       apiGroups: ['']",
      "       apiVersions: ['v1']",
      "       resources: ['pods']",
      "     - operations: ['CREATE', 'UPDATE']",
      "       apiGroups: ['apps']",
      "       apiVersions: ['v1']",
      "       resources: ['deployments']",
      "     admissionReviewVersions: ['v1', 'v1beta1']",
      "     sideEffects: None",
      "     failurePolicy: Ignore",
      "   EOF",
      "4. Create trusted app deployment:",
      "   cat > trusted-app.yaml << EOF",
      "   apiVersion: apps/v1",
      "   kind: Deployment",
      "   metadata:",
      "     name: trusted-app",
      "     namespace: saturn",
      "     labels:",
      "       security.policy: strict",
      "   spec:",
      "     replicas: 2",
      "     selector:",
      "       matchLabels:",
      "         app: trusted-app",
      "     template:",
      "       metadata:",
      "         labels:",
      "           app: trusted-app",
      "           security.policy: strict",
      "       spec:",
      "         containers:",
      "         - name: nginx",
      "           image: docker.io/nginx:1.21",
      "           imagePullPolicy: Always",
      "           ports:",
      "           - containerPort: 80",
      "           securityContext:",
      "             runAsNonRoot: true",
      "             runAsUser: 101",
      "             allowPrivilegeEscalation: false",
      "             capabilities:",
      "               drop:",
      "               - ALL",
      "           resources:",
      "             limits:",
      "               cpu: 100m",
      "               memory: 128Mi",
      "   EOF",
      "5. Apply the trusted deployment:",
      "   kubectl apply -f trusted-app.yaml",
      "6. Create test pod with untrusted image (should fail if policy works):",
      "   cat > untrusted-test.yaml << EOF",
      "   apiVersion: v1",
      "   kind: Pod",
      "   metadata:",
      "     name: untrusted-test",
      "     namespace: saturn",
      "   spec:",
      "     containers:",
      "     - name: test",
      "       image: suspicious-registry.com/malware:latest",
      "   EOF",
      "7. Test policy (should be rejected):",
      "   kubectl apply -f untrusted-test.yaml || echo 'Policy correctly rejected untrusted image'",
      "8. Configure image scanning with trivy (if available):",
      "   kubectl create job image-scan --image=aquasec/trivy:latest \\",
      "     --dry-run=client -o yaml > image-scan-job.yaml",
      "9. Verify trusted app is running:",
      "   kubectl get deployment trusted-app -n saturn",
      "   kubectl get pods -l app=trusted-app -n saturn"
    ]
  },
  "validations": [
    {
      "command": "kubectl get configmap image-policy-config -n kube-system -o jsonpath='{.metadata.name}'",
      "expected": "image-policy-config",
      "points": 2,
      "description": "Image policy configuration should exist"
    },
    {
      "command": "kubectl get deployment trusted-app -n saturn -o jsonpath='{.metadata.name}'",
      "expected": "trusted-app",
      "points": 2,
      "description": "Trusted app deployment should exist"
    },
    {
      "command": "kubectl get deployment trusted-app -n saturn -o jsonpath='{.metadata.labels.security\\.policy}'",
      "expected": "strict",
      "points": 1,
      "description": "Deployment should have security.policy=strict label"
    },
    {
      "command": "kubectl get deployment trusted-app -n saturn -o jsonpath='{.spec.template.spec.containers[0].image}'",
      "expected": "docker.io/nginx:1.21",
      "points": 2,
      "description": "Should use nginx:1.21 from docker.io"
    },
    {
      "command": "kubectl get deployment trusted-app -n saturn -o jsonpath='{.spec.template.spec.containers[0].imagePullPolicy}'",
      "expected": "Always",
      "points": 1,
      "description": "Should have imagePullPolicy Always"
    },
    {
      "command": "kubectl get deployment trusted-app -n saturn -o jsonpath='{.status.readyReplicas}'",
      "expected": "2",
      "points": 2,
      "description": "Deployment should have 2 ready replicas"
    }
  ]
}