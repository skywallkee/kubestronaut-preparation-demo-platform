# Ultra-lightweight Kubernetes Exam Simulator - Minimal resource usage

# Stage 1: Build frontend using node:18-alpine (needed for build tools)
FROM node:18-alpine AS frontend-build

WORKDIR /app/frontend

# Copy only essential package files
COPY app/frontend/package*.json ./
COPY app/frontend/craco.config.js ./
COPY app/frontend/.env ./

# Install dependencies with memory-optimized settings
ENV NODE_OPTIONS="--max-old-space-size=1024"
ENV GENERATE_SOURCEMAP=false
ENV DISABLE_ESLINT_PLUGIN=true
ENV SKIP_PREFLIGHT_CHECK=true
ENV CI=false
ENV TSC_COMPILE_ON_ERROR=true

# Minimal dependency installation
RUN npm ci --omit=dev --omit=optional --no-audit --no-fund --silent && \
    npm cache clean --force

# Copy and build frontend
COPY app/frontend/ ./
RUN npm run build && \
    # Aggressive cleanup - remove everything except build
    rm -rf src/ node_modules/ package*.json public/ && \
    find build -type f \( -name "*.map" -o -name "*.txt" -o -name "*.LICENSE.txt" \) -delete && \
    # Compress static assets if possible
    find build -type f \( -name "*.js" -o -name "*.css" -o -name "*.json" \) -exec gzip -9 -k {} \; 2>/dev/null || true

# Stage 2: Build backend using node:18-alpine
FROM node:18-alpine AS backend-build

WORKDIR /app

# Copy backend package files
COPY app/backend/package*.json ./

# Install only production dependencies with aggressive cleanup
RUN npm ci --omit=dev --omit=optional --no-audit --no-fund --silent && \
    npm cache clean --force && \
    # Remove all unnecessary files from node_modules
    find node_modules -type f \( -name "*.md" -o -name "*.txt" -o -name ".*.yml" -o -name "LICENSE*" -o -name "*.map" -o -name "*.ts" -o -name "*.flow" \) -delete 2>/dev/null || true && \
    find node_modules -type d \( -name "test" -o -name "tests" -o -name "docs" -o -name "example" -o -name "examples" -o -name ".github" -o -name "coverage" \) -exec rm -rf {} + 2>/dev/null || true && \
    # Remove source maps and TypeScript files
    find node_modules -name "*.d.ts" -delete 2>/dev/null || true

# Copy backend source (excluding tests and docs)
COPY app/backend/src ./src
COPY app/backend/*.js* ./

# Stage 3: Final ultra-lightweight runtime using distroless or alpine with static node
FROM alpine:3.19 AS runtime

# Install only the absolute minimum - static Node.js binary instead of full package
RUN apk add --no-cache libstdc++ libgcc && \
    # Download static Node.js binary (much smaller than full nodejs package)
    wget -q https://unofficial-builds.nodejs.org/download/release/v18.19.0/node-v18.19.0-linux-x64-musl.tar.xz && \
    tar -xJf node-v18.19.0-linux-x64-musl.tar.xz && \
    mv node-v18.19.0-linux-x64-musl/bin/node /usr/local/bin/node && \
    rm -rf node-v18.19.0-linux-x64-musl* && \
    # Install minimal kubectl binary
    wget -q https://dl.k8s.io/release/v1.28.0/bin/linux/amd64/kubectl -O /usr/local/bin/kubectl && \
    chmod +x /usr/local/bin/kubectl && \
    # Install minimal helm binary
    wget -q https://get.helm.sh/helm-v3.13.0-linux-amd64.tar.gz -O - | tar xz && \
    mv linux-amd64/helm /usr/local/bin/ && \
    rm -rf linux-amd64 && \
    # Install minimal shell and curl for health checks
    apk add --no-cache bash curl ca-certificates && \
    rm -rf /var/cache/apk/*

WORKDIR /app

# Copy only production backend from build stage
COPY --from=backend-build /app/node_modules ./node_modules
COPY --from=backend-build /app/src ./src
COPY --from=backend-build /app/*.js* ./

# Copy optimized frontend
COPY --from=frontend-build /app/frontend/build ./frontend/build

# Copy only essential files with compression
COPY helm-templates/ ./helm-templates/

# Create minimal question bank (only copy most used exam type)
RUN mkdir -p ./question-bank
COPY question-bank/ckad ./question-bank/ckad

# Minimal entrypoint script
COPY docker-entrypoint.sh /usr/local/bin/
RUN chmod +x /usr/local/bin/docker-entrypoint.sh && \
    mkdir -p /root/.kube /app/generated-charts

# Set minimal environment
ENV NODE_ENV=production \
    NODE_OPTIONS="--max-old-space-size=256" \
    PORT=8080 \
    GENERATED_CHARTS_PATH=/app/generated-charts \
    QUESTION_BANK_PATH=/app/question-bank \
    HELM_TEMPLATES_PATH=/app/helm-templates

EXPOSE 8080

# Simple health check
HEALTHCHECK --interval=120s --timeout=5s \
    CMD curl -f http://localhost:8080/api/health || exit 1

ENTRYPOINT ["/usr/local/bin/docker-entrypoint.sh"]
CMD ["/usr/local/bin/node", "--max-old-space-size=256", "src/index.js"]

# ===== ALTERNATIVE: Using Google Distroless (even smaller) =====
# Uncomment below to use distroless instead of Alpine

# FROM gcr.io/distroless/nodejs18-debian12:nonroot AS runtime-distroless
#
# WORKDIR /app
#
# # Copy application files
# COPY --from=backend-build --chown=nonroot:nonroot /app/node_modules ./node_modules
# COPY --from=backend-build --chown=nonroot:nonroot /app/src ./src
# COPY --from=backend-build --chown=nonroot:nonroot /app/*.js* ./
# COPY --from=frontend-build --chown=nonroot:nonroot /app/frontend/build ./frontend/build
# COPY --chown=nonroot:nonroot helm-templates/ ./helm-templates/
# COPY --chown=nonroot:nonroot question-bank/ckad ./question-bank/ckad
#
# # Note: kubectl and helm would need to be copied from another stage as static binaries
# # COPY --from=tools /usr/local/bin/kubectl /usr/local/bin/kubectl
# # COPY --from=tools /usr/local/bin/helm /usr/local/bin/helm
#
# ENV NODE_ENV=production \
#     PORT=8080
#
# EXPOSE 8080
# USER nonroot
#
# ENTRYPOINT ["nodejs", "src/index.js"]